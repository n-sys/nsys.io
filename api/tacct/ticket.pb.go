// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ticket.proto

package tacct

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ticket struct {
	// The actual API key used in per-RPC authentication.
	// We use the terms "API Key" and "ticket" somewhat interchangeably.
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// The id of the owning account.
	AccountId            string               `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a6c21780e82d22, []int{0}
}

func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticket.Unmarshal(m, b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return xxx_messageInfo_Ticket.Size(m)
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *Ticket) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Ticket) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Ticket) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type ListTicketsRequest struct {
	// The subaccount to list or, if empty, the requesting account.
	AccountId            string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTicketsRequest) Reset()         { *m = ListTicketsRequest{} }
func (m *ListTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTicketsRequest) ProtoMessage()    {}
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a6c21780e82d22, []int{1}
}

func (m *ListTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsRequest.Unmarshal(m, b)
}
func (m *ListTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsRequest.Marshal(b, m, deterministic)
}
func (m *ListTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsRequest.Merge(m, src)
}
func (m *ListTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTicketsRequest.Size(m)
}
func (m *ListTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsRequest proto.InternalMessageInfo

func (m *ListTicketsRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type ListTicketsResponse struct {
	Tickets              []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListTicketsResponse) Reset()         { *m = ListTicketsResponse{} }
func (m *ListTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse) ProtoMessage()    {}
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a6c21780e82d22, []int{2}
}

func (m *ListTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsResponse.Unmarshal(m, b)
}
func (m *ListTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsResponse.Marshal(b, m, deterministic)
}
func (m *ListTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse.Merge(m, src)
}
func (m *ListTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTicketsResponse.Size(m)
}
func (m *ListTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse proto.InternalMessageInfo

func (m *ListTicketsResponse) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type CreateTicketRequest struct {
	// Create a ticket for this subaccount or, if empty, the requesting master account.
	// Subaccounts cannot create their own tickets.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Expiration time must be at least one hour in the future.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateTicketRequest) Reset()         { *m = CreateTicketRequest{} }
func (m *CreateTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTicketRequest) ProtoMessage()    {}
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a6c21780e82d22, []int{3}
}

func (m *CreateTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTicketRequest.Unmarshal(m, b)
}
func (m *CreateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTicketRequest.Marshal(b, m, deterministic)
}
func (m *CreateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketRequest.Merge(m, src)
}
func (m *CreateTicketRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTicketRequest.Size(m)
}
func (m *CreateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketRequest proto.InternalMessageInfo

func (m *CreateTicketRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CreateTicketRequest) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type CreateTicketResponse struct {
	Ticket               *Ticket  `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTicketResponse) Reset()         { *m = CreateTicketResponse{} }
func (m *CreateTicketResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTicketResponse) ProtoMessage()    {}
func (*CreateTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a6c21780e82d22, []int{4}
}

func (m *CreateTicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTicketResponse.Unmarshal(m, b)
}
func (m *CreateTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTicketResponse.Marshal(b, m, deterministic)
}
func (m *CreateTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketResponse.Merge(m, src)
}
func (m *CreateTicketResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTicketResponse.Size(m)
}
func (m *CreateTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketResponse proto.InternalMessageInfo

func (m *CreateTicketResponse) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type DeleteTicketRequest struct {
	// The API Key from the offending ticket.
	ApiKey               string   `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTicketRequest) Reset()         { *m = DeleteTicketRequest{} }
func (m *DeleteTicketRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTicketRequest) ProtoMessage()    {}
func (*DeleteTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a6c21780e82d22, []int{5}
}

func (m *DeleteTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTicketRequest.Unmarshal(m, b)
}
func (m *DeleteTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTicketRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTicketRequest.Merge(m, src)
}
func (m *DeleteTicketRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTicketRequest.Size(m)
}
func (m *DeleteTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTicketRequest proto.InternalMessageInfo

func (m *DeleteTicketRequest) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Ticket)(nil), "nsys.api.tacct.Ticket")
	proto.RegisterType((*ListTicketsRequest)(nil), "nsys.api.tacct.ListTicketsRequest")
	proto.RegisterType((*ListTicketsResponse)(nil), "nsys.api.tacct.ListTicketsResponse")
	proto.RegisterType((*CreateTicketRequest)(nil), "nsys.api.tacct.CreateTicketRequest")
	proto.RegisterType((*CreateTicketResponse)(nil), "nsys.api.tacct.CreateTicketResponse")
	proto.RegisterType((*DeleteTicketRequest)(nil), "nsys.api.tacct.DeleteTicketRequest")
}

func init() { proto.RegisterFile("ticket.proto", fileDescriptor_98a6c21780e82d22) }

var fileDescriptor_98a6c21780e82d22 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x97, 0x6e, 0x6a, 0xb5, 0xd3, 0x6a, 0x08, 0x17, 0x8d, 0x2a, 0x68, 0xa2, 0xf2, 0xb8,
	0xe8, 0x95, 0x83, 0xba, 0x4b, 0xee, 0xf8, 0x2b, 0xc4, 0xd0, 0xa4, 0x68, 0x08, 0x04, 0x17, 0x95,
	0x97, 0x99, 0xca, 0x5a, 0x6b, 0x7b, 0xb1, 0x23, 0x91, 0x37, 0xe1, 0x59, 0x78, 0x3a, 0x14, 0xdb,
	0x41, 0x6e, 0x12, 0xda, 0xee, 0x32, 0x3e, 0xdf, 0x39, 0xdf, 0xef, 0x9c, 0x63, 0x07, 0x46, 0x86,
	0x67, 0x77, 0xcc, 0x10, 0x95, 0x4b, 0x23, 0xd1, 0x89, 0xd0, 0xa5, 0x26, 0x54, 0x71, 0x62, 0x68,
	0x96, 0x99, 0xf8, 0x7c, 0x29, 0xe5, 0x72, 0xc5, 0x92, 0x95, 0x14, 0xcb, 0xbc, 0x10, 0x82, 0x8b,
	0x65, 0x22, 0x15, 0xcb, 0xa9, 0xe1, 0x52, 0x68, 0x97, 0x14, 0x3f, 0xf3, 0x22, 0xfb, 0x75, 0x53,
	0xfc, 0x4c, 0xd8, 0x5a, 0x99, 0xd2, 0x07, 0x9f, 0x37, 0x83, 0x86, 0xaf, 0x99, 0x36, 0x74, 0xad,
	0x9c, 0x00, 0xff, 0x89, 0xa0, 0x7f, 0x6d, 0x19, 0xd0, 0x53, 0x18, 0x50, 0xc5, 0x17, 0x77, 0xac,
	0x9c, 0x44, 0xd3, 0x68, 0x76, 0x9c, 0xf6, 0xa9, 0xe2, 0x9f, 0x58, 0x89, 0xce, 0x00, 0x68, 0x96,
	0xc9, 0x42, 0x98, 0x05, 0xbf, 0x9d, 0xf4, 0x6c, 0xec, 0xd8, 0x9f, 0x7c, 0xbc, 0x45, 0xaf, 0x60,
	0x98, 0xe5, 0x8c, 0x1a, 0xb6, 0xa8, 0x8a, 0x4f, 0x0e, 0xa7, 0xd1, 0x6c, 0x38, 0x8f, 0x89, 0x73,
	0x26, 0xb5, 0x33, 0xb9, 0xae, 0x9d, 0x53, 0x70, 0xf2, 0xea, 0xa0, 0x4a, 0x66, 0xbf, 0x14, 0xcf,
	0x7d, 0xf2, 0xd1, 0xee, 0x64, 0x27, 0xaf, 0x0e, 0xf0, 0x05, 0xa0, 0x4b, 0xae, 0x8d, 0xe3, 0xd7,
	0x29, 0xbb, 0x2f, 0x98, 0x36, 0x0d, 0xdc, 0xa8, 0x81, 0x8b, 0x3f, 0xc0, 0x78, 0x23, 0x49, 0x2b,
	0x29, 0x34, 0x43, 0x2f, 0x61, 0xe0, 0x76, 0xa1, 0x27, 0xd1, 0xf4, 0x70, 0x36, 0x9c, 0x9f, 0x92,
	0xcd, 0x6d, 0x10, 0x97, 0x91, 0xd6, 0x32, 0x7c, 0x0f, 0xe3, 0x37, 0xbe, 0x11, 0x1b, 0xd8, 0xcb,
	0xbe, 0xd9, 0x70, 0xef, 0x41, 0x0d, 0xbf, 0x87, 0x27, 0x9b, 0x96, 0x1e, 0x9e, 0x40, 0xdf, 0x51,
	0x59, 0xbf, 0xff, 0xb3, 0x7b, 0x15, 0x26, 0x30, 0x7e, 0xcb, 0x56, 0xac, 0x89, 0x1e, 0xdc, 0x80,
	0x5e, 0x78, 0x03, 0xe6, 0xbf, 0x8f, 0x60, 0xe0, 0x07, 0x86, 0xbe, 0xc1, 0x30, 0x98, 0x1f, 0xc2,
	0x4d, 0xab, 0xf6, 0x46, 0xe2, 0xf3, 0xad, 0x1a, 0xd7, 0x03, 0x3e, 0x40, 0x5f, 0xe0, 0x24, 0x08,
	0x5c, 0xa6, 0x57, 0x7b, 0x15, 0x3f, 0xab, 0x67, 0x17, 0xbc, 0x12, 0x72, 0x55, 0xbf, 0x12, 0x7c,
	0x80, 0x7e, 0xc0, 0x28, 0x1c, 0x1a, 0x6a, 0xd1, 0x74, 0x6c, 0x31, 0x7e, 0xb1, 0x5d, 0xf4, 0x8f,
	0xf9, 0x2b, 0x3c, 0x0a, 0x23, 0x15, 0xf4, 0x5e, 0xf5, 0x77, 0x52, 0x7f, 0x86, 0x51, 0xb8, 0xa2,
	0x76, 0xd5, 0x8e, 0x05, 0xc6, 0xa7, 0xad, 0x7b, 0xf4, 0xae, 0xfa, 0x19, 0x38, 0xce, 0x30, 0xa1,
	0x93, 0xb3, 0xab, 0xe2, 0x2e, 0xce, 0xd7, 0xe3, 0xef, 0x8f, 0x6d, 0x19, 0x2e, 0x13, 0xaa, 0x78,
	0x62, 0x2b, 0xdd, 0xf4, 0xad, 0xff, 0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0xd9, 0x80,
	0xb3, 0xdf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TicketsClient is the client API for Tickets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketsClient interface {
	// ListTickets returns the tickets for a subaccount or the issuer's account.
	ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	ListTicketsLRO(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// CreateTicket creates an additional ticket for the requesting master account
	// or for one of its subaccounts. The ticket is immediately usable.
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	CreateTicketLRO(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// DeleteTicket deletes the specified ticket for a requesting master account
	// or one of its subaccounts. Note: Our frontend caches ticket information.
	// It may take several minutes for "deleted" tickets to become unusable.
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteTicketLRO(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type ticketsClient struct {
	cc *grpc.ClientConn
}

func NewTicketsClient(cc *grpc.ClientConn) TicketsClient {
	return &ticketsClient{cc}
}

func (c *ticketsClient) ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.tacct.Tickets/ListTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) ListTicketsLRO(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.tacct.Tickets/ListTicketsLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.tacct.Tickets/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) CreateTicketLRO(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.tacct.Tickets/CreateTicketLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nsys.api.tacct.Tickets/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) DeleteTicketLRO(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.tacct.Tickets/DeleteTicketLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketsServer is the server API for Tickets service.
type TicketsServer interface {
	// ListTickets returns the tickets for a subaccount or the issuer's account.
	ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	ListTicketsLRO(context.Context, *ListTicketsRequest) (*longrunning.Operation, error)
	// CreateTicket creates an additional ticket for the requesting master account
	// or for one of its subaccounts. The ticket is immediately usable.
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	CreateTicketLRO(context.Context, *CreateTicketRequest) (*longrunning.Operation, error)
	// DeleteTicket deletes the specified ticket for a requesting master account
	// or one of its subaccounts. Note: Our frontend caches ticket information.
	// It may take several minutes for "deleted" tickets to become unusable.
	DeleteTicket(context.Context, *DeleteTicketRequest) (*empty.Empty, error)
	DeleteTicketLRO(context.Context, *DeleteTicketRequest) (*longrunning.Operation, error)
}

// UnimplementedTicketsServer can be embedded to have forward compatible implementations.
type UnimplementedTicketsServer struct {
}

func (*UnimplementedTicketsServer) ListTickets(ctx context.Context, req *ListTicketsRequest) (*ListTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (*UnimplementedTicketsServer) ListTicketsLRO(ctx context.Context, req *ListTicketsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketsLRO not implemented")
}
func (*UnimplementedTicketsServer) CreateTicket(ctx context.Context, req *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (*UnimplementedTicketsServer) CreateTicketLRO(ctx context.Context, req *CreateTicketRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketLRO not implemented")
}
func (*UnimplementedTicketsServer) DeleteTicket(ctx context.Context, req *DeleteTicketRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (*UnimplementedTicketsServer) DeleteTicketLRO(ctx context.Context, req *DeleteTicketRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketLRO not implemented")
}

func RegisterTicketsServer(s *grpc.Server, srv TicketsServer) {
	s.RegisterService(&_Tickets_serviceDesc, srv)
}

func _Tickets_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.tacct.Tickets/ListTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_ListTicketsLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).ListTicketsLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.tacct.Tickets/ListTicketsLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).ListTicketsLRO(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.tacct.Tickets/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_CreateTicketLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).CreateTicketLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.tacct.Tickets/CreateTicketLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).CreateTicketLRO(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.tacct.Tickets/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_DeleteTicketLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).DeleteTicketLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.tacct.Tickets/DeleteTicketLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).DeleteTicketLRO(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tickets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsys.api.tacct.Tickets",
	HandlerType: (*TicketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTickets",
			Handler:    _Tickets_ListTickets_Handler,
		},
		{
			MethodName: "ListTicketsLRO",
			Handler:    _Tickets_ListTicketsLRO_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _Tickets_CreateTicket_Handler,
		},
		{
			MethodName: "CreateTicketLRO",
			Handler:    _Tickets_CreateTicketLRO_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _Tickets_DeleteTicket_Handler,
		},
		{
			MethodName: "DeleteTicketLRO",
			Handler:    _Tickets_DeleteTicketLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket.proto",
}
