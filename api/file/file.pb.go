// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file.proto

package file

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	ntypes "nsys.io/api/ntypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadGenericFileRequest struct {
	// The file's identifier which must be unique within the
	// account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
	// Automatically generated if not supplied in upload request.
	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GenericFile *ntypes.GenericFile `protobuf:"bytes,2,opt,name=generic_file,json=genericFile,proto3" json:"generic_file,omitempty"`
	// Requested file expiration time. The time is capped to comply with
	// account-specific minimums and maximums. A zero value requests the
	// maximum allowable expiration time be used.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadGenericFileRequest) Reset()         { *m = UploadGenericFileRequest{} }
func (m *UploadGenericFileRequest) String() string { return proto.CompactTextString(m) }
func (*UploadGenericFileRequest) ProtoMessage()    {}
func (*UploadGenericFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{0}
}

func (m *UploadGenericFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadGenericFileRequest.Unmarshal(m, b)
}
func (m *UploadGenericFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadGenericFileRequest.Marshal(b, m, deterministic)
}
func (m *UploadGenericFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadGenericFileRequest.Merge(m, src)
}
func (m *UploadGenericFileRequest) XXX_Size() int {
	return xxx_messageInfo_UploadGenericFileRequest.Size(m)
}
func (m *UploadGenericFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadGenericFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadGenericFileRequest proto.InternalMessageInfo

func (m *UploadGenericFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadGenericFileRequest) GetGenericFile() *ntypes.GenericFile {
	if m != nil {
		return m.GenericFile
	}
	return nil
}

func (m *UploadGenericFileRequest) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type UploadGenericFileResponse struct {
	// Identifier for the uploaded file.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// The actual expiration time for the file.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadGenericFileResponse) Reset()         { *m = UploadGenericFileResponse{} }
func (m *UploadGenericFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadGenericFileResponse) ProtoMessage()    {}
func (*UploadGenericFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{1}
}

func (m *UploadGenericFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadGenericFileResponse.Unmarshal(m, b)
}
func (m *UploadGenericFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadGenericFileResponse.Marshal(b, m, deterministic)
}
func (m *UploadGenericFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadGenericFileResponse.Merge(m, src)
}
func (m *UploadGenericFileResponse) XXX_Size() int {
	return xxx_messageInfo_UploadGenericFileResponse.Size(m)
}
func (m *UploadGenericFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadGenericFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadGenericFileResponse proto.InternalMessageInfo

func (m *UploadGenericFileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadGenericFileResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type CreateFilesetRequest struct {
	// The fileset's identifier which must be unique within the
	// account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
	// Automatically generated if not supplied.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One or more files that are to become members of the fileset.
	FileNames []string `protobuf:"bytes,2,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	// Requested fileset expiration time. The time is capped so that it
	// is no later than the latest expiration time of any file in the set.
	// A zero value requests the maximum allowable expiration time be used.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateFilesetRequest) Reset()         { *m = CreateFilesetRequest{} }
func (m *CreateFilesetRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFilesetRequest) ProtoMessage()    {}
func (*CreateFilesetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{2}
}

func (m *CreateFilesetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFilesetRequest.Unmarshal(m, b)
}
func (m *CreateFilesetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFilesetRequest.Marshal(b, m, deterministic)
}
func (m *CreateFilesetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFilesetRequest.Merge(m, src)
}
func (m *CreateFilesetRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFilesetRequest.Size(m)
}
func (m *CreateFilesetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFilesetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFilesetRequest proto.InternalMessageInfo

func (m *CreateFilesetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateFilesetRequest) GetFileNames() []string {
	if m != nil {
		return m.FileNames
	}
	return nil
}

func (m *CreateFilesetRequest) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type CreateFilesetResponse struct {
	// Identifier for the fileset.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// The actual expiration time for the fileset.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateFilesetResponse) Reset()         { *m = CreateFilesetResponse{} }
func (m *CreateFilesetResponse) String() string { return proto.CompactTextString(m) }
func (*CreateFilesetResponse) ProtoMessage()    {}
func (*CreateFilesetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{3}
}

func (m *CreateFilesetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFilesetResponse.Unmarshal(m, b)
}
func (m *CreateFilesetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFilesetResponse.Marshal(b, m, deterministic)
}
func (m *CreateFilesetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFilesetResponse.Merge(m, src)
}
func (m *CreateFilesetResponse) XXX_Size() int {
	return xxx_messageInfo_CreateFilesetResponse.Size(m)
}
func (m *CreateFilesetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFilesetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFilesetResponse proto.InternalMessageInfo

func (m *CreateFilesetResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateFilesetResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type InitiateProcessingRequest struct {
	// Identifier of the object to process.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Application-specific type of processing to perform.
	ProcessCode          string   `protobuf:"bytes,2,opt,name=process_code,json=processCode,proto3" json:"process_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitiateProcessingRequest) Reset()         { *m = InitiateProcessingRequest{} }
func (m *InitiateProcessingRequest) String() string { return proto.CompactTextString(m) }
func (*InitiateProcessingRequest) ProtoMessage()    {}
func (*InitiateProcessingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{4}
}

func (m *InitiateProcessingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateProcessingRequest.Unmarshal(m, b)
}
func (m *InitiateProcessingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateProcessingRequest.Marshal(b, m, deterministic)
}
func (m *InitiateProcessingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateProcessingRequest.Merge(m, src)
}
func (m *InitiateProcessingRequest) XXX_Size() int {
	return xxx_messageInfo_InitiateProcessingRequest.Size(m)
}
func (m *InitiateProcessingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateProcessingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateProcessingRequest proto.InternalMessageInfo

func (m *InitiateProcessingRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitiateProcessingRequest) GetProcessCode() string {
	if m != nil {
		return m.ProcessCode
	}
	return ""
}

type ParseEmailRequest struct {
	// The name of a generic file contaning an eml file
	EmlName string `protobuf:"bytes,1,opt,name=eml_name,json=emlName,proto3" json:"eml_name,omitempty"`
	// The source id that the attachments will be linked to
	SourceName string `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// The whitelist of email attachment file extensions to save, things like:
	// ".pdf", ".png", ".tif", ".tiff", ".jpg", ".jpeg". If empty, then no
	// attachments will be saved. In any case a list of rejected attachments
	// will be returned.
	AttachmentWhitelist  []string `protobuf:"bytes,3,rep,name=attachment_whitelist,json=attachmentWhitelist,proto3" json:"attachment_whitelist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseEmailRequest) Reset()         { *m = ParseEmailRequest{} }
func (m *ParseEmailRequest) String() string { return proto.CompactTextString(m) }
func (*ParseEmailRequest) ProtoMessage()    {}
func (*ParseEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{5}
}

func (m *ParseEmailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseEmailRequest.Unmarshal(m, b)
}
func (m *ParseEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseEmailRequest.Marshal(b, m, deterministic)
}
func (m *ParseEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseEmailRequest.Merge(m, src)
}
func (m *ParseEmailRequest) XXX_Size() int {
	return xxx_messageInfo_ParseEmailRequest.Size(m)
}
func (m *ParseEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseEmailRequest proto.InternalMessageInfo

func (m *ParseEmailRequest) GetEmlName() string {
	if m != nil {
		return m.EmlName
	}
	return ""
}

func (m *ParseEmailRequest) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

func (m *ParseEmailRequest) GetAttachmentWhitelist() []string {
	if m != nil {
		return m.AttachmentWhitelist
	}
	return nil
}

type ParseEmailResponse struct {
	// The email headers
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The email body (html/text)
	EmailBody string `protobuf:"bytes,2,opt,name=email_body,json=emailBody,proto3" json:"email_body,omitempty"`
	// The saved attachment generic file IDs
	Attachments []*ntypes.EmailAttachment `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// The attachments that were rejected due to their file extensions not
	// being in the given whitelist.
	RejectedAttachments  []*ntypes.EmailAttachment `protobuf:"bytes,4,rep,name=rejected_attachments,json=rejectedAttachments,proto3" json:"rejected_attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ParseEmailResponse) Reset()         { *m = ParseEmailResponse{} }
func (m *ParseEmailResponse) String() string { return proto.CompactTextString(m) }
func (*ParseEmailResponse) ProtoMessage()    {}
func (*ParseEmailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{6}
}

func (m *ParseEmailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseEmailResponse.Unmarshal(m, b)
}
func (m *ParseEmailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseEmailResponse.Marshal(b, m, deterministic)
}
func (m *ParseEmailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseEmailResponse.Merge(m, src)
}
func (m *ParseEmailResponse) XXX_Size() int {
	return xxx_messageInfo_ParseEmailResponse.Size(m)
}
func (m *ParseEmailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseEmailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParseEmailResponse proto.InternalMessageInfo

func (m *ParseEmailResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ParseEmailResponse) GetEmailBody() string {
	if m != nil {
		return m.EmailBody
	}
	return ""
}

func (m *ParseEmailResponse) GetAttachments() []*ntypes.EmailAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *ParseEmailResponse) GetRejectedAttachments() []*ntypes.EmailAttachment {
	if m != nil {
		return m.RejectedAttachments
	}
	return nil
}

type RenderEmailBodyRequest struct {
	// The name of a generic file contaning an eml file
	EmlName string `protobuf:"bytes,1,opt,name=eml_name,json=emlName,proto3" json:"eml_name,omitempty"`
	// The source id that the rendered email will be linked to
	SourceName string `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// The whitelist of inline email attachments to include in the rendering,
	// things like: ".jpg", ".jpeg", ".png", ".gif". If empty, then no inline
	// attachments will be rendered in the email body.
	InlineAttachmentWhitelist []string `protobuf:"bytes,3,rep,name=inline_attachment_whitelist,json=inlineAttachmentWhitelist,proto3" json:"inline_attachment_whitelist,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *RenderEmailBodyRequest) Reset()         { *m = RenderEmailBodyRequest{} }
func (m *RenderEmailBodyRequest) String() string { return proto.CompactTextString(m) }
func (*RenderEmailBodyRequest) ProtoMessage()    {}
func (*RenderEmailBodyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{7}
}

func (m *RenderEmailBodyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderEmailBodyRequest.Unmarshal(m, b)
}
func (m *RenderEmailBodyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderEmailBodyRequest.Marshal(b, m, deterministic)
}
func (m *RenderEmailBodyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderEmailBodyRequest.Merge(m, src)
}
func (m *RenderEmailBodyRequest) XXX_Size() int {
	return xxx_messageInfo_RenderEmailBodyRequest.Size(m)
}
func (m *RenderEmailBodyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderEmailBodyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenderEmailBodyRequest proto.InternalMessageInfo

func (m *RenderEmailBodyRequest) GetEmlName() string {
	if m != nil {
		return m.EmlName
	}
	return ""
}

func (m *RenderEmailBodyRequest) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

func (m *RenderEmailBodyRequest) GetInlineAttachmentWhitelist() []string {
	if m != nil {
		return m.InlineAttachmentWhitelist
	}
	return nil
}

type RenderEmailBodyResponse struct {
	// The generic file ID of the rendered email pdf
	EmailPdfName         string   `protobuf:"bytes,1,opt,name=email_pdf_name,json=emailPdfName,proto3" json:"email_pdf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderEmailBodyResponse) Reset()         { *m = RenderEmailBodyResponse{} }
func (m *RenderEmailBodyResponse) String() string { return proto.CompactTextString(m) }
func (*RenderEmailBodyResponse) ProtoMessage()    {}
func (*RenderEmailBodyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{8}
}

func (m *RenderEmailBodyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderEmailBodyResponse.Unmarshal(m, b)
}
func (m *RenderEmailBodyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderEmailBodyResponse.Marshal(b, m, deterministic)
}
func (m *RenderEmailBodyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderEmailBodyResponse.Merge(m, src)
}
func (m *RenderEmailBodyResponse) XXX_Size() int {
	return xxx_messageInfo_RenderEmailBodyResponse.Size(m)
}
func (m *RenderEmailBodyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderEmailBodyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenderEmailBodyResponse proto.InternalMessageInfo

func (m *RenderEmailBodyResponse) GetEmailPdfName() string {
	if m != nil {
		return m.EmailPdfName
	}
	return ""
}

type RenderPdfRequest struct {
	// The name of a generic file containing a pdf file
	PdfName string `protobuf:"bytes,1,opt,name=pdf_name,json=pdfName,proto3" json:"pdf_name,omitempty"`
	// The source id that the rendered pages will be linked to
	SourceName           string   `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderPdfRequest) Reset()         { *m = RenderPdfRequest{} }
func (m *RenderPdfRequest) String() string { return proto.CompactTextString(m) }
func (*RenderPdfRequest) ProtoMessage()    {}
func (*RenderPdfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{9}
}

func (m *RenderPdfRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderPdfRequest.Unmarshal(m, b)
}
func (m *RenderPdfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderPdfRequest.Marshal(b, m, deterministic)
}
func (m *RenderPdfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderPdfRequest.Merge(m, src)
}
func (m *RenderPdfRequest) XXX_Size() int {
	return xxx_messageInfo_RenderPdfRequest.Size(m)
}
func (m *RenderPdfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderPdfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenderPdfRequest proto.InternalMessageInfo

func (m *RenderPdfRequest) GetPdfName() string {
	if m != nil {
		return m.PdfName
	}
	return ""
}

func (m *RenderPdfRequest) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

type RenderPdfResponse struct {
	// The generic file IDs of the rendered pages
	PageNames            []string `protobuf:"bytes,1,rep,name=page_names,json=pageNames,proto3" json:"page_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenderPdfResponse) Reset()         { *m = RenderPdfResponse{} }
func (m *RenderPdfResponse) String() string { return proto.CompactTextString(m) }
func (*RenderPdfResponse) ProtoMessage()    {}
func (*RenderPdfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{10}
}

func (m *RenderPdfResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenderPdfResponse.Unmarshal(m, b)
}
func (m *RenderPdfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenderPdfResponse.Marshal(b, m, deterministic)
}
func (m *RenderPdfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenderPdfResponse.Merge(m, src)
}
func (m *RenderPdfResponse) XXX_Size() int {
	return xxx_messageInfo_RenderPdfResponse.Size(m)
}
func (m *RenderPdfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenderPdfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenderPdfResponse proto.InternalMessageInfo

func (m *RenderPdfResponse) GetPageNames() []string {
	if m != nil {
		return m.PageNames
	}
	return nil
}

type SplitTiffRequest struct {
	// The name of a generic file containing a tiff file
	TiffName string `protobuf:"bytes,1,opt,name=tiff_name,json=tiffName,proto3" json:"tiff_name,omitempty"`
	// The source id that the pages will be linked to
	SourceName           string   `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplitTiffRequest) Reset()         { *m = SplitTiffRequest{} }
func (m *SplitTiffRequest) String() string { return proto.CompactTextString(m) }
func (*SplitTiffRequest) ProtoMessage()    {}
func (*SplitTiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{11}
}

func (m *SplitTiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitTiffRequest.Unmarshal(m, b)
}
func (m *SplitTiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitTiffRequest.Marshal(b, m, deterministic)
}
func (m *SplitTiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitTiffRequest.Merge(m, src)
}
func (m *SplitTiffRequest) XXX_Size() int {
	return xxx_messageInfo_SplitTiffRequest.Size(m)
}
func (m *SplitTiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitTiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SplitTiffRequest proto.InternalMessageInfo

func (m *SplitTiffRequest) GetTiffName() string {
	if m != nil {
		return m.TiffName
	}
	return ""
}

func (m *SplitTiffRequest) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

type SplitTiffResponse struct {
	// The generic file IDs of the individual pages
	PageNames            []string `protobuf:"bytes,1,rep,name=page_names,json=pageNames,proto3" json:"page_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplitTiffResponse) Reset()         { *m = SplitTiffResponse{} }
func (m *SplitTiffResponse) String() string { return proto.CompactTextString(m) }
func (*SplitTiffResponse) ProtoMessage()    {}
func (*SplitTiffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{12}
}

func (m *SplitTiffResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitTiffResponse.Unmarshal(m, b)
}
func (m *SplitTiffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitTiffResponse.Marshal(b, m, deterministic)
}
func (m *SplitTiffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitTiffResponse.Merge(m, src)
}
func (m *SplitTiffResponse) XXX_Size() int {
	return xxx_messageInfo_SplitTiffResponse.Size(m)
}
func (m *SplitTiffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitTiffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SplitTiffResponse proto.InternalMessageInfo

func (m *SplitTiffResponse) GetPageNames() []string {
	if m != nil {
		return m.PageNames
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadGenericFileRequest)(nil), "nsys.api.file.UploadGenericFileRequest")
	proto.RegisterType((*UploadGenericFileResponse)(nil), "nsys.api.file.UploadGenericFileResponse")
	proto.RegisterType((*CreateFilesetRequest)(nil), "nsys.api.file.CreateFilesetRequest")
	proto.RegisterType((*CreateFilesetResponse)(nil), "nsys.api.file.CreateFilesetResponse")
	proto.RegisterType((*InitiateProcessingRequest)(nil), "nsys.api.file.InitiateProcessingRequest")
	proto.RegisterType((*ParseEmailRequest)(nil), "nsys.api.file.ParseEmailRequest")
	proto.RegisterType((*ParseEmailResponse)(nil), "nsys.api.file.ParseEmailResponse")
	proto.RegisterMapType((map[string]string)(nil), "nsys.api.file.ParseEmailResponse.HeadersEntry")
	proto.RegisterType((*RenderEmailBodyRequest)(nil), "nsys.api.file.RenderEmailBodyRequest")
	proto.RegisterType((*RenderEmailBodyResponse)(nil), "nsys.api.file.RenderEmailBodyResponse")
	proto.RegisterType((*RenderPdfRequest)(nil), "nsys.api.file.RenderPdfRequest")
	proto.RegisterType((*RenderPdfResponse)(nil), "nsys.api.file.RenderPdfResponse")
	proto.RegisterType((*SplitTiffRequest)(nil), "nsys.api.file.SplitTiffRequest")
	proto.RegisterType((*SplitTiffResponse)(nil), "nsys.api.file.SplitTiffResponse")
}

func init() { proto.RegisterFile("file.proto", fileDescriptor_9188e3b7e55e1162) }

var fileDescriptor_9188e3b7e55e1162 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xe1, 0x8e, 0xdb, 0x44,
	0x10, 0xc7, 0xcf, 0x49, 0xe1, 0x9a, 0x49, 0xae, 0xe4, 0xb6, 0x69, 0xc9, 0xf9, 0x38, 0x5d, 0xea,
	0x1e, 0x90, 0x4f, 0x8e, 0x08, 0x5f, 0x50, 0x91, 0xa8, 0x7a, 0xd5, 0x41, 0x91, 0x50, 0x1b, 0xf9,
	0x8a, 0xa8, 0xd0, 0x49, 0xc6, 0x89, 0x27, 0xc9, 0x82, 0xb3, 0x6b, 0xbc, 0x1b, 0x20, 0x5f, 0x91,
	0xe0, 0x09, 0x78, 0x0c, 0x9e, 0x86, 0x27, 0x42, 0xeb, 0xb5, 0x1d, 0xc7, 0xce, 0xc5, 0x41, 0xc0,
	0x37, 0x7b, 0x76, 0xe6, 0x3f, 0xbf, 0xf1, 0xc8, 0x7f, 0x1b, 0x60, 0x4a, 0x03, 0xb4, 0xc3, 0x88,
	0x4b, 0x4e, 0x8e, 0x98, 0x58, 0x09, 0xdb, 0x0b, 0xa9, 0xad, 0x82, 0xe6, 0xe3, 0x19, 0xe7, 0xb3,
	0x00, 0x07, 0x01, 0x67, 0xb3, 0x68, 0xc9, 0x18, 0x65, 0xb3, 0x01, 0x0f, 0x31, 0xf2, 0x24, 0xe5,
	0x4c, 0xe8, 0x1a, 0xf3, 0x3c, 0x49, 0x8a, 0xef, 0xc6, 0xcb, 0xe9, 0x40, 0xd2, 0x05, 0x0a, 0xe9,
	0x2d, 0xc2, 0x24, 0xe1, 0xb4, 0x98, 0x80, 0x8b, 0x50, 0xae, 0x92, 0xc3, 0x8b, 0xb8, 0x23, 0xe5,
	0x03, 0x2f, 0xa4, 0x03, 0x26, 0x57, 0x21, 0x8a, 0x81, 0xea, 0xed, 0xea, 0x6b, 0x9d, 0x65, 0xfd,
	0x69, 0x40, 0xf7, 0xeb, 0x30, 0xe0, 0x9e, 0xff, 0x05, 0x32, 0x8c, 0xe8, 0xe4, 0x73, 0x1a, 0xa0,
	0x83, 0x3f, 0x2e, 0x51, 0x48, 0x42, 0xe0, 0x0e, 0xf3, 0x16, 0xd8, 0x35, 0x7a, 0x46, 0xbf, 0xe1,
	0xc4, 0xd7, 0xe4, 0x29, 0xb4, 0x66, 0x3a, 0xd3, 0x55, 0x6a, 0xdd, 0x5a, 0xcf, 0xe8, 0x37, 0x87,
	0xef, 0xd9, 0xd9, 0x7c, 0x89, 0x7c, 0x5e, 0xae, 0x39, 0x5b, 0xdf, 0x90, 0x4f, 0xa1, 0x89, 0xbf,
	0x84, 0x34, 0x42, 0x57, 0x8d, 0xd3, 0xad, 0xc7, 0xf5, 0xa6, 0xad, 0x47, 0xb1, 0xd3, 0x51, 0xec,
	0xd7, 0xe9, 0xac, 0x0e, 0xe8, 0x74, 0x15, 0xb0, 0x02, 0x38, 0xd9, 0x42, 0x2b, 0x42, 0xce, 0x04,
	0x2a, 0xdc, 0x97, 0x39, 0x5c, 0x75, 0x5d, 0xec, 0x56, 0xfb, 0x47, 0xdd, 0x7e, 0x37, 0xa0, 0xf3,
	0x3c, 0x42, 0x4f, 0xa2, 0xea, 0x23, 0x50, 0xee, 0x7a, 0x30, 0x67, 0x7a, 0xdf, 0xae, 0xba, 0x11,
	0xdd, 0x5a, 0xaf, 0xde, 0x6f, 0x38, 0x0d, 0x15, 0x51, 0x1c, 0xe2, 0xdf, 0x8d, 0x3d, 0x87, 0x07,
	0x05, 0x8e, 0xff, 0x6b, 0x64, 0x07, 0x4e, 0xbe, 0x64, 0x54, 0x52, 0x4f, 0xe2, 0x28, 0xe2, 0x13,
	0x14, 0x82, 0xb2, 0xd9, 0xae, 0xb1, 0x1f, 0x41, 0x2b, 0xd4, 0x89, 0xee, 0x84, 0xfb, 0xba, 0x5d,
	0xc3, 0x69, 0x26, 0xb1, 0xe7, 0xdc, 0x47, 0xeb, 0x57, 0x03, 0x8e, 0x47, 0x5e, 0x24, 0xf0, 0x6a,
	0xe1, 0xd1, 0x20, 0x15, 0x3b, 0x81, 0xbb, 0xb8, 0x08, 0xdc, 0x9c, 0xe0, 0x21, 0x2e, 0x82, 0x78,
	0x82, 0x73, 0x68, 0x0a, 0xbe, 0x8c, 0x26, 0xfa, 0x61, 0x26, 0x92, 0xa0, 0x43, 0x71, 0xc2, 0x47,
	0xd0, 0xf1, 0xa4, 0xf4, 0x26, 0xf3, 0x05, 0x32, 0xe9, 0xfe, 0x3c, 0xa7, 0x12, 0x03, 0x2a, 0x64,
	0xb7, 0x1e, 0x3f, 0xf5, 0xfb, 0xeb, 0xb3, 0x6f, 0xd2, 0x23, 0xeb, 0xaf, 0x1a, 0x90, 0x3c, 0x44,
	0xf2, 0x00, 0x5f, 0xc0, 0xe1, 0x1c, 0x3d, 0x1f, 0x23, 0xd1, 0x35, 0x7a, 0xf5, 0x7e, 0x73, 0x68,
	0xdb, 0x1b, 0x6f, 0xaa, 0x5d, 0xae, 0xb1, 0x5f, 0xe8, 0x82, 0x2b, 0x26, 0xa3, 0x95, 0x93, 0x96,
	0xab, 0xfd, 0xa3, 0x4a, 0x73, 0xc7, 0xdc, 0x5f, 0x25, 0xcc, 0x8d, 0x38, 0x72, 0xc9, 0xfd, 0x15,
	0xb9, 0x84, 0xe6, 0x1a, 0x4b, 0xc4, 0xa4, 0xcd, 0x61, 0xaf, 0xf4, 0xda, 0xc4, 0x9d, 0x9e, 0x65,
	0x89, 0x4e, 0xbe, 0x88, 0x5c, 0x43, 0x27, 0xc2, 0xef, 0x71, 0x22, 0xd1, 0x77, 0xf3, 0x62, 0x77,
	0xf6, 0x14, 0xbb, 0x9f, 0x56, 0xaf, 0x63, 0xc2, 0x7c, 0x02, 0xad, 0xfc, 0x40, 0xa4, 0x0d, 0xf5,
	0x1f, 0x70, 0x95, 0xac, 0x44, 0x5d, 0x92, 0x0e, 0xbc, 0xf5, 0x93, 0x17, 0x2c, 0xd3, 0x45, 0xe8,
	0x9b, 0x27, 0xb5, 0x4f, 0x0c, 0xeb, 0x0f, 0x03, 0x1e, 0x3a, 0xc8, 0x7c, 0x8c, 0xae, 0xd2, 0x41,
	0xff, 0x8b, 0xf5, 0x7e, 0x06, 0xa7, 0x94, 0x05, 0x94, 0xa1, 0xbb, 0x63, 0xcb, 0x27, 0x3a, 0xe5,
	0xd9, 0x96, 0x5d, 0x3f, 0x85, 0x77, 0x4b, 0x54, 0xc9, 0xbe, 0x2f, 0xe0, 0x9e, 0xde, 0x52, 0xe8,
	0x4f, 0xf3, 0x70, 0xad, 0x38, 0x3a, 0xf2, 0xa7, 0x0a, 0xc0, 0x7a, 0x09, 0x6d, 0x2d, 0x30, 0xf2,
	0xa7, 0xb9, 0x81, 0x0a, 0x35, 0x87, 0xa1, 0x4e, 0xaf, 0x1c, 0xc8, 0x1a, 0xc2, 0x71, 0x4e, 0x2f,
	0x41, 0x39, 0x03, 0x08, 0xbd, 0x59, 0x6a, 0x18, 0x86, 0x36, 0x0c, 0x15, 0x89, 0x0d, 0xc3, 0x1a,
	0x41, 0xfb, 0x3a, 0x0c, 0xa8, 0x7c, 0x4d, 0xa7, 0x19, 0xc3, 0x29, 0x34, 0x24, 0x9d, 0x6e, 0x40,
	0xdc, 0x55, 0x81, 0xbd, 0x29, 0x72, 0x8a, 0x7b, 0x51, 0x0c, 0x7f, 0x03, 0xb8, 0xa7, 0x4c, 0x67,
	0x6d, 0x06, 0x64, 0x0e, 0xc7, 0x25, 0x0f, 0x26, 0x1f, 0x16, 0x5e, 0x9b, 0xdb, 0xbe, 0x29, 0x66,
	0xbf, 0x3a, 0x51, 0x93, 0x59, 0x07, 0xe4, 0x3b, 0xe8, 0x94, 0x8e, 0xbf, 0x72, 0x5e, 0xed, 0xdf,
	0xec, 0x2c, 0x75, 0xbd, 0xdc, 0x77, 0xd6, 0x7e, 0x95, 0x7e, 0x67, 0xad, 0x03, 0x72, 0x03, 0x47,
	0x1b, 0xc6, 0x4a, 0x1e, 0x17, 0xa4, 0xb7, 0xd9, 0xbf, 0x79, 0xb1, 0x3b, 0x29, 0xe3, 0x7f, 0x03,
	0xed, 0x8d, 0x23, 0xc5, 0xbe, 0x57, 0x83, 0x4a, 0xee, 0x37, 0x40, 0xca, 0x36, 0x4d, 0x8a, 0xcf,
	0xf6, 0x56, 0x27, 0x37, 0x1f, 0x96, 0x3e, 0x07, 0x57, 0xea, 0xd7, 0xc1, 0x3a, 0x20, 0x63, 0x78,
	0x50, 0x2e, 0x53, 0xe0, 0xfb, 0x8b, 0x57, 0xd2, 0x5f, 0x03, 0xac, 0x6d, 0x95, 0xf4, 0x76, 0x38,
	0xae, 0x16, 0x7c, 0x54, 0xe9, 0xc9, 0xd6, 0x01, 0x71, 0xe0, 0x68, 0x1d, 0x57, 0xc0, 0xd5, 0xba,
	0x95, 0xa0, 0x63, 0x78, 0xa7, 0x60, 0x24, 0xe4, 0xfd, 0x82, 0xea, 0x76, 0xfb, 0x33, 0x3f, 0xa8,
	0x4a, 0xcb, 0xb8, 0x6f, 0x80, 0x14, 0x0e, 0x15, 0xfc, 0x9e, 0x6d, 0x2a, 0x27, 0x18, 0x41, 0x23,
	0x73, 0x1e, 0x72, 0xbe, 0x55, 0x74, 0xed, 0x71, 0x66, 0xef, 0xf6, 0x84, 0x8c, 0x77, 0x04, 0xad,
	0x2c, 0xac, 0x48, 0x2b, 0x45, 0xf7, 0x61, 0xcc, 0x7c, 0xa9, 0x24, 0x57, 0xf4, 0xc0, 0x12, 0x63,
	0xc9, 0xd2, 0x34, 0x63, 0x16, 0xde, 0xc6, 0x58, 0x12, 0xad, 0x62, 0xbc, 0x24, 0xdf, 0xb6, 0xf3,
	0xff, 0xd3, 0x4a, 0x65, 0xfc, 0x76, 0xfc, 0xf2, 0x7c, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0c, 0x36, 0x2b, 0xbd, 0xe8, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileProcessingClient is the client API for FileProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileProcessingClient interface {
	// Upload a generic file for further processing later.
	UploadGenericFile(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*UploadGenericFileResponse, error)
	UploadGenericFileLRO(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Group any number of previously-uploaded files together into a
	// single fileset. Files may have membership in multiple filesets.
	CreateFileset(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*CreateFilesetResponse, error)
	CreateFilesetLRO(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Begin processing the fileset in the specified way.
	// This is a temporary hack (therefore this will be here forever ;-)
	InitiateProcessing(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	InitiateProcessingLRO(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Parses an email *.eml file stored as a generic file. Stores all
	// attachments as new generic files and returns the email headers, body,
	// and list of attachments.
	ParseEmail(ctx context.Context, in *ParseEmailRequest, opts ...grpc.CallOption) (*ParseEmailResponse, error)
	ParseEmailLRO(ctx context.Context, in *ParseEmailRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Given an email *.eml file stored as a generic file, this renders the
	// email body as a pdf and stores the pdf as a new generic file.
	RenderEmailBody(ctx context.Context, in *RenderEmailBodyRequest, opts ...grpc.CallOption) (*RenderEmailBodyResponse, error)
	RenderEmailBodyLRO(ctx context.Context, in *RenderEmailBodyRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Given a pdf file stored as a generic file, this renders the individual
	// pages of the pdf as png files and stores them as new generic files. It
	// will render them at 300 DPI.
	RenderPdf(ctx context.Context, in *RenderPdfRequest, opts ...grpc.CallOption) (*RenderPdfResponse, error)
	RenderPdfLRO(ctx context.Context, in *RenderPdfRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Given a tiff file stored as a generic file, this splits the pages into
	// individual png files and stores them as new generic files.
	SplitTiff(ctx context.Context, in *SplitTiffRequest, opts ...grpc.CallOption) (*SplitTiffResponse, error)
	SplitTiffLRO(ctx context.Context, in *SplitTiffRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type fileProcessingClient struct {
	cc *grpc.ClientConn
}

func NewFileProcessingClient(cc *grpc.ClientConn) FileProcessingClient {
	return &fileProcessingClient{cc}
}

func (c *fileProcessingClient) UploadGenericFile(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*UploadGenericFileResponse, error) {
	out := new(UploadGenericFileResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/UploadGenericFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) UploadGenericFileLRO(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/UploadGenericFileLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) CreateFileset(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*CreateFilesetResponse, error) {
	out := new(CreateFilesetResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/CreateFileset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) CreateFilesetLRO(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/CreateFilesetLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) InitiateProcessing(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/InitiateProcessing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) InitiateProcessingLRO(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/InitiateProcessingLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) ParseEmail(ctx context.Context, in *ParseEmailRequest, opts ...grpc.CallOption) (*ParseEmailResponse, error) {
	out := new(ParseEmailResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/ParseEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) ParseEmailLRO(ctx context.Context, in *ParseEmailRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/ParseEmailLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) RenderEmailBody(ctx context.Context, in *RenderEmailBodyRequest, opts ...grpc.CallOption) (*RenderEmailBodyResponse, error) {
	out := new(RenderEmailBodyResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/RenderEmailBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) RenderEmailBodyLRO(ctx context.Context, in *RenderEmailBodyRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/RenderEmailBodyLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) RenderPdf(ctx context.Context, in *RenderPdfRequest, opts ...grpc.CallOption) (*RenderPdfResponse, error) {
	out := new(RenderPdfResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/RenderPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) RenderPdfLRO(ctx context.Context, in *RenderPdfRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/RenderPdfLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) SplitTiff(ctx context.Context, in *SplitTiffRequest, opts ...grpc.CallOption) (*SplitTiffResponse, error) {
	out := new(SplitTiffResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/SplitTiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) SplitTiffLRO(ctx context.Context, in *SplitTiffRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/SplitTiffLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProcessingServer is the server API for FileProcessing service.
type FileProcessingServer interface {
	// Upload a generic file for further processing later.
	UploadGenericFile(context.Context, *UploadGenericFileRequest) (*UploadGenericFileResponse, error)
	UploadGenericFileLRO(context.Context, *UploadGenericFileRequest) (*longrunning.Operation, error)
	// Group any number of previously-uploaded files together into a
	// single fileset. Files may have membership in multiple filesets.
	CreateFileset(context.Context, *CreateFilesetRequest) (*CreateFilesetResponse, error)
	CreateFilesetLRO(context.Context, *CreateFilesetRequest) (*longrunning.Operation, error)
	// Begin processing the fileset in the specified way.
	// This is a temporary hack (therefore this will be here forever ;-)
	InitiateProcessing(context.Context, *InitiateProcessingRequest) (*empty.Empty, error)
	InitiateProcessingLRO(context.Context, *InitiateProcessingRequest) (*longrunning.Operation, error)
	// Parses an email *.eml file stored as a generic file. Stores all
	// attachments as new generic files and returns the email headers, body,
	// and list of attachments.
	ParseEmail(context.Context, *ParseEmailRequest) (*ParseEmailResponse, error)
	ParseEmailLRO(context.Context, *ParseEmailRequest) (*longrunning.Operation, error)
	// Given an email *.eml file stored as a generic file, this renders the
	// email body as a pdf and stores the pdf as a new generic file.
	RenderEmailBody(context.Context, *RenderEmailBodyRequest) (*RenderEmailBodyResponse, error)
	RenderEmailBodyLRO(context.Context, *RenderEmailBodyRequest) (*longrunning.Operation, error)
	// Given a pdf file stored as a generic file, this renders the individual
	// pages of the pdf as png files and stores them as new generic files. It
	// will render them at 300 DPI.
	RenderPdf(context.Context, *RenderPdfRequest) (*RenderPdfResponse, error)
	RenderPdfLRO(context.Context, *RenderPdfRequest) (*longrunning.Operation, error)
	// Given a tiff file stored as a generic file, this splits the pages into
	// individual png files and stores them as new generic files.
	SplitTiff(context.Context, *SplitTiffRequest) (*SplitTiffResponse, error)
	SplitTiffLRO(context.Context, *SplitTiffRequest) (*longrunning.Operation, error)
}

// UnimplementedFileProcessingServer can be embedded to have forward compatible implementations.
type UnimplementedFileProcessingServer struct {
}

func (*UnimplementedFileProcessingServer) UploadGenericFile(ctx context.Context, req *UploadGenericFileRequest) (*UploadGenericFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGenericFile not implemented")
}
func (*UnimplementedFileProcessingServer) UploadGenericFileLRO(ctx context.Context, req *UploadGenericFileRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGenericFileLRO not implemented")
}
func (*UnimplementedFileProcessingServer) CreateFileset(ctx context.Context, req *CreateFilesetRequest) (*CreateFilesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileset not implemented")
}
func (*UnimplementedFileProcessingServer) CreateFilesetLRO(ctx context.Context, req *CreateFilesetRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilesetLRO not implemented")
}
func (*UnimplementedFileProcessingServer) InitiateProcessing(ctx context.Context, req *InitiateProcessingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateProcessing not implemented")
}
func (*UnimplementedFileProcessingServer) InitiateProcessingLRO(ctx context.Context, req *InitiateProcessingRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateProcessingLRO not implemented")
}
func (*UnimplementedFileProcessingServer) ParseEmail(ctx context.Context, req *ParseEmailRequest) (*ParseEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseEmail not implemented")
}
func (*UnimplementedFileProcessingServer) ParseEmailLRO(ctx context.Context, req *ParseEmailRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseEmailLRO not implemented")
}
func (*UnimplementedFileProcessingServer) RenderEmailBody(ctx context.Context, req *RenderEmailBodyRequest) (*RenderEmailBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderEmailBody not implemented")
}
func (*UnimplementedFileProcessingServer) RenderEmailBodyLRO(ctx context.Context, req *RenderEmailBodyRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderEmailBodyLRO not implemented")
}
func (*UnimplementedFileProcessingServer) RenderPdf(ctx context.Context, req *RenderPdfRequest) (*RenderPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderPdf not implemented")
}
func (*UnimplementedFileProcessingServer) RenderPdfLRO(ctx context.Context, req *RenderPdfRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderPdfLRO not implemented")
}
func (*UnimplementedFileProcessingServer) SplitTiff(ctx context.Context, req *SplitTiffRequest) (*SplitTiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTiff not implemented")
}
func (*UnimplementedFileProcessingServer) SplitTiffLRO(ctx context.Context, req *SplitTiffRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTiffLRO not implemented")
}

func RegisterFileProcessingServer(s *grpc.Server, srv FileProcessingServer) {
	s.RegisterService(&_FileProcessing_serviceDesc, srv)
}

func _FileProcessing_UploadGenericFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGenericFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).UploadGenericFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/UploadGenericFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).UploadGenericFile(ctx, req.(*UploadGenericFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_UploadGenericFileLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGenericFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).UploadGenericFileLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/UploadGenericFileLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).UploadGenericFileLRO(ctx, req.(*UploadGenericFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_CreateFileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).CreateFileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/CreateFileset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).CreateFileset(ctx, req.(*CreateFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_CreateFilesetLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).CreateFilesetLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/CreateFilesetLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).CreateFilesetLRO(ctx, req.(*CreateFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_InitiateProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).InitiateProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/InitiateProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).InitiateProcessing(ctx, req.(*InitiateProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_InitiateProcessingLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).InitiateProcessingLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/InitiateProcessingLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).InitiateProcessingLRO(ctx, req.(*InitiateProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_ParseEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).ParseEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/ParseEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).ParseEmail(ctx, req.(*ParseEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_ParseEmailLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).ParseEmailLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/ParseEmailLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).ParseEmailLRO(ctx, req.(*ParseEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_RenderEmailBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderEmailBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).RenderEmailBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/RenderEmailBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).RenderEmailBody(ctx, req.(*RenderEmailBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_RenderEmailBodyLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderEmailBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).RenderEmailBodyLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/RenderEmailBodyLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).RenderEmailBodyLRO(ctx, req.(*RenderEmailBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_RenderPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).RenderPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/RenderPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).RenderPdf(ctx, req.(*RenderPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_RenderPdfLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).RenderPdfLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/RenderPdfLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).RenderPdfLRO(ctx, req.(*RenderPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_SplitTiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).SplitTiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/SplitTiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).SplitTiff(ctx, req.(*SplitTiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_SplitTiffLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).SplitTiffLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/SplitTiffLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).SplitTiffLRO(ctx, req.(*SplitTiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileProcessing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsys.api.file.FileProcessing",
	HandlerType: (*FileProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadGenericFile",
			Handler:    _FileProcessing_UploadGenericFile_Handler,
		},
		{
			MethodName: "UploadGenericFileLRO",
			Handler:    _FileProcessing_UploadGenericFileLRO_Handler,
		},
		{
			MethodName: "CreateFileset",
			Handler:    _FileProcessing_CreateFileset_Handler,
		},
		{
			MethodName: "CreateFilesetLRO",
			Handler:    _FileProcessing_CreateFilesetLRO_Handler,
		},
		{
			MethodName: "InitiateProcessing",
			Handler:    _FileProcessing_InitiateProcessing_Handler,
		},
		{
			MethodName: "InitiateProcessingLRO",
			Handler:    _FileProcessing_InitiateProcessingLRO_Handler,
		},
		{
			MethodName: "ParseEmail",
			Handler:    _FileProcessing_ParseEmail_Handler,
		},
		{
			MethodName: "ParseEmailLRO",
			Handler:    _FileProcessing_ParseEmailLRO_Handler,
		},
		{
			MethodName: "RenderEmailBody",
			Handler:    _FileProcessing_RenderEmailBody_Handler,
		},
		{
			MethodName: "RenderEmailBodyLRO",
			Handler:    _FileProcessing_RenderEmailBodyLRO_Handler,
		},
		{
			MethodName: "RenderPdf",
			Handler:    _FileProcessing_RenderPdf_Handler,
		},
		{
			MethodName: "RenderPdfLRO",
			Handler:    _FileProcessing_RenderPdfLRO_Handler,
		},
		{
			MethodName: "SplitTiff",
			Handler:    _FileProcessing_SplitTiff_Handler,
		},
		{
			MethodName: "SplitTiffLRO",
			Handler:    _FileProcessing_SplitTiffLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
