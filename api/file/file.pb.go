// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file.proto

package file

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	ntypes "nsys.io/api/ntypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadGenericFileRequest struct {
	// The file's identifier which must be unique within the
	// account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
	// Automatically generated if not supplied in upload request.
	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GenericFile *ntypes.GenericFile `protobuf:"bytes,2,opt,name=generic_file,json=genericFile,proto3" json:"generic_file,omitempty"`
	// Requested file expiration time. The time is capped to comply with
	// account-specific minimums and maximums. A zero value requests the
	// maximum allowable expiration time be used.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadGenericFileRequest) Reset()         { *m = UploadGenericFileRequest{} }
func (m *UploadGenericFileRequest) String() string { return proto.CompactTextString(m) }
func (*UploadGenericFileRequest) ProtoMessage()    {}
func (*UploadGenericFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{0}
}

func (m *UploadGenericFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadGenericFileRequest.Unmarshal(m, b)
}
func (m *UploadGenericFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadGenericFileRequest.Marshal(b, m, deterministic)
}
func (m *UploadGenericFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadGenericFileRequest.Merge(m, src)
}
func (m *UploadGenericFileRequest) XXX_Size() int {
	return xxx_messageInfo_UploadGenericFileRequest.Size(m)
}
func (m *UploadGenericFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadGenericFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadGenericFileRequest proto.InternalMessageInfo

func (m *UploadGenericFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadGenericFileRequest) GetGenericFile() *ntypes.GenericFile {
	if m != nil {
		return m.GenericFile
	}
	return nil
}

func (m *UploadGenericFileRequest) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type UploadGenericFileResponse struct {
	// Identifier for the uploaded file.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// The actual expiration time for the file.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadGenericFileResponse) Reset()         { *m = UploadGenericFileResponse{} }
func (m *UploadGenericFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadGenericFileResponse) ProtoMessage()    {}
func (*UploadGenericFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{1}
}

func (m *UploadGenericFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadGenericFileResponse.Unmarshal(m, b)
}
func (m *UploadGenericFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadGenericFileResponse.Marshal(b, m, deterministic)
}
func (m *UploadGenericFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadGenericFileResponse.Merge(m, src)
}
func (m *UploadGenericFileResponse) XXX_Size() int {
	return xxx_messageInfo_UploadGenericFileResponse.Size(m)
}
func (m *UploadGenericFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadGenericFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadGenericFileResponse proto.InternalMessageInfo

func (m *UploadGenericFileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadGenericFileResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type CreateFilesetRequest struct {
	// The fileset's identifier which must be unique within the
	// account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
	// Automatically generated if not supplied.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One or more files that are to become members of the fileset.
	FileNames []string `protobuf:"bytes,2,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	// Requested fileset expiration time. The time is capped so that it
	// is no later than the latest expiration time of any file in the set.
	// A zero value requests the maximum allowable expiration time be used.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateFilesetRequest) Reset()         { *m = CreateFilesetRequest{} }
func (m *CreateFilesetRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFilesetRequest) ProtoMessage()    {}
func (*CreateFilesetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{2}
}

func (m *CreateFilesetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFilesetRequest.Unmarshal(m, b)
}
func (m *CreateFilesetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFilesetRequest.Marshal(b, m, deterministic)
}
func (m *CreateFilesetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFilesetRequest.Merge(m, src)
}
func (m *CreateFilesetRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFilesetRequest.Size(m)
}
func (m *CreateFilesetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFilesetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFilesetRequest proto.InternalMessageInfo

func (m *CreateFilesetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateFilesetRequest) GetFileNames() []string {
	if m != nil {
		return m.FileNames
	}
	return nil
}

func (m *CreateFilesetRequest) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type CreateFilesetResponse struct {
	// Identifier for the fileset.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// The actual expiration time for the fileset.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateFilesetResponse) Reset()         { *m = CreateFilesetResponse{} }
func (m *CreateFilesetResponse) String() string { return proto.CompactTextString(m) }
func (*CreateFilesetResponse) ProtoMessage()    {}
func (*CreateFilesetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{3}
}

func (m *CreateFilesetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFilesetResponse.Unmarshal(m, b)
}
func (m *CreateFilesetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFilesetResponse.Marshal(b, m, deterministic)
}
func (m *CreateFilesetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFilesetResponse.Merge(m, src)
}
func (m *CreateFilesetResponse) XXX_Size() int {
	return xxx_messageInfo_CreateFilesetResponse.Size(m)
}
func (m *CreateFilesetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFilesetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFilesetResponse proto.InternalMessageInfo

func (m *CreateFilesetResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateFilesetResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type InitiateProcessingRequest struct {
	// Identifier of the object to process.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Application-specific type of processing to perform.
	ProcessCode          string   `protobuf:"bytes,2,opt,name=process_code,json=processCode,proto3" json:"process_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitiateProcessingRequest) Reset()         { *m = InitiateProcessingRequest{} }
func (m *InitiateProcessingRequest) String() string { return proto.CompactTextString(m) }
func (*InitiateProcessingRequest) ProtoMessage()    {}
func (*InitiateProcessingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{4}
}

func (m *InitiateProcessingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateProcessingRequest.Unmarshal(m, b)
}
func (m *InitiateProcessingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateProcessingRequest.Marshal(b, m, deterministic)
}
func (m *InitiateProcessingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateProcessingRequest.Merge(m, src)
}
func (m *InitiateProcessingRequest) XXX_Size() int {
	return xxx_messageInfo_InitiateProcessingRequest.Size(m)
}
func (m *InitiateProcessingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateProcessingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateProcessingRequest proto.InternalMessageInfo

func (m *InitiateProcessingRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitiateProcessingRequest) GetProcessCode() string {
	if m != nil {
		return m.ProcessCode
	}
	return ""
}

type ProcessEmailRequest struct {
	// the generic file name of an email's eml file
	EmlName string `protobuf:"bytes,1,opt,name=eml_name,json=emlName,proto3" json:"eml_name,omitempty"`
	// the source id that the results will be linked to
	SourceName           string   `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessEmailRequest) Reset()         { *m = ProcessEmailRequest{} }
func (m *ProcessEmailRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessEmailRequest) ProtoMessage()    {}
func (*ProcessEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{5}
}

func (m *ProcessEmailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessEmailRequest.Unmarshal(m, b)
}
func (m *ProcessEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessEmailRequest.Marshal(b, m, deterministic)
}
func (m *ProcessEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessEmailRequest.Merge(m, src)
}
func (m *ProcessEmailRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessEmailRequest.Size(m)
}
func (m *ProcessEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessEmailRequest proto.InternalMessageInfo

func (m *ProcessEmailRequest) GetEmlName() string {
	if m != nil {
		return m.EmlName
	}
	return ""
}

func (m *ProcessEmailRequest) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

type ProcessEmailResponse struct {
	// The generic file name that the rendered email is saved to
	RenderedHtmlName string `protobuf:"bytes,1,opt,name=rendered_html_name,json=renderedHtmlName,proto3" json:"rendered_html_name,omitempty"`
	// The generic file names of any other attachments in the email
	AttachmentNames []string `protobuf:"bytes,2,rep,name=attachment_names,json=attachmentNames,proto3" json:"attachment_names,omitempty"`
	// attachments to the email that we ignored
	IgnoredAttachments   []string `protobuf:"bytes,3,rep,name=ignored_attachments,json=ignoredAttachments,proto3" json:"ignored_attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessEmailResponse) Reset()         { *m = ProcessEmailResponse{} }
func (m *ProcessEmailResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessEmailResponse) ProtoMessage()    {}
func (*ProcessEmailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9188e3b7e55e1162, []int{6}
}

func (m *ProcessEmailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessEmailResponse.Unmarshal(m, b)
}
func (m *ProcessEmailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessEmailResponse.Marshal(b, m, deterministic)
}
func (m *ProcessEmailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessEmailResponse.Merge(m, src)
}
func (m *ProcessEmailResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessEmailResponse.Size(m)
}
func (m *ProcessEmailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessEmailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessEmailResponse proto.InternalMessageInfo

func (m *ProcessEmailResponse) GetRenderedHtmlName() string {
	if m != nil {
		return m.RenderedHtmlName
	}
	return ""
}

func (m *ProcessEmailResponse) GetAttachmentNames() []string {
	if m != nil {
		return m.AttachmentNames
	}
	return nil
}

func (m *ProcessEmailResponse) GetIgnoredAttachments() []string {
	if m != nil {
		return m.IgnoredAttachments
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadGenericFileRequest)(nil), "nsys.api.file.UploadGenericFileRequest")
	proto.RegisterType((*UploadGenericFileResponse)(nil), "nsys.api.file.UploadGenericFileResponse")
	proto.RegisterType((*CreateFilesetRequest)(nil), "nsys.api.file.CreateFilesetRequest")
	proto.RegisterType((*CreateFilesetResponse)(nil), "nsys.api.file.CreateFilesetResponse")
	proto.RegisterType((*InitiateProcessingRequest)(nil), "nsys.api.file.InitiateProcessingRequest")
	proto.RegisterType((*ProcessEmailRequest)(nil), "nsys.api.file.ProcessEmailRequest")
	proto.RegisterType((*ProcessEmailResponse)(nil), "nsys.api.file.ProcessEmailResponse")
}

func init() { proto.RegisterFile("file.proto", fileDescriptor_9188e3b7e55e1162) }

var fileDescriptor_9188e3b7e55e1162 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x5d, 0x36, 0x34, 0xe8, 0xed, 0xc6, 0x8a, 0xb7, 0xa1, 0x2c, 0x30, 0xad, 0xa4, 0x93, 0x28,
	0x12, 0x4a, 0xa4, 0xf1, 0x93, 0x1f, 0x08, 0xa6, 0xf1, 0x21, 0x21, 0x06, 0x11, 0xa0, 0x81, 0x90,
	0x42, 0xda, 0xde, 0xa5, 0x96, 0x12, 0x3b, 0xc4, 0xae, 0x44, 0x1f, 0x00, 0x9e, 0x83, 0x07, 0xe0,
	0x21, 0x91, 0xe3, 0xa4, 0x4d, 0xd2, 0xae, 0x2d, 0x42, 0xfc, 0x8b, 0xef, 0x3d, 0x3e, 0xf7, 0x9c,
	0x6b, 0x5f, 0x07, 0xe0, 0x92, 0x46, 0xe8, 0x24, 0x29, 0x97, 0x9c, 0x6c, 0x33, 0x31, 0x16, 0x4e,
	0x90, 0x50, 0x47, 0x05, 0xad, 0x4e, 0xc8, 0x79, 0x18, 0xa1, 0x1b, 0x71, 0x16, 0xa6, 0x23, 0xc6,
	0x28, 0x0b, 0x5d, 0x9e, 0x60, 0x1a, 0x48, 0xca, 0x99, 0xd0, 0x7b, 0xac, 0xa3, 0x1c, 0x94, 0xad,
	0x7a, 0xa3, 0x4b, 0x57, 0xd2, 0x18, 0x85, 0x0c, 0xe2, 0x24, 0x07, 0xdc, 0xa9, 0x03, 0x30, 0x4e,
	0xe4, 0x38, 0x4f, 0x1e, 0x67, 0x15, 0x29, 0x77, 0x83, 0x84, 0xba, 0x4c, 0x8e, 0x13, 0x14, 0xae,
	0xaa, 0xed, 0xeb, 0x6f, 0x8d, 0xb2, 0x7f, 0x1b, 0x60, 0x7e, 0x48, 0x22, 0x1e, 0x0c, 0x5e, 0x20,
	0xc3, 0x94, 0xf6, 0x9f, 0xd3, 0x08, 0x3d, 0xfc, 0x36, 0x42, 0x21, 0x09, 0x81, 0x6b, 0x2c, 0x88,
	0xd1, 0x34, 0xda, 0x46, 0xb7, 0xe1, 0x65, 0xdf, 0xe4, 0x09, 0x6c, 0x85, 0x1a, 0xe9, 0x2b, 0x36,
	0x73, 0xbd, 0x6d, 0x74, 0x9b, 0x27, 0x77, 0x9d, 0x89, 0xbf, 0x9c, 0xbe, 0x4c, 0xd7, 0x0c, 0xa7,
	0x0b, 0xf2, 0x18, 0x9a, 0xf8, 0x3d, 0xa1, 0x29, 0xfa, 0xca, 0x8e, 0xb9, 0x91, 0xed, 0xb7, 0x1c,
	0x6d, 0xc5, 0x29, 0xac, 0x38, 0xef, 0x0b, 0xaf, 0x1e, 0x68, 0xb8, 0x0a, 0xd8, 0x11, 0x1c, 0xcc,
	0x51, 0x2b, 0x12, 0xce, 0x04, 0x2a, 0xb9, 0x6f, 0x4a, 0x72, 0xd5, 0x77, 0xbd, 0xda, 0xfa, 0x5f,
	0x55, 0xfb, 0x69, 0xc0, 0xde, 0x69, 0x8a, 0x81, 0x44, 0x55, 0x47, 0xa0, 0x5c, 0xd4, 0x98, 0x43,
	0x7d, 0xde, 0xbe, 0x5a, 0x08, 0x73, 0xbd, 0xbd, 0xd1, 0x6d, 0x78, 0x0d, 0x15, 0x51, 0x3a, 0xc4,
	0xbf, 0xd9, 0x1e, 0xc2, 0x7e, 0x4d, 0xc7, 0xff, 0xb2, 0xec, 0xc1, 0xc1, 0x2b, 0x46, 0x25, 0x0d,
	0x24, 0xbe, 0x4d, 0x79, 0x1f, 0x85, 0xa0, 0x2c, 0x5c, 0x64, 0xfb, 0x1e, 0x6c, 0x25, 0x1a, 0xe8,
	0xf7, 0xf9, 0x40, 0x97, 0x6b, 0x78, 0xcd, 0x3c, 0x76, 0xca, 0x07, 0x68, 0xbf, 0x83, 0xdd, 0x9c,
	0xeb, 0x2c, 0x0e, 0x68, 0x54, 0xb0, 0x1d, 0xc0, 0x0d, 0x8c, 0x23, 0xbf, 0xc4, 0x78, 0x1d, 0xe3,
	0x28, 0xb3, 0x70, 0x04, 0x4d, 0xc1, 0x47, 0x69, 0x5f, 0x77, 0x33, 0xe7, 0x04, 0x1d, 0x52, 0x00,
	0xfb, 0x97, 0x01, 0x7b, 0x55, 0xce, 0xbc, 0x21, 0x0f, 0x81, 0xa4, 0xc8, 0x06, 0x98, 0xe2, 0xc0,
	0x1f, 0xca, 0x2a, 0x7d, 0xab, 0xc8, 0xbc, 0x94, 0x79, 0x9d, 0x07, 0xd0, 0x0a, 0xa4, 0x0c, 0xfa,
	0xc3, 0x18, 0x99, 0xac, 0x9c, 0xdc, 0xce, 0x34, 0xae, 0xcf, 0xcf, 0x85, 0x5d, 0x1a, 0x32, 0xae,
	0x78, 0xa7, 0x29, 0x61, 0x6e, 0x64, 0x68, 0x92, 0xa7, 0x9e, 0x4e, 0x33, 0x27, 0x3f, 0x36, 0xe1,
	0xa6, 0x3a, 0xae, 0x69, 0x1b, 0xc9, 0x10, 0x6e, 0xcd, 0xdc, 0x5e, 0x72, 0xdf, 0xa9, 0x3c, 0x0d,
	0xce, 0x55, 0xd3, 0x68, 0x75, 0x97, 0x03, 0x75, 0x13, 0xec, 0x35, 0xf2, 0x15, 0xf6, 0x66, 0xd2,
	0xaf, 0xbd, 0xf3, 0xd5, 0x8b, 0x1d, 0x16, 0xf7, 0xa5, 0xf4, 0x42, 0x39, 0xe7, 0xc5, 0x0b, 0x65,
	0xaf, 0x91, 0x2f, 0xb0, 0x5d, 0xb9, 0x92, 0xa4, 0x53, 0xa3, 0x9e, 0x37, 0x38, 0xd6, 0xf1, 0x62,
	0xd0, 0x44, 0xff, 0x05, 0xb4, 0x2a, 0x29, 0xa5, 0x7d, 0xa5, 0x02, 0x4b, 0x75, 0x5f, 0x00, 0x99,
	0xbd, 0xe0, 0xa4, 0xde, 0xdb, 0x2b, 0x67, 0xc0, 0xba, 0x3d, 0x33, 0x48, 0x67, 0xea, 0xd1, 0xb5,
	0xd7, 0x48, 0x0f, 0xf6, 0x67, 0xb7, 0x29, 0xe1, 0xab, 0x93, 0x2f, 0x55, 0xff, 0x09, 0xb6, 0xca,
	0xd7, 0x9e, 0xd8, 0x35, 0xea, 0x39, 0x73, 0x66, 0x75, 0x16, 0x62, 0x26, 0x2d, 0xff, 0x08, 0x3b,
	0xe5, 0x8c, 0x12, 0xbe, 0x0a, 0xfb, 0x32, 0xc9, 0xcf, 0xc8, 0xe7, 0x56, 0xf9, 0x4f, 0xa4, 0x88,
	0x7a, 0x9b, 0x59, 0xf3, 0x1e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xe9, 0x0d, 0xf0, 0x22,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileProcessingClient is the client API for FileProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileProcessingClient interface {
	// Upload a generic file for further processing later.
	UploadGenericFile(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*UploadGenericFileResponse, error)
	UploadGenericFileLRO(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Group any number of previously-uploaded files together into a
	// single fileset. Files may have membership in multiple filesets.
	CreateFileset(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*CreateFilesetResponse, error)
	CreateFilesetLRO(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Begin processing the fileset in the specified way.
	// This is a temporary hack (therefore this will be here forever ;-)
	InitiateProcessing(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	InitiateProcessingLRO(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Parses an email *.eml file stored as a generic file. The rendered html
	// and other attachments are stored as new generic files tied to the source.
	ProcessEmail(ctx context.Context, in *ProcessEmailRequest, opts ...grpc.CallOption) (*ProcessEmailResponse, error)
	ProcessEmailLRO(ctx context.Context, in *ProcessEmailRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type fileProcessingClient struct {
	cc *grpc.ClientConn
}

func NewFileProcessingClient(cc *grpc.ClientConn) FileProcessingClient {
	return &fileProcessingClient{cc}
}

func (c *fileProcessingClient) UploadGenericFile(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*UploadGenericFileResponse, error) {
	out := new(UploadGenericFileResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/UploadGenericFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) UploadGenericFileLRO(ctx context.Context, in *UploadGenericFileRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/UploadGenericFileLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) CreateFileset(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*CreateFilesetResponse, error) {
	out := new(CreateFilesetResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/CreateFileset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) CreateFilesetLRO(ctx context.Context, in *CreateFilesetRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/CreateFilesetLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) InitiateProcessing(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/InitiateProcessing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) InitiateProcessingLRO(ctx context.Context, in *InitiateProcessingRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/InitiateProcessingLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) ProcessEmail(ctx context.Context, in *ProcessEmailRequest, opts ...grpc.CallOption) (*ProcessEmailResponse, error) {
	out := new(ProcessEmailResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/ProcessEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingClient) ProcessEmailLRO(ctx context.Context, in *ProcessEmailRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.file.FileProcessing/ProcessEmailLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProcessingServer is the server API for FileProcessing service.
type FileProcessingServer interface {
	// Upload a generic file for further processing later.
	UploadGenericFile(context.Context, *UploadGenericFileRequest) (*UploadGenericFileResponse, error)
	UploadGenericFileLRO(context.Context, *UploadGenericFileRequest) (*longrunning.Operation, error)
	// Group any number of previously-uploaded files together into a
	// single fileset. Files may have membership in multiple filesets.
	CreateFileset(context.Context, *CreateFilesetRequest) (*CreateFilesetResponse, error)
	CreateFilesetLRO(context.Context, *CreateFilesetRequest) (*longrunning.Operation, error)
	// Begin processing the fileset in the specified way.
	// This is a temporary hack (therefore this will be here forever ;-)
	InitiateProcessing(context.Context, *InitiateProcessingRequest) (*empty.Empty, error)
	InitiateProcessingLRO(context.Context, *InitiateProcessingRequest) (*longrunning.Operation, error)
	// Parses an email *.eml file stored as a generic file. The rendered html
	// and other attachments are stored as new generic files tied to the source.
	ProcessEmail(context.Context, *ProcessEmailRequest) (*ProcessEmailResponse, error)
	ProcessEmailLRO(context.Context, *ProcessEmailRequest) (*longrunning.Operation, error)
}

// UnimplementedFileProcessingServer can be embedded to have forward compatible implementations.
type UnimplementedFileProcessingServer struct {
}

func (*UnimplementedFileProcessingServer) UploadGenericFile(ctx context.Context, req *UploadGenericFileRequest) (*UploadGenericFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGenericFile not implemented")
}
func (*UnimplementedFileProcessingServer) UploadGenericFileLRO(ctx context.Context, req *UploadGenericFileRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGenericFileLRO not implemented")
}
func (*UnimplementedFileProcessingServer) CreateFileset(ctx context.Context, req *CreateFilesetRequest) (*CreateFilesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileset not implemented")
}
func (*UnimplementedFileProcessingServer) CreateFilesetLRO(ctx context.Context, req *CreateFilesetRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilesetLRO not implemented")
}
func (*UnimplementedFileProcessingServer) InitiateProcessing(ctx context.Context, req *InitiateProcessingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateProcessing not implemented")
}
func (*UnimplementedFileProcessingServer) InitiateProcessingLRO(ctx context.Context, req *InitiateProcessingRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateProcessingLRO not implemented")
}
func (*UnimplementedFileProcessingServer) ProcessEmail(ctx context.Context, req *ProcessEmailRequest) (*ProcessEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEmail not implemented")
}
func (*UnimplementedFileProcessingServer) ProcessEmailLRO(ctx context.Context, req *ProcessEmailRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEmailLRO not implemented")
}

func RegisterFileProcessingServer(s *grpc.Server, srv FileProcessingServer) {
	s.RegisterService(&_FileProcessing_serviceDesc, srv)
}

func _FileProcessing_UploadGenericFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGenericFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).UploadGenericFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/UploadGenericFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).UploadGenericFile(ctx, req.(*UploadGenericFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_UploadGenericFileLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGenericFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).UploadGenericFileLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/UploadGenericFileLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).UploadGenericFileLRO(ctx, req.(*UploadGenericFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_CreateFileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).CreateFileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/CreateFileset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).CreateFileset(ctx, req.(*CreateFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_CreateFilesetLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).CreateFilesetLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/CreateFilesetLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).CreateFilesetLRO(ctx, req.(*CreateFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_InitiateProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).InitiateProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/InitiateProcessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).InitiateProcessing(ctx, req.(*InitiateProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_InitiateProcessingLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).InitiateProcessingLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/InitiateProcessingLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).InitiateProcessingLRO(ctx, req.(*InitiateProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_ProcessEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).ProcessEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/ProcessEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).ProcessEmail(ctx, req.(*ProcessEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessing_ProcessEmailLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServer).ProcessEmailLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.file.FileProcessing/ProcessEmailLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServer).ProcessEmailLRO(ctx, req.(*ProcessEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileProcessing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsys.api.file.FileProcessing",
	HandlerType: (*FileProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadGenericFile",
			Handler:    _FileProcessing_UploadGenericFile_Handler,
		},
		{
			MethodName: "UploadGenericFileLRO",
			Handler:    _FileProcessing_UploadGenericFileLRO_Handler,
		},
		{
			MethodName: "CreateFileset",
			Handler:    _FileProcessing_CreateFileset_Handler,
		},
		{
			MethodName: "CreateFilesetLRO",
			Handler:    _FileProcessing_CreateFilesetLRO_Handler,
		},
		{
			MethodName: "InitiateProcessing",
			Handler:    _FileProcessing_InitiateProcessing_Handler,
		},
		{
			MethodName: "InitiateProcessingLRO",
			Handler:    _FileProcessing_InitiateProcessingLRO_Handler,
		},
		{
			MethodName: "ProcessEmail",
			Handler:    _FileProcessing_ProcessEmail_Handler,
		},
		{
			MethodName: "ProcessEmailLRO",
			Handler:    _FileProcessing_ProcessEmailLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
