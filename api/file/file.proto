syntax = "proto3";
package nsys.api.file;
option go_package = "nsys.io/api/file";

import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "nsys.io/api/ntypes/file_ntypes.proto";
import "nsys.io/api/ntypes/image_ntypes.proto";

service FileProcessing {
	// Upload a generic file for further processing later.
	rpc UploadGenericFile (UploadGenericFileRequest) 
			returns (UploadGenericFileResponse) {}
	rpc UploadGenericFileLRO (UploadGenericFileRequest) 
			returns (google.longrunning.Operation) {}

	// Download a previously uploaded generic file.
	rpc GetGenericFile (GetGenericFileRequest)
			returns (GetGenericFileResponse) {}
	rpc GetGenericFileLRO (GetGenericFileRequest)
			returns (google.longrunning.Operation) {}

	// Group any number of previously-uploaded files together into a 
	// single fileset. Files may have membership in multiple filesets.
	rpc CreateFileset (CreateFilesetRequest)
			returns (CreateFilesetResponse) {}
	rpc CreateFilesetLRO (CreateFilesetRequest)
			returns (google.longrunning.Operation) {}

	// Begin processing a file or fileset in the specified way.
	// This is a temporary hack (therefore this will be here forever ;-)
	// The results of the processing are obtained by polling for them
	// using the ListResults() RPC and fetching via GetResult().
	rpc InitiateProcessing(InitiateProcessingRequest)
			returns (google.protobuf.Empty) {}
	rpc InitiateProcessingLRO (InitiateProcessingRequest)
			returns (google.longrunning.Operation) {}

	// Given a document (.doc, .docx, .txt, .ppt, ect.) convert it to pdf
	rpc DocToPdf(DocToPdfRequest)
			returns(DocToPdfResponse) {}
	rpc DocToPdfLRO(DocToPdfRequest)
			returns(google.longrunning.Operation) {}

	// Parses an email *.eml file stored as a generic file. Stores all
	// attachments as new generic files and returns the email headers, body,
	// and list of attachments.
	rpc ParseEmail(ParseEmailRequest)
			returns (ParseEmailResponse) {}
	rpc ParseEmailLRO(ParseEmailRequest)
			returns (google.longrunning.Operation) {}

	// Given an email *.eml file stored as a generic file, this renders the
	// email body as a pdf and stores the pdf as a new generic file.
	rpc RenderEmailBody(RenderEmailBodyRequest)
			returns (RenderEmailBodyResponse) {}
	rpc RenderEmailBodyLRO(RenderEmailBodyRequest)
			returns (google.longrunning.Operation) {}

	// Using Adobe, given a pdf file stored as a generic file, this renders the
	// individual pages of the pdf as image files and stores them as new generic 
	// files.
	rpc RenderPdf(RenderPdfRequest)
			returns (RenderPdfResponse) {}
	rpc RenderPdfLRO(RenderPdfRequest)
			returns (google.longrunning.Operation) {}

	// Using Ghostscript, given a pdf file stored as a generic file, this 
	// renders the individual pages of the pdf as image files and stores them as
	// new generic files.
	rpc RenderPdfGS(RenderPdfGSRequest)
			returns (RenderPdfGSResponse) {}
	rpc RenderPdfGSLRO(RenderPdfGSRequest)
			returns (google.longrunning.Operation) {}

	// Given a tiff file stored as a generic file, this splits the pages into
	// individual png files and stores them as new generic files.
	rpc SplitTiff(SplitTiffRequest)
			returns (SplitTiffResponse) {}
	rpc SplitTiffLRO(SplitTiffRequest)
			returns (google.longrunning.Operation) {}

	// Returns a list of available processed results (i.e., the final outputs
	// of the client/application-specific operations triggered by InitiateProcessing()
	rpc ListResults(ListResultsRequest)
			returns (ListResultsResponse) {}
	rpc ListResultsLRO(ListResultsRequest)
			returns (google.longrunning.Operation) {}

	// Fetch any available result.
	rpc GetResult(GetResultRequest)
			returns (GetResultResponse) {}	
	rpc GetResultLRO(GetResultRequest)
			returns (google.longrunning.Operation) {}

	// Delete any available result.
	rpc DeleteResult(DeleteResultRequest) 
			returns (google.protobuf.Empty) {}
	rpc DeleteResultLRO(DeleteResultRequest)
			returns (google.longrunning.Operation) {}
}

message ListResultsRequest {
	// Application-specific filter on returned results.
	// If not specified, all result listings are returned.
	string filter = 1;
}

message ListResultsResponse {
	repeated AvailableResult available_results = 1;
}

message AvailableResult {
	// The object's name / ID.
	string name = 1;
	// Application-specific meta information.
	google.protobuf.Any metadata = 2;
}

message GetResultRequest {
	string name = 1;
}

message GetResultResponse {
	// The result's ID.
	string name = 1;

	// The originating submission (the one specified to InitiateProcessing() which then
	// caused this result (and perhaps others) to be generated.
	string originating_name = 2;

	// Application-specific metadata (identical to that returned in results listings).
	google.protobuf.Any metadata = 3;

	// Contents of the returned file are application-specific.
	// The metadata within it does not necessarily have any relation to the metadata above.
	ntypes.GenericFile generic_file = 4;
}

message DeleteResultRequest {
	// The available result to delete.
	string name = 1;
}

message UploadGenericFileRequest {
	// The file's identifier which must be unique within the
        // account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
        // Automatically generated if not supplied in upload request.
        string name = 1;

	ntypes.GenericFile generic_file = 2;	

	// Requested file expiration time. The time is capped to comply with 
	// account-specific minimums and maximums. A zero value requests the 
	// maximum allowable expiration time be used.
	google.protobuf.Timestamp expire_time = 3;
}

message UploadGenericFileResponse {
	// Identifier for the uploaded file.
	string Name = 1;
	// The actual expiration time for the file.
	google.protobuf.Timestamp expire_time = 2;	
}

message GetGenericFileRequest {
        // The generic file's identifier.
        string name = 1;
}

message GetGenericFileResponse {
        // The file's identifier.
        string name = 1;
        // The actual file (SHA sum validated on the server side at read).
        ntypes.GenericFile generic_file = 2;
}

message CreateFilesetRequest {
	// The fileset's identifier which must be unique within the
        // account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
        // Automatically generated if not supplied.
        string name = 1;

	// One or more files that are to become members of the fileset.
	repeated string file_names = 2;

	// Requested fileset expiration time. The time is capped so that it 
	// is no later than the latest expiration time of any file in the set.
	// A zero value requests the maximum allowable expiration time be used.
	google.protobuf.Timestamp expire_time = 3;
}

message CreateFilesetResponse {
	// Identifier for the fileset.
	string Name = 1;
	// The actual expiration time for the fileset.
	google.protobuf.Timestamp expire_time = 2;	
}
	
message InitiateProcessingRequest {
	// Identifier of the object to process.
	// The context for interpretation of this identifier is set by the
	// client and application specific process code.
	string name = 1;
	// Application-specific type of processing to perform.
	string process_code = 2;
}

message DocToPdfRequest {
	// The generic file id of the document to be rendered.
	string name = 1;
}

message DocToPdfResponse{
	// the generic file id of the rendered pdf.
	string pdf_name = 1;
}

message ParseEmailRequest{
	// The name of a generic file contaning an eml file
	string eml_name = 1;

	// The whitelist of email attachment file extensions to save, things like:
	// ".pdf", ".png", ".tif", ".tiff", ".jpg", ".jpeg". If empty, then no
	// attachments will be saved. In any case a list of rejected attachments
	// will be returned.
	repeated string attachment_whitelist = 2;

	// The whitelist of inline email attachment file extensions to save. If empty,
	// then no inline attachments will be saved.
	repeated string inline_whitelist = 3;
}

message ParseEmailResponse{
	// The name of a generic file containing the parsed email
	string parsed_email_name = 1;

	// The parsed email
	ntypes.ParsedEmail parsed_email = 2;
}

message RenderEmailBodyRequest {
	// The name of a generic file contaning an eml file
	string eml_name = 1;

	// The whitelist of inline email attachments to include in the rendering,
	// things like: ".jpg", ".jpeg", ".png", ".gif". If empty, then no inline
	// attachments will be rendered in the email body.
	repeated string inline_attachment_whitelist = 2;
}

message RenderEmailBodyResponse {
	// The generic file ID of the rendered email pdf
	string email_pdf_name = 1;
}


// RenderPdfRequest is the adobe version of the RenderPdf rpc. The 
// OutputEncoding must be set to either PNG or JPG.  All other parameters are
// optional. 
//
// Use MaxLength and LongSideResize to protect against oversized pages.
// Here is an example using the defaults of 14.5 inches and 11 respectively 
// with a DPI of 300: 
// Page one is 8.5x14 inches. Since both sides are less than 14.5 inches, 
// it is not resized and the output image will be 2550x4200 pixels. 
// Page two is 10x20 inches. Since one side is longer than 14.5 this will be
// resized so the long side is 11. The short side is scaled appropiately at
// 5.5 inches. The final size would by 5.5x11 inches or 1650x3300 pixels. 
message RenderPdfRequest {
	// The name of a generic file containing a pdf file
	string pdf_name = 1;

	// OutputEncoding is the image encoding of the output files. It could be
	// jpg, png, or tiff.
	ntypes.ImageEncoding output_encoding = 2;

	// JpgQuality is the quality metric. It is only used when the OutputEncoding
	// is jpg, otherwise it's ignored. If it's zero it will default to 90
	int32 jpg_quality = 3;

	// Dpi is the resolution of the output image in dots per inch. If zero it
	// will default to 300. The max Dpi is 600.
	float dpi = 4;

	// MaxLength is the maximum page side length in inches. If a side is longer
	// than this, it will resize the page to the below LongSideResize.
	// If zero, a default of 14.5 inches will be used.
	float max_length = 5;

	// LongSideResize is the length in inches that that the long side of a page
	// will be resized to in the event that the side length is greater than the
	// above MaxLength. If zero, a default of 11 inches will be used.
	float long_side_resize = 6;
}

message RenderPdfResponse {
	// The generic file IDs of the rendered pages
	repeated string page_names = 1;

	enum Error {
		SUCCESS = 0;
		ENCRYPTED = 1;
		CORRUPTED = 2;
		NOT_PERMITTED = 3;
	}
	Error error = 2;
}

// RenderPdfGSRequest is the Ghostscript version of the RenderPdf rpc. The 
// OutputEncoding must be set to either PNG or JPG.  All other parameters are
// optional. 
//
// Use MaxLength and LongSideResize to protect against oversized pages.
// Here is an example using the defaults of 14.5 inches and 11 respectively 
// with a DPI of 300: 
// Page one is 8.5x14 inches. Since both sides are less than 14.5 inches, 
// it is not resized and the output image will be 2550x4200 pixels. 
// Page two is 10x20 inches. Since one side is longer than 14.5 this will be
// resized so the long side is 11. The short side is scaled appropiately at
// 5.5 inches. The final size would by 5.5x11 inches or 1650x3300 pixels.
message RenderPdfGSRequest {
	// The name of a generic file containing a pdf file
	string pdf_name = 1;

	// OutputEncoding is the image encoding of the output files. It could be
	// jpg, png, or tiff.
	ntypes.ImageEncoding output_encoding = 2;

	// JpgQuality is the quality metric. It is only used when the OutputEncoding
	// is jpg, otherwise it's ignored. If it's zero it will default to 90
	int32 jpg_quality = 3;

	// Dpi is the resolution of the output image in dots per inch. If zero it
	// will default to 300. The max Dpi is 600.
	float dpi = 4;

	// MaxLength is the maximum page side length in inches. If a side is longer
	// than this, it will resize the page to the below LongSideResize.
	// If zero, a default of 14.5 inches will be used.
	float max_length = 5;

	// LongSideResize is the length in inches that that the long side of a page
	// will be resized in the event that a side length is greater than the
	// above MaxLength. If zero, a default of 11 inches will be used.
	float long_side_resize = 6;
}

message RenderPdfGSResponse {
	// The generic file IDs of the rendered pages
	repeated string page_names = 1;

	enum Error {
		SUCCESS = 0;
		ENCRYPTED = 1;
		CORRUPTED = 2;
		NOT_PERMITTED = 3;
	}
	Error error = 2;
}

message SplitTiffRequest {
	// The name of a generic file containing a tiff file
	string tiff_name = 1;
}

message SplitTiffResponse {
	// The generic file IDs of the individual pages
	repeated string page_names = 1;

	enum Error {
		SUCCESS = 0;
		CORRUPTED = 1;
	}
	Error error = 2;
}
