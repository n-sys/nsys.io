syntax = "proto3";
package nsys.api.file;
option go_package = "nsys.io/api/file";

import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "nsys.io/api/ntypes/file_ntypes.proto";

service FileProcessing {
	// Upload a generic file for further processing later.
	rpc UploadGenericFile (UploadGenericFileRequest) 
			returns (UploadGenericFileResponse) {}
	rpc UploadGenericFileLRO (UploadGenericFileRequest) 
			returns (google.longrunning.Operation) {}

	// Download a previously uploaded generic file.
	rpc GetGenericFile (GetGenericFileRequest)
					returns (GetGenericFileResponse) {}
	rpc GetGenericFileLRO (GetGenericFileRequest)
					returns (google.longrunning.Operation) {}

	// Group any number of previously-uploaded files together into a 
	// single fileset. Files may have membership in multiple filesets.
	rpc CreateFileset (CreateFilesetRequest)
			returns (CreateFilesetResponse) {}
	rpc CreateFilesetLRO (CreateFilesetRequest)
			returns (google.longrunning.Operation) {}

	// Begin processing a file or fileset in the specified way.
	// This is a temporary hack (therefore this will be here forever ;-)
	rpc InitiateProcessing(InitiateProcessingRequest)
			returns (google.protobuf.Empty) {}
	rpc InitiateProcessingLRO (InitiateProcessingRequest)
			returns (google.longrunning.Operation) {}

	// Given a document (.doc, .docx, .txt, .ppt, ect.) convert it to pdf
	rpc DocToPdf(DocToPdfRequest)
			returns(DocToPdfResponse) {}
	rpc DocToPdfLRO(DocToPdfRequest)
			returns(google.longrunning.Operation) {}

	// Parses an email *.eml file stored as a generic file. Stores all
	// attachments as new generic files and returns the email headers, body,
	// and list of attachments.
	rpc ParseEmail(ParseEmailRequest)
			returns (ParseEmailResponse) {}
	rpc ParseEmailLRO(ParseEmailRequest)
			returns (google.longrunning.Operation) {}

	// Given an email *.eml file stored as a generic file, this renders the
	// email body as a pdf and stores the pdf as a new generic file.
	rpc RenderEmailBody(RenderEmailBodyRequest)
			returns (RenderEmailBodyResponse) {}
	rpc RenderEmailBodyLRO(RenderEmailBodyRequest)
			returns (google.longrunning.Operation) {}

	// Given a pdf file stored as a generic file, this renders the individual
	// pages of the pdf as png files and stores them as new generic files. It
	// will render them at 300 DPI.
	rpc RenderPdf(RenderPdfRequest)
			returns (RenderPdfResponse) {}
	rpc RenderPdfLRO(RenderPdfRequest)
			returns (google.longrunning.Operation) {}

	// Given a tiff file stored as a generic file, this splits the pages into
	// individual png files and stores them as new generic files.
	rpc SplitTiff(SplitTiffRequest)
			returns (SplitTiffResponse) {}
	rpc SplitTiffLRO(SplitTiffRequest)
			returns (google.longrunning.Operation) {}

	// Returns a list of available objects that have been completely processed 
	// by whatever client/application specific operations InitiateProcessing() 
	// caused to occur. 
	rpc ListProcessedObjects(ListProcessedObjectsRequest)
			returns (ListProcessedObjectsResponse) {}
	rpc ListProcessedObjectsLRO(ListProcessedObjectsRequest)
			returns (google.longrunning.Operation) {}

	// Fetch any of objects identified by ListProcessedObjects()
	rpc GetProcessedObject(GetProcessedObjectRequest)
			returns (GetProcessedObjectResponse) {}	
	rpc GetProcessedObjectLRO(GetProcessedObjectRequest)
			returns (google.longrunning.Operation) {}

	// Delete a processed object (as identified by ListProcessedObjects()).
	rpc DeleteProcessedObject(DeleteProcessedObjectRequest) 
			returns (google.protobuf.Empty) {}
	rpc DeleteProcessedObjectLRO(DeleteProcessedObjectRequest)
			returns (google.longrunning.Operation) {}
}

message ListProcessedObjectsRequest {
	// Application-specific filter on returned object listing.
	// If not specified, all object listings are returned.
	string filter = 1;
}

message ListProcessedObjectsResponse {
	repeated ProcessedObjectListing list_entry = 1;
}

message ProcessedObjectListing {
	// The object's name / ID.
	string name = 1;
	// Application-specific description.
	string description = 2;
	// Application-specific extended meta information.
	google.protobuf.Any metadata = 3;
}

message GetProcessedObjectRequest {
	string name = 1;
}

message GetProcessedObjectResponse {
	// The object's name / ID.
	string name = 1;
	// Application-specific description (same as that returned in objec listings).
	string description = 2;
	// The arbitrary application-specific any-encoded object.
	google.protobuf.Any object = 3;
}

message DeleteProcessedObjectRequest {
	// The object to delete.
	string name = 1;
}

message UploadGenericFileRequest {
	// The file's identifier which must be unique within the
        // account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
        // Automatically generated if not supplied in upload request.
        string name = 1;

	ntypes.GenericFile generic_file = 2;	

	// Requested file expiration time. The time is capped to comply with 
	// account-specific minimums and maximums. A zero value requests the 
	// maximum allowable expiration time be used.
	google.protobuf.Timestamp expire_time = 3;
}

message UploadGenericFileResponse {
	// Identifier for the uploaded file.
	string Name = 1;
	// The actual expiration time for the file.
	google.protobuf.Timestamp expire_time = 2;	
}

message GetGenericFileRequest {
        // The generic file's identifier.
        string name = 1;
}

message GetGenericFileResponse {
        // The file's identifier.
        string name = 1;
        // The actual file (SHA sum validated on the server side at read).
        ntypes.GenericFile generic_file = 2;
}

message CreateFilesetRequest {
	// The fileset's identifier which must be unique within the
        // account and must match the regex '^[0-9A-Za-z.-]{1,48}$'.
        // Automatically generated if not supplied.
        string name = 1;

	// One or more files that are to become members of the fileset.
	repeated string file_names = 2;

	// Requested fileset expiration time. The time is capped so that it 
	// is no later than the latest expiration time of any file in the set.
	// A zero value requests the maximum allowable expiration time be used.
	google.protobuf.Timestamp expire_time = 3;
}

message CreateFilesetResponse {
	// Identifier for the fileset.
	string Name = 1;
	// The actual expiration time for the fileset.
	google.protobuf.Timestamp expire_time = 2;	
}
	
message InitiateProcessingRequest {
	// Identifier of the object to process.
	// The context for interpretation of this identifier is set by the
	// client and application specific process code.
	string name = 1;
	// Application-specific type of processing to perform.
	string process_code = 2;
}

message DocToPdfRequest {
	// The generic file id of the document to be rendered.
	string name = 1;
}

message DocToPdfResponse{
	// the generic file id of the rendered pdf.
	string pdf_name = 1;
}

message ParseEmailRequest{
	// The name of a generic file contaning an eml file
	string eml_name = 1;

	// The whitelist of email attachment file extensions to save, things like:
	// ".pdf", ".png", ".tif", ".tiff", ".jpg", ".jpeg". If empty, then no
	// attachments will be saved. In any case a list of rejected attachments
	// will be returned.
	repeated string attachment_whitelist = 2;
}

message ParseEmailResponse{
	// The name of a generic file containing the parsed email
	string parsed_email_name = 1;

	// The parsed email
	ntypes.ParsedEmail parsed_email = 2;
}

message RenderEmailBodyRequest {
	// The name of a generic file contaning an eml file
	string eml_name = 1;

	// The whitelist of inline email attachments to include in the rendering,
	// things like: ".jpg", ".jpeg", ".png", ".gif". If empty, then no inline
	// attachments will be rendered in the email body.
	repeated string inline_attachment_whitelist = 2;
}

message RenderEmailBodyResponse {
	// The generic file ID of the rendered email pdf
	string email_pdf_name = 1;
}

message RenderPdfRequest {
	// The name of a generic file containing a pdf file
	string pdf_name = 1;
}

message RenderPdfResponse {
	// The generic file IDs of the rendered pages
	repeated string page_names = 1;

	enum Error {
		SUCCESS = 0;
		ENCRYPTED = 1;
		CORRUPTED = 2;
	}
	Error error = 2;
}

message SplitTiffRequest {
	// The name of a generic file containing a tiff file
	string tiff_name = 1;
}

message SplitTiffResponse {
	// The generic file IDs of the individual pages
	repeated string page_names = 1;
}
