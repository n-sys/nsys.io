// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diagnostic.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiscardRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscardRequest) Reset()         { *m = DiscardRequest{} }
func (m *DiscardRequest) String() string { return proto.CompactTextString(m) }
func (*DiscardRequest) ProtoMessage()    {}
func (*DiscardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01d87880efc6c48, []int{0}
}

func (m *DiscardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscardRequest.Unmarshal(m, b)
}
func (m *DiscardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscardRequest.Marshal(b, m, deterministic)
}
func (m *DiscardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscardRequest.Merge(m, src)
}
func (m *DiscardRequest) XXX_Size() int {
	return xxx_messageInfo_DiscardRequest.Size(m)
}
func (m *DiscardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscardRequest proto.InternalMessageInfo

func (m *DiscardRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type EchoRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01d87880efc6c48, []int{1}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type EchoResponse struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d01d87880efc6c48, []int{2}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*DiscardRequest)(nil), "nsys.api.DiscardRequest")
	proto.RegisterType((*EchoRequest)(nil), "nsys.api.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "nsys.api.EchoResponse")
}

func init() { proto.RegisterFile("diagnostic.proto", fileDescriptor_d01d87880efc6c48) }

var fileDescriptor_d01d87880efc6c48 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xb7, 0x52, 0xac, 0x4e, 0x55, 0x64, 0xc0, 0x52, 0x56, 0x04, 0x8d, 0x1e, 0x3c, 0x65,
	0x41, 0x0f, 0x9e, 0x3c, 0x28, 0x2d, 0x5e, 0x84, 0xc2, 0x1e, 0xbd, 0xa5, 0xdb, 0x18, 0x03, 0x35,
	0x13, 0x37, 0x59, 0xb0, 0xff, 0xc2, 0x9f, 0x2c, 0x49, 0xba, 0x5a, 0xc5, 0xda, 0xdb, 0xee, 0xe4,
	0x7b, 0x6f, 0xe6, 0x3d, 0x38, 0x9c, 0x69, 0xa1, 0x0c, 0x39, 0xaf, 0x2b, 0x6e, 0x6b, 0xf2, 0x84,
	0x3b, 0xc6, 0x2d, 0x1c, 0x17, 0x56, 0xe7, 0xe7, 0x8a, 0x48, 0xcd, 0x65, 0x31, 0x27, 0xa3, 0xea,
	0xc6, 0x18, 0x6d, 0x54, 0x41, 0x56, 0xd6, 0xc2, 0x6b, 0x32, 0x2e, 0xe1, 0xf9, 0xf1, 0x12, 0x8a,
	0x7f, 0xd3, 0xe6, 0xb9, 0x90, 0xaf, 0xd6, 0x2f, 0xd2, 0x23, 0xbb, 0x80, 0x83, 0x91, 0x76, 0x95,
	0xa8, 0x67, 0xa5, 0x7c, 0x6b, 0xa4, 0xf3, 0x88, 0xd0, 0xf5, 0xf2, 0xdd, 0x0f, 0x3b, 0xa7, 0x9d,
	0xcb, 0xdd, 0x32, 0x7e, 0xb3, 0x33, 0xe8, 0x8f, 0xab, 0x17, 0xfa, 0x0f, 0x61, 0xb0, 0x97, 0x10,
	0x67, 0xc9, 0x38, 0xf9, 0x17, 0x73, 0xf5, 0xb1, 0x05, 0x30, 0xfa, 0x4a, 0x83, 0x37, 0xd0, 0x0d,
	0x12, 0x3c, 0xe2, 0x6d, 0x20, 0xbe, 0xb2, 0x25, 0x1f, 0xfc, 0x1e, 0x27, 0x67, 0x96, 0xe1, 0x1d,
	0xf4, 0xc2, 0xe4, 0xb1, 0x9c, 0xac, 0xd3, 0x9e, 0xf0, 0x14, 0x9a, 0xaf, 0x34, 0xc3, 0x27, 0x6d,
	0x33, 0x2c, 0xc3, 0x5b, 0xe8, 0x2d, 0x73, 0xe3, 0xf0, 0xdb, 0xe2, 0x67, 0x15, 0xf9, 0xa0, 0x75,
	0x69, 0xab, 0xe3, 0xe3, 0x50, 0x1d, 0xcb, 0xf0, 0x21, 0x04, 0x89, 0x6c, 0x38, 0x62, 0xbd, 0xc3,
	0xa6, 0x3b, 0xee, 0xf7, 0x9f, 0xfa, 0x51, 0xab, 0xa9, 0x10, 0x56, 0x4f, 0xb7, 0xe3, 0xa6, 0xeb,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0xe5, 0xde, 0x64, 0xf5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiagnosticClient is the client API for Diagnostic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiagnosticClient interface {
	// Echos back whatever is sent
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	EchoLRO(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Discards anything sent
	Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DiscardLRO(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type diagnosticClient struct {
	cc *grpc.ClientConn
}

func NewDiagnosticClient(cc *grpc.ClientConn) DiagnosticClient {
	return &diagnosticClient{cc}
}

func (c *diagnosticClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.Diagnostic/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticClient) EchoLRO(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.Diagnostic/EchoLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticClient) Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nsys.api.Diagnostic/Discard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticClient) DiscardLRO(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.Diagnostic/DiscardLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosticServer is the server API for Diagnostic service.
type DiagnosticServer interface {
	// Echos back whatever is sent
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	EchoLRO(context.Context, *EchoRequest) (*longrunning.Operation, error)
	// Discards anything sent
	Discard(context.Context, *DiscardRequest) (*empty.Empty, error)
	DiscardLRO(context.Context, *DiscardRequest) (*longrunning.Operation, error)
}

// UnimplementedDiagnosticServer can be embedded to have forward compatible implementations.
type UnimplementedDiagnosticServer struct {
}

func (*UnimplementedDiagnosticServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedDiagnosticServer) EchoLRO(ctx context.Context, req *EchoRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoLRO not implemented")
}
func (*UnimplementedDiagnosticServer) Discard(ctx context.Context, req *DiscardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discard not implemented")
}
func (*UnimplementedDiagnosticServer) DiscardLRO(ctx context.Context, req *DiscardRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardLRO not implemented")
}

func RegisterDiagnosticServer(s *grpc.Server, srv DiagnosticServer) {
	s.RegisterService(&_Diagnostic_serviceDesc, srv)
}

func _Diagnostic_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.Diagnostic/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diagnostic_EchoLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServer).EchoLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.Diagnostic/EchoLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServer).EchoLRO(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diagnostic_Discard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServer).Discard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.Diagnostic/Discard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServer).Discard(ctx, req.(*DiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diagnostic_DiscardLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServer).DiscardLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.Diagnostic/DiscardLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServer).DiscardLRO(ctx, req.(*DiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Diagnostic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsys.api.Diagnostic",
	HandlerType: (*DiagnosticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Diagnostic_Echo_Handler,
		},
		{
			MethodName: "EchoLRO",
			Handler:    _Diagnostic_EchoLRO_Handler,
		},
		{
			MethodName: "Discard",
			Handler:    _Diagnostic_Discard_Handler,
		},
		{
			MethodName: "DiscardLRO",
			Handler:    _Diagnostic_DiscardLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diagnostic.proto",
}
