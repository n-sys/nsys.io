// Code generated by protoc-gen-go. DO NOT EDIT.
// source: image.proto

package image

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	ntypes "nsys.io/api/ntypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadImageRequest struct {
	// An identifier for the uploaded image that is unique within the account.
	// If none is supplied, one will be generated and returned in the response.
	// Must match regex '^[0-9A-Za-z.-]{1,48}$'.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The image to upload.
	Image *ntypes.Image `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// The source of the image, if known.
	ImageSource          ntypes.ImageSource `protobuf:"varint,3,opt,name=image_source,json=imageSource,proto3,enum=nsys.api.ntypes.ImageSource" json:"image_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UploadImageRequest) Reset()         { *m = UploadImageRequest{} }
func (m *UploadImageRequest) String() string { return proto.CompactTextString(m) }
func (*UploadImageRequest) ProtoMessage()    {}
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{0}
}

func (m *UploadImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadImageRequest.Unmarshal(m, b)
}
func (m *UploadImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadImageRequest.Marshal(b, m, deterministic)
}
func (m *UploadImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadImageRequest.Merge(m, src)
}
func (m *UploadImageRequest) XXX_Size() int {
	return xxx_messageInfo_UploadImageRequest.Size(m)
}
func (m *UploadImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadImageRequest proto.InternalMessageInfo

func (m *UploadImageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadImageRequest) GetImage() *ntypes.Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *UploadImageRequest) GetImageSource() ntypes.ImageSource {
	if m != nil {
		return m.ImageSource
	}
	return ntypes.ImageSource_AUTO
}

type UploadImageResponse struct {
	// The image identifier supplied by the client or assigned by the system.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When the image and any derived products will be dropped by the system.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadImageResponse) Reset()         { *m = UploadImageResponse{} }
func (m *UploadImageResponse) String() string { return proto.CompactTextString(m) }
func (*UploadImageResponse) ProtoMessage()    {}
func (*UploadImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{1}
}

func (m *UploadImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadImageResponse.Unmarshal(m, b)
}
func (m *UploadImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadImageResponse.Marshal(b, m, deterministic)
}
func (m *UploadImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadImageResponse.Merge(m, src)
}
func (m *UploadImageResponse) XXX_Size() int {
	return xxx_messageInfo_UploadImageResponse.Size(m)
}
func (m *UploadImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadImageResponse proto.InternalMessageInfo

func (m *UploadImageResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadImageResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type DeskewImageRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeskewImageRequest) Reset()         { *m = DeskewImageRequest{} }
func (m *DeskewImageRequest) String() string { return proto.CompactTextString(m) }
func (*DeskewImageRequest) ProtoMessage()    {}
func (*DeskewImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{2}
}

func (m *DeskewImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeskewImageRequest.Unmarshal(m, b)
}
func (m *DeskewImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeskewImageRequest.Marshal(b, m, deterministic)
}
func (m *DeskewImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeskewImageRequest.Merge(m, src)
}
func (m *DeskewImageRequest) XXX_Size() int {
	return xxx_messageInfo_DeskewImageRequest.Size(m)
}
func (m *DeskewImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeskewImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeskewImageRequest proto.InternalMessageInfo

func (m *DeskewImageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeskewImageResponse struct {
	// If true, the system was unable to unable to confidently deskew and/or
	// orient the image. In this case, the image only goes through an encoding
	// transform and the deskew and rotation angles are not set.
	DeskewFailed bool `protobuf:"varint,1,opt,name=deskew_failed,json=deskewFailed,proto3" json:"deskew_failed,omitempty"`
	// The number of degrees rotation that were required to bring the bulk of
	// the longest text lines into a horizontal or vertical orientation.
	// Absolute values greater than 10 are strong indicator that something with
	// the original image is in really bad shape.
	DeskewAngle float64 `protobuf:"fixed64,2,opt,name=deskew_angle,json=deskewAngle,proto3" json:"deskew_angle,omitempty"`
	// 0, 90, 180, or 270 -- the number of degrees the image had to be rotated
	// to get most of the printed lines "right side up" once deskewed.
	DegreesRotated int32 `protobuf:"varint,3,opt,name=degrees_rotated,json=degreesRotated,proto3" json:"degrees_rotated,omitempty"`
	// Computed background color (used for edge fill).
	// If multi-color, the color covering the most area generally wins.
	BackgroundColor      *ntypes.RGBA `protobuf:"bytes,4,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeskewImageResponse) Reset()         { *m = DeskewImageResponse{} }
func (m *DeskewImageResponse) String() string { return proto.CompactTextString(m) }
func (*DeskewImageResponse) ProtoMessage()    {}
func (*DeskewImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{3}
}

func (m *DeskewImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeskewImageResponse.Unmarshal(m, b)
}
func (m *DeskewImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeskewImageResponse.Marshal(b, m, deterministic)
}
func (m *DeskewImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeskewImageResponse.Merge(m, src)
}
func (m *DeskewImageResponse) XXX_Size() int {
	return xxx_messageInfo_DeskewImageResponse.Size(m)
}
func (m *DeskewImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeskewImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeskewImageResponse proto.InternalMessageInfo

func (m *DeskewImageResponse) GetDeskewFailed() bool {
	if m != nil {
		return m.DeskewFailed
	}
	return false
}

func (m *DeskewImageResponse) GetDeskewAngle() float64 {
	if m != nil {
		return m.DeskewAngle
	}
	return 0
}

func (m *DeskewImageResponse) GetDegreesRotated() int32 {
	if m != nil {
		return m.DegreesRotated
	}
	return 0
}

func (m *DeskewImageResponse) GetBackgroundColor() *ntypes.RGBA {
	if m != nil {
		return m.BackgroundColor
	}
	return nil
}

type GetExemplarSnapshotRequest struct {
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Return the actual exemplar image data too?
	ReturnImageData      bool     `protobuf:"varint,2,opt,name=return_image_data,json=returnImageData,proto3" json:"return_image_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetExemplarSnapshotRequest) Reset()         { *m = GetExemplarSnapshotRequest{} }
func (m *GetExemplarSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*GetExemplarSnapshotRequest) ProtoMessage()    {}
func (*GetExemplarSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{4}
}

func (m *GetExemplarSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetExemplarSnapshotRequest.Unmarshal(m, b)
}
func (m *GetExemplarSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetExemplarSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *GetExemplarSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExemplarSnapshotRequest.Merge(m, src)
}
func (m *GetExemplarSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_GetExemplarSnapshotRequest.Size(m)
}
func (m *GetExemplarSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExemplarSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExemplarSnapshotRequest proto.InternalMessageInfo

func (m *GetExemplarSnapshotRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *GetExemplarSnapshotRequest) GetReturnImageData() bool {
	if m != nil {
		return m.ReturnImageData
	}
	return false
}

type GetExemplarSnapshotResponse struct {
	ExemplarSnapshot     *ntypes.Exemplar `protobuf:"bytes,1,opt,name=exemplar_snapshot,json=exemplarSnapshot,proto3" json:"exemplar_snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetExemplarSnapshotResponse) Reset()         { *m = GetExemplarSnapshotResponse{} }
func (m *GetExemplarSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*GetExemplarSnapshotResponse) ProtoMessage()    {}
func (*GetExemplarSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{5}
}

func (m *GetExemplarSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetExemplarSnapshotResponse.Unmarshal(m, b)
}
func (m *GetExemplarSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetExemplarSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *GetExemplarSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExemplarSnapshotResponse.Merge(m, src)
}
func (m *GetExemplarSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_GetExemplarSnapshotResponse.Size(m)
}
func (m *GetExemplarSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExemplarSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExemplarSnapshotResponse proto.InternalMessageInfo

func (m *GetExemplarSnapshotResponse) GetExemplarSnapshot() *ntypes.Exemplar {
	if m != nil {
		return m.ExemplarSnapshot
	}
	return nil
}

type SolveFieldRequest struct {
	// Identifier for some image which has already been registered to an exemplar.
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Identifier of the field to solve.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Field-specific hints and parameters for solution.
	SolutionParameters   *ntypes.SolutionParameters `protobuf:"bytes,3,opt,name=solution_parameters,json=solutionParameters,proto3" json:"solution_parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SolveFieldRequest) Reset()         { *m = SolveFieldRequest{} }
func (m *SolveFieldRequest) String() string { return proto.CompactTextString(m) }
func (*SolveFieldRequest) ProtoMessage()    {}
func (*SolveFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{6}
}

func (m *SolveFieldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveFieldRequest.Unmarshal(m, b)
}
func (m *SolveFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveFieldRequest.Marshal(b, m, deterministic)
}
func (m *SolveFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveFieldRequest.Merge(m, src)
}
func (m *SolveFieldRequest) XXX_Size() int {
	return xxx_messageInfo_SolveFieldRequest.Size(m)
}
func (m *SolveFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SolveFieldRequest proto.InternalMessageInfo

func (m *SolveFieldRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *SolveFieldRequest) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *SolveFieldRequest) GetSolutionParameters() *ntypes.SolutionParameters {
	if m != nil {
		return m.SolutionParameters
	}
	return nil
}

type SolveFieldResponse struct {
	FieldSolution        *ntypes.FieldSolution `protobuf:"bytes,1,opt,name=field_solution,json=fieldSolution,proto3" json:"field_solution,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SolveFieldResponse) Reset()         { *m = SolveFieldResponse{} }
func (m *SolveFieldResponse) String() string { return proto.CompactTextString(m) }
func (*SolveFieldResponse) ProtoMessage()    {}
func (*SolveFieldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{7}
}

func (m *SolveFieldResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolveFieldResponse.Unmarshal(m, b)
}
func (m *SolveFieldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolveFieldResponse.Marshal(b, m, deterministic)
}
func (m *SolveFieldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveFieldResponse.Merge(m, src)
}
func (m *SolveFieldResponse) XXX_Size() int {
	return xxx_messageInfo_SolveFieldResponse.Size(m)
}
func (m *SolveFieldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveFieldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SolveFieldResponse proto.InternalMessageInfo

func (m *SolveFieldResponse) GetFieldSolution() *ntypes.FieldSolution {
	if m != nil {
		return m.FieldSolution
	}
	return nil
}

type ListSolvedFieldsRequest struct {
	// Returns a list the identifiers for all fields which have solutions available
	// on the specified image. Meant to provide an efficient polling mechanism but,
	// still, don't go crazy.
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSolvedFieldsRequest) Reset()         { *m = ListSolvedFieldsRequest{} }
func (m *ListSolvedFieldsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSolvedFieldsRequest) ProtoMessage()    {}
func (*ListSolvedFieldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{8}
}

func (m *ListSolvedFieldsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSolvedFieldsRequest.Unmarshal(m, b)
}
func (m *ListSolvedFieldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSolvedFieldsRequest.Marshal(b, m, deterministic)
}
func (m *ListSolvedFieldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSolvedFieldsRequest.Merge(m, src)
}
func (m *ListSolvedFieldsRequest) XXX_Size() int {
	return xxx_messageInfo_ListSolvedFieldsRequest.Size(m)
}
func (m *ListSolvedFieldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSolvedFieldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSolvedFieldsRequest proto.InternalMessageInfo

func (m *ListSolvedFieldsRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

type ListSolvedFieldsResponse struct {
	// Fields which have solutions (solved puzzles).
	FieldNames           []string `protobuf:"bytes,1,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSolvedFieldsResponse) Reset()         { *m = ListSolvedFieldsResponse{} }
func (m *ListSolvedFieldsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSolvedFieldsResponse) ProtoMessage()    {}
func (*ListSolvedFieldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{9}
}

func (m *ListSolvedFieldsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSolvedFieldsResponse.Unmarshal(m, b)
}
func (m *ListSolvedFieldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSolvedFieldsResponse.Marshal(b, m, deterministic)
}
func (m *ListSolvedFieldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSolvedFieldsResponse.Merge(m, src)
}
func (m *ListSolvedFieldsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSolvedFieldsResponse.Size(m)
}
func (m *ListSolvedFieldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSolvedFieldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSolvedFieldsResponse proto.InternalMessageInfo

func (m *ListSolvedFieldsResponse) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

type GetFieldSolutionsRequest struct {
	// Identifier for an exemplar-registered image which (potentially anyway)
	// has solved fields on it.
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// List of fields defined on the image's exemplar that we want the
	// solutions for for. Solutions not available at the time of query
	// are not mentioned in the response.
	FieldNames           []string `protobuf:"bytes,2,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFieldSolutionsRequest) Reset()         { *m = GetFieldSolutionsRequest{} }
func (m *GetFieldSolutionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetFieldSolutionsRequest) ProtoMessage()    {}
func (*GetFieldSolutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{10}
}

func (m *GetFieldSolutionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFieldSolutionsRequest.Unmarshal(m, b)
}
func (m *GetFieldSolutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFieldSolutionsRequest.Marshal(b, m, deterministic)
}
func (m *GetFieldSolutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFieldSolutionsRequest.Merge(m, src)
}
func (m *GetFieldSolutionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetFieldSolutionsRequest.Size(m)
}
func (m *GetFieldSolutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFieldSolutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFieldSolutionsRequest proto.InternalMessageInfo

func (m *GetFieldSolutionsRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *GetFieldSolutionsRequest) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

type GetFieldSolutionsResponse struct {
	// Keyed on field id. Only fields that have been solved are returned.
	// No mention is made of unsolved ones and it is not an error to query
	// for them.
	FieldSolutions       map[string]*ntypes.FieldSolution `protobuf:"bytes,1,rep,name=field_solutions,json=fieldSolutions,proto3" json:"field_solutions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetFieldSolutionsResponse) Reset()         { *m = GetFieldSolutionsResponse{} }
func (m *GetFieldSolutionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetFieldSolutionsResponse) ProtoMessage()    {}
func (*GetFieldSolutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{11}
}

func (m *GetFieldSolutionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFieldSolutionsResponse.Unmarshal(m, b)
}
func (m *GetFieldSolutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFieldSolutionsResponse.Marshal(b, m, deterministic)
}
func (m *GetFieldSolutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFieldSolutionsResponse.Merge(m, src)
}
func (m *GetFieldSolutionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetFieldSolutionsResponse.Size(m)
}
func (m *GetFieldSolutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFieldSolutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFieldSolutionsResponse proto.InternalMessageInfo

func (m *GetFieldSolutionsResponse) GetFieldSolutions() map[string]*ntypes.FieldSolution {
	if m != nil {
		return m.FieldSolutions
	}
	return nil
}

type GetBaseImageRequest struct {
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBaseImageRequest) Reset()         { *m = GetBaseImageRequest{} }
func (m *GetBaseImageRequest) String() string { return proto.CompactTextString(m) }
func (*GetBaseImageRequest) ProtoMessage()    {}
func (*GetBaseImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{12}
}

func (m *GetBaseImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBaseImageRequest.Unmarshal(m, b)
}
func (m *GetBaseImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBaseImageRequest.Marshal(b, m, deterministic)
}
func (m *GetBaseImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBaseImageRequest.Merge(m, src)
}
func (m *GetBaseImageRequest) XXX_Size() int {
	return xxx_messageInfo_GetBaseImageRequest.Size(m)
}
func (m *GetBaseImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBaseImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBaseImageRequest proto.InternalMessageInfo

func (m *GetBaseImageRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

type GetBaseImageResponse struct {
	BaseImage            *ntypes.Image `protobuf:"bytes,1,opt,name=base_image,json=baseImage,proto3" json:"base_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetBaseImageResponse) Reset()         { *m = GetBaseImageResponse{} }
func (m *GetBaseImageResponse) String() string { return proto.CompactTextString(m) }
func (*GetBaseImageResponse) ProtoMessage()    {}
func (*GetBaseImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{13}
}

func (m *GetBaseImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBaseImageResponse.Unmarshal(m, b)
}
func (m *GetBaseImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBaseImageResponse.Marshal(b, m, deterministic)
}
func (m *GetBaseImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBaseImageResponse.Merge(m, src)
}
func (m *GetBaseImageResponse) XXX_Size() int {
	return xxx_messageInfo_GetBaseImageResponse.Size(m)
}
func (m *GetBaseImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBaseImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBaseImageResponse proto.InternalMessageInfo

func (m *GetBaseImageResponse) GetBaseImage() *ntypes.Image {
	if m != nil {
		return m.BaseImage
	}
	return nil
}

type GetDeskewedImageRequest struct {
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeskewedImageRequest) Reset()         { *m = GetDeskewedImageRequest{} }
func (m *GetDeskewedImageRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeskewedImageRequest) ProtoMessage()    {}
func (*GetDeskewedImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{14}
}

func (m *GetDeskewedImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeskewedImageRequest.Unmarshal(m, b)
}
func (m *GetDeskewedImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeskewedImageRequest.Marshal(b, m, deterministic)
}
func (m *GetDeskewedImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeskewedImageRequest.Merge(m, src)
}
func (m *GetDeskewedImageRequest) XXX_Size() int {
	return xxx_messageInfo_GetDeskewedImageRequest.Size(m)
}
func (m *GetDeskewedImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeskewedImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeskewedImageRequest proto.InternalMessageInfo

func (m *GetDeskewedImageRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

type GetDeskewedImageResponse struct {
	DeskewedImage        *ntypes.DeskewedImage `protobuf:"bytes,1,opt,name=deskewed_image,json=deskewedImage,proto3" json:"deskewed_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetDeskewedImageResponse) Reset()         { *m = GetDeskewedImageResponse{} }
func (m *GetDeskewedImageResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeskewedImageResponse) ProtoMessage()    {}
func (*GetDeskewedImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{15}
}

func (m *GetDeskewedImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeskewedImageResponse.Unmarshal(m, b)
}
func (m *GetDeskewedImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeskewedImageResponse.Marshal(b, m, deterministic)
}
func (m *GetDeskewedImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeskewedImageResponse.Merge(m, src)
}
func (m *GetDeskewedImageResponse) XXX_Size() int {
	return xxx_messageInfo_GetDeskewedImageResponse.Size(m)
}
func (m *GetDeskewedImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeskewedImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeskewedImageResponse proto.InternalMessageInfo

func (m *GetDeskewedImageResponse) GetDeskewedImage() *ntypes.DeskewedImage {
	if m != nil {
		return m.DeskewedImage
	}
	return nil
}

type RegisterImageRequest struct {
	// Identifier for the upload image being registered against an exemplar.
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Dominant language of the printed text in the image, if known.
	Language ntypes.Language `protobuf:"varint,2,opt,name=language,proto3,enum=nsys.api.ntypes.Language" json:"language,omitempty"`
	// List of candidate exemplars to consider for matching.  If the list
	// empty,  all existing exemplars are considered for possible match.
	// If a match is found, the image registration occurs.
	CandidateExemplars   []string `protobuf:"bytes,3,rep,name=candidate_exemplars,json=candidateExemplars,proto3" json:"candidate_exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterImageRequest) Reset()         { *m = RegisterImageRequest{} }
func (m *RegisterImageRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterImageRequest) ProtoMessage()    {}
func (*RegisterImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{16}
}

func (m *RegisterImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterImageRequest.Unmarshal(m, b)
}
func (m *RegisterImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterImageRequest.Marshal(b, m, deterministic)
}
func (m *RegisterImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterImageRequest.Merge(m, src)
}
func (m *RegisterImageRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterImageRequest.Size(m)
}
func (m *RegisterImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterImageRequest proto.InternalMessageInfo

func (m *RegisterImageRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *RegisterImageRequest) GetLanguage() ntypes.Language {
	if m != nil {
		return m.Language
	}
	return ntypes.Language_UNKNOWN
}

func (m *RegisterImageRequest) GetCandidateExemplars() []string {
	if m != nil {
		return m.CandidateExemplars
	}
	return nil
}

type RegisterImageResponse struct {
	// If present, the name of the exemplar the image was registered against.
	SelectedExemplar string `protobuf:"bytes,1,opt,name=selected_exemplar,json=selectedExemplar,proto3" json:"selected_exemplar,omitempty"`
	// Set if no exemplar matched closely enough. No error occurred in the
	// processing. Failures in the physical registration phase will be reflected
	// in error returns.
	NoMatch              bool     `protobuf:"varint,2,opt,name=no_match,json=noMatch,proto3" json:"no_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterImageResponse) Reset()         { *m = RegisterImageResponse{} }
func (m *RegisterImageResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterImageResponse) ProtoMessage()    {}
func (*RegisterImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{17}
}

func (m *RegisterImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterImageResponse.Unmarshal(m, b)
}
func (m *RegisterImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterImageResponse.Marshal(b, m, deterministic)
}
func (m *RegisterImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterImageResponse.Merge(m, src)
}
func (m *RegisterImageResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterImageResponse.Size(m)
}
func (m *RegisterImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterImageResponse proto.InternalMessageInfo

func (m *RegisterImageResponse) GetSelectedExemplar() string {
	if m != nil {
		return m.SelectedExemplar
	}
	return ""
}

func (m *RegisterImageResponse) GetNoMatch() bool {
	if m != nil {
		return m.NoMatch
	}
	return false
}

type GetRegisteredImageRequest struct {
	ImageName            string   `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRegisteredImageRequest) Reset()         { *m = GetRegisteredImageRequest{} }
func (m *GetRegisteredImageRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredImageRequest) ProtoMessage()    {}
func (*GetRegisteredImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{18}
}

func (m *GetRegisteredImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRegisteredImageRequest.Unmarshal(m, b)
}
func (m *GetRegisteredImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRegisteredImageRequest.Marshal(b, m, deterministic)
}
func (m *GetRegisteredImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredImageRequest.Merge(m, src)
}
func (m *GetRegisteredImageRequest) XXX_Size() int {
	return xxx_messageInfo_GetRegisteredImageRequest.Size(m)
}
func (m *GetRegisteredImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredImageRequest proto.InternalMessageInfo

func (m *GetRegisteredImageRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

type GetRegisteredImageResponse struct {
	Image                *ntypes.DimensionedImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetRegisteredImageResponse) Reset()         { *m = GetRegisteredImageResponse{} }
func (m *GetRegisteredImageResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredImageResponse) ProtoMessage()    {}
func (*GetRegisteredImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{19}
}

func (m *GetRegisteredImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRegisteredImageResponse.Unmarshal(m, b)
}
func (m *GetRegisteredImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRegisteredImageResponse.Marshal(b, m, deterministic)
}
func (m *GetRegisteredImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredImageResponse.Merge(m, src)
}
func (m *GetRegisteredImageResponse) XXX_Size() int {
	return xxx_messageInfo_GetRegisteredImageResponse.Size(m)
}
func (m *GetRegisteredImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredImageResponse proto.InternalMessageInfo

func (m *GetRegisteredImageResponse) GetImage() *ntypes.DimensionedImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type GetFieldCutRequest struct {
	// Identifier for some image which has already been registered to an exemplar.
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Identifier of the field we are returning a cut for.
	FieldName            string   `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFieldCutRequest) Reset()         { *m = GetFieldCutRequest{} }
func (m *GetFieldCutRequest) String() string { return proto.CompactTextString(m) }
func (*GetFieldCutRequest) ProtoMessage()    {}
func (*GetFieldCutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{20}
}

func (m *GetFieldCutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFieldCutRequest.Unmarshal(m, b)
}
func (m *GetFieldCutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFieldCutRequest.Marshal(b, m, deterministic)
}
func (m *GetFieldCutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFieldCutRequest.Merge(m, src)
}
func (m *GetFieldCutRequest) XXX_Size() int {
	return xxx_messageInfo_GetFieldCutRequest.Size(m)
}
func (m *GetFieldCutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFieldCutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFieldCutRequest proto.InternalMessageInfo

func (m *GetFieldCutRequest) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *GetFieldCutRequest) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

type GetFieldCutResponse struct {
	FieldCut             *ntypes.FieldCut `protobuf:"bytes,1,opt,name=field_cut,json=fieldCut,proto3" json:"field_cut,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetFieldCutResponse) Reset()         { *m = GetFieldCutResponse{} }
func (m *GetFieldCutResponse) String() string { return proto.CompactTextString(m) }
func (*GetFieldCutResponse) ProtoMessage()    {}
func (*GetFieldCutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{21}
}

func (m *GetFieldCutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFieldCutResponse.Unmarshal(m, b)
}
func (m *GetFieldCutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFieldCutResponse.Marshal(b, m, deterministic)
}
func (m *GetFieldCutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFieldCutResponse.Merge(m, src)
}
func (m *GetFieldCutResponse) XXX_Size() int {
	return xxx_messageInfo_GetFieldCutResponse.Size(m)
}
func (m *GetFieldCutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFieldCutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFieldCutResponse proto.InternalMessageInfo

func (m *GetFieldCutResponse) GetFieldCut() *ntypes.FieldCut {
	if m != nil {
		return m.FieldCut
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadImageRequest)(nil), "nsys.api.image.UploadImageRequest")
	proto.RegisterType((*UploadImageResponse)(nil), "nsys.api.image.UploadImageResponse")
	proto.RegisterType((*DeskewImageRequest)(nil), "nsys.api.image.DeskewImageRequest")
	proto.RegisterType((*DeskewImageResponse)(nil), "nsys.api.image.DeskewImageResponse")
	proto.RegisterType((*GetExemplarSnapshotRequest)(nil), "nsys.api.image.GetExemplarSnapshotRequest")
	proto.RegisterType((*GetExemplarSnapshotResponse)(nil), "nsys.api.image.GetExemplarSnapshotResponse")
	proto.RegisterType((*SolveFieldRequest)(nil), "nsys.api.image.SolveFieldRequest")
	proto.RegisterType((*SolveFieldResponse)(nil), "nsys.api.image.SolveFieldResponse")
	proto.RegisterType((*ListSolvedFieldsRequest)(nil), "nsys.api.image.ListSolvedFieldsRequest")
	proto.RegisterType((*ListSolvedFieldsResponse)(nil), "nsys.api.image.ListSolvedFieldsResponse")
	proto.RegisterType((*GetFieldSolutionsRequest)(nil), "nsys.api.image.GetFieldSolutionsRequest")
	proto.RegisterType((*GetFieldSolutionsResponse)(nil), "nsys.api.image.GetFieldSolutionsResponse")
	proto.RegisterMapType((map[string]*ntypes.FieldSolution)(nil), "nsys.api.image.GetFieldSolutionsResponse.FieldSolutionsEntry")
	proto.RegisterType((*GetBaseImageRequest)(nil), "nsys.api.image.GetBaseImageRequest")
	proto.RegisterType((*GetBaseImageResponse)(nil), "nsys.api.image.GetBaseImageResponse")
	proto.RegisterType((*GetDeskewedImageRequest)(nil), "nsys.api.image.GetDeskewedImageRequest")
	proto.RegisterType((*GetDeskewedImageResponse)(nil), "nsys.api.image.GetDeskewedImageResponse")
	proto.RegisterType((*RegisterImageRequest)(nil), "nsys.api.image.RegisterImageRequest")
	proto.RegisterType((*RegisterImageResponse)(nil), "nsys.api.image.RegisterImageResponse")
	proto.RegisterType((*GetRegisteredImageRequest)(nil), "nsys.api.image.GetRegisteredImageRequest")
	proto.RegisterType((*GetRegisteredImageResponse)(nil), "nsys.api.image.GetRegisteredImageResponse")
	proto.RegisterType((*GetFieldCutRequest)(nil), "nsys.api.image.GetFieldCutRequest")
	proto.RegisterType((*GetFieldCutResponse)(nil), "nsys.api.image.GetFieldCutResponse")
}

func init() { proto.RegisterFile("image.proto", fileDescriptor_9624c68e2b547544) }

var fileDescriptor_9624c68e2b547544 = []byte{
	// 1270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x0e, 0x9d, 0xf8, 0xff, 0xed, 0x91, 0xad, 0xc3, 0x2a, 0x4e, 0x65, 0xb6, 0x4e, 0x6c, 0x2a,
	0x41, 0x14, 0xa7, 0x90, 0x00, 0x35, 0x69, 0x83, 0x04, 0x45, 0x1b, 0x27, 0xb6, 0x51, 0xc0, 0x6e,
	0x02, 0x3a, 0x46, 0xdb, 0x04, 0x28, 0xb1, 0x16, 0x57, 0x0c, 0x6b, 0x8a, 0x64, 0xb9, 0xcb, 0x34,
	0x7e, 0x92, 0x5e, 0xf5, 0xba, 0xaf, 0xd2, 0xdb, 0xbe, 0x44, 0x9f, 0xa3, 0xe0, 0xee, 0x92, 0xe2,
	0x49, 0x26, 0x0d, 0xf4, 0x4e, 0x9c, 0xf9, 0x66, 0xe6, 0x9b, 0xd9, 0xd9, 0xd9, 0x81, 0xa0, 0x61,
	0xcf, 0xb0, 0x45, 0x86, 0x7e, 0xe0, 0x31, 0x0f, 0x35, 0x5d, 0x7a, 0x41, 0x87, 0xd8, 0xb7, 0x87,
	0x5c, 0xaa, 0xde, 0xb1, 0x3c, 0xcf, 0x72, 0xc8, 0x88, 0x6b, 0xcf, 0xc2, 0xe9, 0x88, 0xd9, 0x33,
	0x42, 0x19, 0x9e, 0xf9, 0xc2, 0x40, 0xed, 0x4b, 0x80, 0xe3, 0xb9, 0x56, 0x10, 0xba, 0xae, 0xed,
	0x5a, 0x23, 0xcf, 0x27, 0x01, 0x66, 0xb6, 0xe7, 0x52, 0x09, 0xba, 0xcd, 0xbd, 0xda, 0xde, 0x08,
	0xfb, 0xf6, 0xc8, 0x65, 0x17, 0x3e, 0xa1, 0xa3, 0xa9, 0x4d, 0x1c, 0x53, 0xea, 0xef, 0x95, 0xe8,
	0x79, 0x7c, 0x43, 0x7c, 0x48, 0xd8, 0xa0, 0x04, 0x46, 0x3e, 0x92, 0x99, 0xef, 0xe0, 0x20, 0x83,
	0xd4, 0x7e, 0x57, 0x00, 0x9d, 0xfa, 0x8e, 0x87, 0xcd, 0xef, 0x22, 0x37, 0x3a, 0xf9, 0x35, 0x24,
	0x94, 0x21, 0x04, 0x37, 0x5c, 0x3c, 0x23, 0x3d, 0x65, 0x5b, 0x19, 0xac, 0xea, 0xfc, 0x37, 0xfa,
	0x1c, 0x96, 0x79, 0xa8, 0xde, 0xd2, 0xb6, 0x32, 0x68, 0x8c, 0x6f, 0x0d, 0x93, 0x0a, 0x48, 0x8f,
	0xc2, 0x83, 0x00, 0xa1, 0x6f, 0x60, 0x4d, 0x10, 0xa3, 0x5e, 0x18, 0x4c, 0x48, 0xef, 0xfa, 0xb6,
	0x32, 0x68, 0x8e, 0x3f, 0x2b, 0x37, 0x3a, 0xe1, 0x18, 0x5d, 0x14, 0x58, 0x7c, 0x68, 0x53, 0xe8,
	0x66, 0x88, 0x51, 0xdf, 0x73, 0x29, 0x29, 0x65, 0xf6, 0x0c, 0x1a, 0xe4, 0xa3, 0x6f, 0x07, 0xc4,
	0x88, 0x8a, 0x2e, 0xf9, 0xa9, 0x43, 0x51, 0xf0, 0x61, 0x7c, 0x22, 0xc3, 0x37, 0xf1, 0x89, 0xe8,
	0x20, 0xe0, 0x91, 0x40, 0x1b, 0x00, 0x7a, 0x49, 0xe8, 0x39, 0xf9, 0xad, 0xaa, 0x00, 0xda, 0x5f,
	0x0a, 0x74, 0x33, 0x50, 0x49, 0xa9, 0x0f, 0xeb, 0x26, 0x17, 0x1b, 0x53, 0x6c, 0x3b, 0xc4, 0xe4,
	0x46, 0x2b, 0xfa, 0x9a, 0x10, 0x1e, 0x70, 0x19, 0xda, 0x01, 0xf9, 0x6d, 0x60, 0xd7, 0x72, 0x04,
	0x49, 0x45, 0x6f, 0x08, 0xd9, 0xf3, 0x48, 0x84, 0xee, 0x43, 0xcb, 0x24, 0x56, 0x40, 0x08, 0x35,
	0x02, 0x8f, 0x61, 0x46, 0x4c, 0x5e, 0xb5, 0x65, 0xbd, 0x29, 0xc5, 0xba, 0x90, 0xa2, 0x6f, 0xa1,
	0x7d, 0x86, 0x27, 0xe7, 0x56, 0xe0, 0x85, 0xae, 0x69, 0x4c, 0x3c, 0xc7, 0x0b, 0x7a, 0x37, 0x78,
	0xd2, 0x1b, 0x85, 0xfa, 0xea, 0x87, 0x7b, 0xcf, 0xf5, 0xd6, 0x1c, 0xfe, 0x22, 0x42, 0x6b, 0x16,
	0xa8, 0x87, 0x84, 0xed, 0xcb, 0x96, 0x38, 0x71, 0xb1, 0x4f, 0xdf, 0x7b, 0x2c, 0x4e, 0x7e, 0x0b,
	0x40, 0x36, 0xd5, 0xbc, 0x04, 0xab, 0x5c, 0xf2, 0x7d, 0x54, 0xee, 0x5d, 0xe8, 0x04, 0x84, 0x85,
	0x81, 0x6b, 0x08, 0x94, 0x89, 0x19, 0xe6, 0xf9, 0xac, 0xe8, 0x2d, 0xa1, 0xe0, 0xf5, 0x79, 0x89,
	0x19, 0xd6, 0x08, 0x7c, 0x5a, 0x1a, 0x48, 0x96, 0xee, 0x00, 0x3a, 0x49, 0x5f, 0x52, 0xa9, 0xe4,
	0x01, 0x1b, 0xe3, 0xcd, 0x42, 0x2a, 0xb1, 0x17, 0xbd, 0x4d, 0x72, 0xfe, 0xb4, 0x3f, 0x15, 0xe8,
	0x9c, 0x78, 0xce, 0x07, 0x72, 0x10, 0x5d, 0x96, 0x9a, 0x79, 0x6c, 0x01, 0xf0, 0xbb, 0x25, 0xd4,
	0x4b, 0x42, 0xcd, 0x25, 0x5c, 0xfd, 0x06, 0xba, 0xd4, 0x73, 0xc2, 0xe8, 0x7a, 0x1a, 0x3e, 0x0e,
	0xf0, 0x8c, 0x30, 0x12, 0x50, 0x7e, 0x24, 0x8d, 0x71, 0xbf, 0xc0, 0xee, 0x44, 0x62, 0x5f, 0x27,
	0x50, 0x1d, 0xd1, 0x82, 0x4c, 0x7b, 0x07, 0x28, 0x4d, 0x54, 0xd6, 0x61, 0x1f, 0x9a, 0x82, 0x4a,
	0x6c, 0x21, 0x8b, 0x70, 0xbb, 0x10, 0x86, 0xdb, 0xc5, 0xb1, 0xf4, 0xf5, 0x69, 0xfa, 0x53, 0x7b,
	0x02, 0x9f, 0x1c, 0xd9, 0x94, 0xf1, 0x00, 0x26, 0x47, 0xd2, 0x7a, 0xb5, 0xd0, 0x9e, 0x41, 0xaf,
	0x68, 0x29, 0xc9, 0xdd, 0x81, 0xc6, 0xbc, 0x4e, 0xb4, 0xa7, 0x6c, 0x5f, 0x1f, 0xac, 0xea, 0x90,
	0x14, 0x8a, 0x6a, 0x6f, 0xa1, 0x77, 0x48, 0x58, 0x86, 0x59, 0xcd, 0xb8, 0x79, 0xdf, 0x4b, 0x05,
	0xdf, 0xff, 0x28, 0xb0, 0x59, 0xe2, 0x5c, 0x52, 0x9b, 0x42, 0x2b, 0x5b, 0x37, 0x41, 0xaf, 0x31,
	0xfe, 0x7a, 0x98, 0x9d, 0xcf, 0xc3, 0x85, 0x3e, 0xb2, 0x15, 0xa5, 0xfb, 0x2e, 0x0b, 0x2e, 0xf4,
	0x66, 0xa6, 0xae, 0x54, 0xc5, 0xd0, 0x2d, 0x81, 0xa1, 0x36, 0x5c, 0x3f, 0x27, 0x17, 0x32, 0xab,
	0xe8, 0x27, 0x7a, 0x04, 0xcb, 0x1f, 0xb0, 0x13, 0xc6, 0x43, 0xa8, 0xea, 0xfc, 0x04, 0xf8, 0xe9,
	0xd2, 0x13, 0x45, 0x7b, 0x04, 0xdd, 0x43, 0xc2, 0xf6, 0x30, 0x25, 0x99, 0x41, 0x54, 0x71, 0x6e,
	0xc7, 0x70, 0x33, 0x6b, 0x25, 0x0b, 0xf3, 0x18, 0xe0, 0x0c, 0x53, 0x22, 0x6e, 0xa8, 0x6c, 0xa6,
	0x45, 0x13, 0x7b, 0xf5, 0x2c, 0x36, 0x8f, 0x1a, 0xe8, 0x90, 0x30, 0x31, 0xe4, 0x88, 0x79, 0x15,
	0x22, 0x98, 0xf7, 0x40, 0xce, 0x72, 0xde, 0xdd, 0xa6, 0x54, 0x64, 0x08, 0x15, 0xab, 0x93, 0xb5,
	0x5f, 0x37, 0xd3, 0x9f, 0xda, 0x1f, 0x0a, 0xdc, 0xd4, 0x89, 0x65, 0x53, 0x46, 0x82, 0x2b, 0x50,
	0x43, 0x8f, 0x61, 0xc5, 0xc1, 0xae, 0x15, 0xc6, 0x6f, 0x57, 0xb3, 0x64, 0xb6, 0x1c, 0x49, 0x80,
	0x9e, 0x40, 0xd1, 0x08, 0xba, 0x13, 0xec, 0x9a, 0xb6, 0x89, 0x19, 0x31, 0xe2, 0x89, 0x13, 0xdd,
	0xff, 0xa8, 0x45, 0x51, 0xa2, 0x8a, 0xa7, 0x12, 0xd5, 0x0c, 0xd8, 0xc8, 0xd1, 0x93, 0xf9, 0x3f,
	0x84, 0x0e, 0x25, 0x0e, 0x99, 0x30, 0x62, 0x26, 0x8e, 0x24, 0xcd, 0x76, 0xac, 0x88, 0xdd, 0xa0,
	0x4d, 0x58, 0x71, 0x3d, 0x63, 0x86, 0xd9, 0xe4, 0xbd, 0x1c, 0xaa, 0xff, 0x77, 0xbd, 0xe3, 0xe8,
	0x53, 0x7b, 0xca, 0xaf, 0x42, 0x1c, 0xe3, 0x6a, 0xe7, 0x73, 0xca, 0x27, 0x7e, 0xc1, 0x56, 0x32,
	0xfc, 0x2a, 0x7e, 0xdb, 0xc5, 0xc1, 0xec, 0x14, 0x0f, 0xc6, 0x9e, 0x11, 0x97, 0xda, 0x9e, 0x1b,
	0x5b, 0x0a, 0xbc, 0xa6, 0x03, 0x8a, 0x6f, 0xd6, 0x8b, 0x90, 0xfd, 0x27, 0x83, 0x57, 0x3b, 0xe6,
	0x37, 0x61, 0xee, 0x53, 0x72, 0xfc, 0x12, 0x04, 0xc6, 0x98, 0x84, 0x8b, 0xdf, 0x88, 0xc4, 0x6a,
	0x65, 0x2a, 0x7f, 0x8d, 0xff, 0x6e, 0x43, 0x8b, 0x73, 0x7e, 0x1d, 0x78, 0x13, 0x42, 0xa9, 0xed,
	0x5a, 0xe8, 0x47, 0x68, 0xa4, 0x96, 0x0b, 0xa4, 0xe5, 0xa7, 0x45, 0x71, 0x25, 0x52, 0xfb, 0x97,
	0x62, 0x04, 0x47, 0xed, 0x1a, 0x3a, 0x85, 0x66, 0x4a, 0x71, 0xa4, 0xbf, 0xaa, 0xe5, 0x7c, 0x2b,
	0x5e, 0x56, 0x52, 0xdb, 0xe1, 0xf0, 0x55, 0xbc, 0x1d, 0x6a, 0xd7, 0x22, 0xc2, 0xa9, 0xd5, 0xa3,
	0xe8, 0xb3, 0xb8, 0xc2, 0x14, 0x09, 0x97, 0xec, 0x2e, 0x82, 0x70, 0x4a, 0x51, 0x4a, 0xb8, 0xc4,
	0x79, 0x25, 0xe1, 0x9f, 0x61, 0x3d, 0x73, 0x19, 0xd0, 0xdd, 0xbc, 0xd7, 0xb2, 0xab, 0xac, 0xde,
	0xab, 0x40, 0x25, 0xb4, 0x7f, 0x82, 0x76, 0x46, 0x15, 0x11, 0xaf, 0x17, 0xa2, 0x92, 0xba, 0xcf,
	0xfb, 0x2f, 0xbf, 0xb3, 0xa0, 0xdd, 0x92, 0x27, 0x65, 0xc1, 0x06, 0xa5, 0x3e, 0xac, 0x85, 0x4d,
	0x92, 0x21, 0x70, 0xab, 0x04, 0x10, 0xa5, 0x74, 0x95, 0xa0, 0x95, 0x89, 0x9d, 0x02, 0xcc, 0x77,
	0x0f, 0xb4, 0x93, 0x77, 0x5d, 0x58, 0xa0, 0x54, 0xed, 0x32, 0x48, 0xc2, 0xfe, 0x04, 0xd6, 0xe7,
	0xf2, 0x88, 0x74, 0x0d, 0xcf, 0x95, 0x5c, 0xdf, 0xc1, 0x5a, 0xfa, 0x61, 0x43, 0xfd, 0x92, 0x42,
	0xe4, 0x1f, 0x4b, 0xf5, 0xee, 0xe5, 0xa0, 0x84, 0xf1, 0x0f, 0xd0, 0x4a, 0x6b, 0x22, 0xce, 0xb5,
	0xfc, 0x57, 0xb2, 0xb6, 0xa0, 0x9d, 0x7f, 0x05, 0xd1, 0xfd, 0x12, 0xcf, 0x65, 0x2f, 0xac, 0x3a,
	0xa8, 0x06, 0x26, 0x19, 0x18, 0xbc, 0x47, 0x33, 0xda, 0x28, 0x8b, 0xda, 0xb1, 0x2a, 0x33, 0x99,
	0xf1, 0xc1, 0x9e, 0x7b, 0x2f, 0xd0, 0x83, 0x12, 0xff, 0xe5, 0xef, 0x91, 0xba, 0x5b, 0x07, 0x9a,
	0xe4, 0x33, 0x81, 0x8d, 0xa2, 0x3e, 0xca, 0xe8, 0x0a, 0x11, 0xeb, 0x0c, 0xd1, 0xd4, 0xc3, 0x52,
	0x9c, 0x73, 0xc5, 0x97, 0x4c, 0xed, 0x5f, 0x8a, 0x49, 0x0f, 0xd1, 0x94, 0xa2, 0x74, 0x88, 0x96,
	0x38, 0xaf, 0xd3, 0x4e, 0xf9, 0xad, 0xbc, 0x78, 0xc4, 0x0b, 0x36, 0xfe, 0x62, 0x3b, 0x2d, 0x5a,
	0xf0, 0x45, 0x3b, 0xe5, 0xb5, 0xa5, 0xed, 0xb4, 0x28, 0x56, 0x65, 0x26, 0xbf, 0x40, 0xa7, 0xb0,
	0x81, 0xa3, 0x41, 0x8d, 0x25, 0x5d, 0xf8, 0x7f, 0x50, 0x7b, 0x9d, 0xd7, 0xae, 0x21, 0xcc, 0x77,
	0xe2, 0xac, 0x3a, 0xca, 0xa6, 0x7e, 0xb8, 0xaa, 0x74, 0xf6, 0xba, 0x6f, 0x3b, 0xe9, 0xbf, 0x58,
	0xb8, 0xbb, 0xb3, 0xff, 0xf1, 0x7f, 0x1a, 0xbe, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x5c,
	0x8c, 0x17, 0x28, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageProcessingClient is the client API for ImageProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageProcessingClient interface {
	// UploadImage uploads an image.
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	UploadImageLRO(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// DeskewImage deskews an uploaded base image.
	DeskewImage(ctx context.Context, in *DeskewImageRequest, opts ...grpc.CallOption) (*DeskewImageResponse, error)
	DeskewImageLRO(ctx context.Context, in *DeskewImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// RegisterImage finds the exemplar best matching a deskewed image then
	// register that image against the exemplar, i.e., manipulate the image
	// such that it lays cleanly over the exemplar.
	RegisterImage(ctx context.Context, in *RegisterImageRequest, opts ...grpc.CallOption) (*RegisterImageResponse, error)
	RegisterImageLRO(ctx context.Context, in *RegisterImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// GetExemplarSnapshot returns an exemplar snapshot of a registered image.
	GetExemplarSnapshot(ctx context.Context, in *GetExemplarSnapshotRequest, opts ...grpc.CallOption) (*GetExemplarSnapshotResponse, error)
	GetExemplarSnapshotLRO(ctx context.Context, in *GetExemplarSnapshotRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// SolveField solves a field on an image.
	SolveField(ctx context.Context, in *SolveFieldRequest, opts ...grpc.CallOption) (*SolveFieldResponse, error)
	SolveFieldLRO(ctx context.Context, in *SolveFieldRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// GetBaseImage returns a copy of the base uploaded image.
	GetBaseImage(ctx context.Context, in *GetBaseImageRequest, opts ...grpc.CallOption) (*GetBaseImageResponse, error)
	GetBaseImageLRO(ctx context.Context, in *GetBaseImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// GetDeskewedImage returns a copy of the deskewed image.
	GetDeskewedImage(ctx context.Context, in *GetDeskewedImageRequest, opts ...grpc.CallOption) (*GetDeskewedImageResponse, error)
	GetDeskewedImageLRO(ctx context.Context, in *GetDeskewedImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// GetRegisteredImage returns a copy of the exemplar-registered image.
	GetRegisteredImage(ctx context.Context, in *GetRegisteredImageRequest, opts ...grpc.CallOption) (*GetRegisteredImageResponse, error)
	GetRegisteredImageLRO(ctx context.Context, in *GetRegisteredImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// GetFieldCut gets a field cut from the exemplar-registered image.
	GetFieldCut(ctx context.Context, in *GetFieldCutRequest, opts ...grpc.CallOption) (*GetFieldCutResponse, error)
	GetFieldCutLRO(ctx context.Context, in *GetFieldCutRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// ListSolvedFields returns a list of fields which have solutions. It only
	// returns field identifiers.
	ListSolvedFields(ctx context.Context, in *ListSolvedFieldsRequest, opts ...grpc.CallOption) (*ListSolvedFieldsResponse, error)
	ListSolvedFieldsLRO(ctx context.Context, in *ListSolvedFieldsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// GetFieldSolutions queries for previously-solved field solutions. It
	// returns the full solutions.
	GetFieldSolutions(ctx context.Context, in *GetFieldSolutionsRequest, opts ...grpc.CallOption) (*GetFieldSolutionsResponse, error)
	GetFieldSolutionsLRO(ctx context.Context, in *GetFieldSolutionsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type imageProcessingClient struct {
	cc *grpc.ClientConn
}

func NewImageProcessingClient(cc *grpc.ClientConn) ImageProcessingClient {
	return &imageProcessingClient{cc}
}

func (c *imageProcessingClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) UploadImageLRO(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/UploadImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) DeskewImage(ctx context.Context, in *DeskewImageRequest, opts ...grpc.CallOption) (*DeskewImageResponse, error) {
	out := new(DeskewImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/DeskewImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) DeskewImageLRO(ctx context.Context, in *DeskewImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/DeskewImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) RegisterImage(ctx context.Context, in *RegisterImageRequest, opts ...grpc.CallOption) (*RegisterImageResponse, error) {
	out := new(RegisterImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/RegisterImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) RegisterImageLRO(ctx context.Context, in *RegisterImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/RegisterImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetExemplarSnapshot(ctx context.Context, in *GetExemplarSnapshotRequest, opts ...grpc.CallOption) (*GetExemplarSnapshotResponse, error) {
	out := new(GetExemplarSnapshotResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetExemplarSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetExemplarSnapshotLRO(ctx context.Context, in *GetExemplarSnapshotRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetExemplarSnapshotLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) SolveField(ctx context.Context, in *SolveFieldRequest, opts ...grpc.CallOption) (*SolveFieldResponse, error) {
	out := new(SolveFieldResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/SolveField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) SolveFieldLRO(ctx context.Context, in *SolveFieldRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/SolveFieldLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetBaseImage(ctx context.Context, in *GetBaseImageRequest, opts ...grpc.CallOption) (*GetBaseImageResponse, error) {
	out := new(GetBaseImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetBaseImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetBaseImageLRO(ctx context.Context, in *GetBaseImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetBaseImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetDeskewedImage(ctx context.Context, in *GetDeskewedImageRequest, opts ...grpc.CallOption) (*GetDeskewedImageResponse, error) {
	out := new(GetDeskewedImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetDeskewedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetDeskewedImageLRO(ctx context.Context, in *GetDeskewedImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetDeskewedImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetRegisteredImage(ctx context.Context, in *GetRegisteredImageRequest, opts ...grpc.CallOption) (*GetRegisteredImageResponse, error) {
	out := new(GetRegisteredImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetRegisteredImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetRegisteredImageLRO(ctx context.Context, in *GetRegisteredImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetRegisteredImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetFieldCut(ctx context.Context, in *GetFieldCutRequest, opts ...grpc.CallOption) (*GetFieldCutResponse, error) {
	out := new(GetFieldCutResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetFieldCut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetFieldCutLRO(ctx context.Context, in *GetFieldCutRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetFieldCutLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) ListSolvedFields(ctx context.Context, in *ListSolvedFieldsRequest, opts ...grpc.CallOption) (*ListSolvedFieldsResponse, error) {
	out := new(ListSolvedFieldsResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/ListSolvedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) ListSolvedFieldsLRO(ctx context.Context, in *ListSolvedFieldsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/ListSolvedFieldsLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetFieldSolutions(ctx context.Context, in *GetFieldSolutionsRequest, opts ...grpc.CallOption) (*GetFieldSolutionsResponse, error) {
	out := new(GetFieldSolutionsResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetFieldSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) GetFieldSolutionsLRO(ctx context.Context, in *GetFieldSolutionsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.image.ImageProcessing/GetFieldSolutionsLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessingServer is the server API for ImageProcessing service.
type ImageProcessingServer interface {
	// UploadImage uploads an image.
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	UploadImageLRO(context.Context, *UploadImageRequest) (*longrunning.Operation, error)
	// DeskewImage deskews an uploaded base image.
	DeskewImage(context.Context, *DeskewImageRequest) (*DeskewImageResponse, error)
	DeskewImageLRO(context.Context, *DeskewImageRequest) (*longrunning.Operation, error)
	// RegisterImage finds the exemplar best matching a deskewed image then
	// register that image against the exemplar, i.e., manipulate the image
	// such that it lays cleanly over the exemplar.
	RegisterImage(context.Context, *RegisterImageRequest) (*RegisterImageResponse, error)
	RegisterImageLRO(context.Context, *RegisterImageRequest) (*longrunning.Operation, error)
	// GetExemplarSnapshot returns an exemplar snapshot of a registered image.
	GetExemplarSnapshot(context.Context, *GetExemplarSnapshotRequest) (*GetExemplarSnapshotResponse, error)
	GetExemplarSnapshotLRO(context.Context, *GetExemplarSnapshotRequest) (*longrunning.Operation, error)
	// SolveField solves a field on an image.
	SolveField(context.Context, *SolveFieldRequest) (*SolveFieldResponse, error)
	SolveFieldLRO(context.Context, *SolveFieldRequest) (*longrunning.Operation, error)
	// GetBaseImage returns a copy of the base uploaded image.
	GetBaseImage(context.Context, *GetBaseImageRequest) (*GetBaseImageResponse, error)
	GetBaseImageLRO(context.Context, *GetBaseImageRequest) (*longrunning.Operation, error)
	// GetDeskewedImage returns a copy of the deskewed image.
	GetDeskewedImage(context.Context, *GetDeskewedImageRequest) (*GetDeskewedImageResponse, error)
	GetDeskewedImageLRO(context.Context, *GetDeskewedImageRequest) (*longrunning.Operation, error)
	// GetRegisteredImage returns a copy of the exemplar-registered image.
	GetRegisteredImage(context.Context, *GetRegisteredImageRequest) (*GetRegisteredImageResponse, error)
	GetRegisteredImageLRO(context.Context, *GetRegisteredImageRequest) (*longrunning.Operation, error)
	// GetFieldCut gets a field cut from the exemplar-registered image.
	GetFieldCut(context.Context, *GetFieldCutRequest) (*GetFieldCutResponse, error)
	GetFieldCutLRO(context.Context, *GetFieldCutRequest) (*longrunning.Operation, error)
	// ListSolvedFields returns a list of fields which have solutions. It only
	// returns field identifiers.
	ListSolvedFields(context.Context, *ListSolvedFieldsRequest) (*ListSolvedFieldsResponse, error)
	ListSolvedFieldsLRO(context.Context, *ListSolvedFieldsRequest) (*longrunning.Operation, error)
	// GetFieldSolutions queries for previously-solved field solutions. It
	// returns the full solutions.
	GetFieldSolutions(context.Context, *GetFieldSolutionsRequest) (*GetFieldSolutionsResponse, error)
	GetFieldSolutionsLRO(context.Context, *GetFieldSolutionsRequest) (*longrunning.Operation, error)
}

// UnimplementedImageProcessingServer can be embedded to have forward compatible implementations.
type UnimplementedImageProcessingServer struct {
}

func (*UnimplementedImageProcessingServer) UploadImage(ctx context.Context, req *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedImageProcessingServer) UploadImageLRO(ctx context.Context, req *UploadImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageLRO not implemented")
}
func (*UnimplementedImageProcessingServer) DeskewImage(ctx context.Context, req *DeskewImageRequest) (*DeskewImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeskewImage not implemented")
}
func (*UnimplementedImageProcessingServer) DeskewImageLRO(ctx context.Context, req *DeskewImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeskewImageLRO not implemented")
}
func (*UnimplementedImageProcessingServer) RegisterImage(ctx context.Context, req *RegisterImageRequest) (*RegisterImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterImage not implemented")
}
func (*UnimplementedImageProcessingServer) RegisterImageLRO(ctx context.Context, req *RegisterImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterImageLRO not implemented")
}
func (*UnimplementedImageProcessingServer) GetExemplarSnapshot(ctx context.Context, req *GetExemplarSnapshotRequest) (*GetExemplarSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExemplarSnapshot not implemented")
}
func (*UnimplementedImageProcessingServer) GetExemplarSnapshotLRO(ctx context.Context, req *GetExemplarSnapshotRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExemplarSnapshotLRO not implemented")
}
func (*UnimplementedImageProcessingServer) SolveField(ctx context.Context, req *SolveFieldRequest) (*SolveFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveField not implemented")
}
func (*UnimplementedImageProcessingServer) SolveFieldLRO(ctx context.Context, req *SolveFieldRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveFieldLRO not implemented")
}
func (*UnimplementedImageProcessingServer) GetBaseImage(ctx context.Context, req *GetBaseImageRequest) (*GetBaseImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseImage not implemented")
}
func (*UnimplementedImageProcessingServer) GetBaseImageLRO(ctx context.Context, req *GetBaseImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseImageLRO not implemented")
}
func (*UnimplementedImageProcessingServer) GetDeskewedImage(ctx context.Context, req *GetDeskewedImageRequest) (*GetDeskewedImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeskewedImage not implemented")
}
func (*UnimplementedImageProcessingServer) GetDeskewedImageLRO(ctx context.Context, req *GetDeskewedImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeskewedImageLRO not implemented")
}
func (*UnimplementedImageProcessingServer) GetRegisteredImage(ctx context.Context, req *GetRegisteredImageRequest) (*GetRegisteredImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredImage not implemented")
}
func (*UnimplementedImageProcessingServer) GetRegisteredImageLRO(ctx context.Context, req *GetRegisteredImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredImageLRO not implemented")
}
func (*UnimplementedImageProcessingServer) GetFieldCut(ctx context.Context, req *GetFieldCutRequest) (*GetFieldCutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldCut not implemented")
}
func (*UnimplementedImageProcessingServer) GetFieldCutLRO(ctx context.Context, req *GetFieldCutRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldCutLRO not implemented")
}
func (*UnimplementedImageProcessingServer) ListSolvedFields(ctx context.Context, req *ListSolvedFieldsRequest) (*ListSolvedFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolvedFields not implemented")
}
func (*UnimplementedImageProcessingServer) ListSolvedFieldsLRO(ctx context.Context, req *ListSolvedFieldsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolvedFieldsLRO not implemented")
}
func (*UnimplementedImageProcessingServer) GetFieldSolutions(ctx context.Context, req *GetFieldSolutionsRequest) (*GetFieldSolutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldSolutions not implemented")
}
func (*UnimplementedImageProcessingServer) GetFieldSolutionsLRO(ctx context.Context, req *GetFieldSolutionsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldSolutionsLRO not implemented")
}

func RegisterImageProcessingServer(s *grpc.Server, srv ImageProcessingServer) {
	s.RegisterService(&_ImageProcessing_serviceDesc, srv)
}

func _ImageProcessing_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_UploadImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).UploadImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/UploadImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).UploadImageLRO(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_DeskewImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeskewImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).DeskewImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/DeskewImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).DeskewImage(ctx, req.(*DeskewImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_DeskewImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeskewImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).DeskewImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/DeskewImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).DeskewImageLRO(ctx, req.(*DeskewImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_RegisterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).RegisterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/RegisterImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).RegisterImage(ctx, req.(*RegisterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_RegisterImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).RegisterImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/RegisterImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).RegisterImageLRO(ctx, req.(*RegisterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetExemplarSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExemplarSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetExemplarSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetExemplarSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetExemplarSnapshot(ctx, req.(*GetExemplarSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetExemplarSnapshotLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExemplarSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetExemplarSnapshotLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetExemplarSnapshotLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetExemplarSnapshotLRO(ctx, req.(*GetExemplarSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_SolveField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).SolveField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/SolveField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).SolveField(ctx, req.(*SolveFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_SolveFieldLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).SolveFieldLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/SolveFieldLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).SolveFieldLRO(ctx, req.(*SolveFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetBaseImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetBaseImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetBaseImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetBaseImage(ctx, req.(*GetBaseImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetBaseImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetBaseImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetBaseImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetBaseImageLRO(ctx, req.(*GetBaseImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetDeskewedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeskewedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetDeskewedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetDeskewedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetDeskewedImage(ctx, req.(*GetDeskewedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetDeskewedImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeskewedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetDeskewedImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetDeskewedImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetDeskewedImageLRO(ctx, req.(*GetDeskewedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetRegisteredImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetRegisteredImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetRegisteredImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetRegisteredImage(ctx, req.(*GetRegisteredImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetRegisteredImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetRegisteredImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetRegisteredImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetRegisteredImageLRO(ctx, req.(*GetRegisteredImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetFieldCut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldCutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetFieldCut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetFieldCut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetFieldCut(ctx, req.(*GetFieldCutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetFieldCutLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldCutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetFieldCutLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetFieldCutLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetFieldCutLRO(ctx, req.(*GetFieldCutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_ListSolvedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolvedFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).ListSolvedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/ListSolvedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).ListSolvedFields(ctx, req.(*ListSolvedFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_ListSolvedFieldsLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolvedFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).ListSolvedFieldsLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/ListSolvedFieldsLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).ListSolvedFieldsLRO(ctx, req.(*ListSolvedFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetFieldSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetFieldSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetFieldSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetFieldSolutions(ctx, req.(*GetFieldSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_GetFieldSolutionsLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).GetFieldSolutionsLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.image.ImageProcessing/GetFieldSolutionsLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).GetFieldSolutionsLRO(ctx, req.(*GetFieldSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageProcessing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsys.api.image.ImageProcessing",
	HandlerType: (*ImageProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImageProcessing_UploadImage_Handler,
		},
		{
			MethodName: "UploadImageLRO",
			Handler:    _ImageProcessing_UploadImageLRO_Handler,
		},
		{
			MethodName: "DeskewImage",
			Handler:    _ImageProcessing_DeskewImage_Handler,
		},
		{
			MethodName: "DeskewImageLRO",
			Handler:    _ImageProcessing_DeskewImageLRO_Handler,
		},
		{
			MethodName: "RegisterImage",
			Handler:    _ImageProcessing_RegisterImage_Handler,
		},
		{
			MethodName: "RegisterImageLRO",
			Handler:    _ImageProcessing_RegisterImageLRO_Handler,
		},
		{
			MethodName: "GetExemplarSnapshot",
			Handler:    _ImageProcessing_GetExemplarSnapshot_Handler,
		},
		{
			MethodName: "GetExemplarSnapshotLRO",
			Handler:    _ImageProcessing_GetExemplarSnapshotLRO_Handler,
		},
		{
			MethodName: "SolveField",
			Handler:    _ImageProcessing_SolveField_Handler,
		},
		{
			MethodName: "SolveFieldLRO",
			Handler:    _ImageProcessing_SolveFieldLRO_Handler,
		},
		{
			MethodName: "GetBaseImage",
			Handler:    _ImageProcessing_GetBaseImage_Handler,
		},
		{
			MethodName: "GetBaseImageLRO",
			Handler:    _ImageProcessing_GetBaseImageLRO_Handler,
		},
		{
			MethodName: "GetDeskewedImage",
			Handler:    _ImageProcessing_GetDeskewedImage_Handler,
		},
		{
			MethodName: "GetDeskewedImageLRO",
			Handler:    _ImageProcessing_GetDeskewedImageLRO_Handler,
		},
		{
			MethodName: "GetRegisteredImage",
			Handler:    _ImageProcessing_GetRegisteredImage_Handler,
		},
		{
			MethodName: "GetRegisteredImageLRO",
			Handler:    _ImageProcessing_GetRegisteredImageLRO_Handler,
		},
		{
			MethodName: "GetFieldCut",
			Handler:    _ImageProcessing_GetFieldCut_Handler,
		},
		{
			MethodName: "GetFieldCutLRO",
			Handler:    _ImageProcessing_GetFieldCutLRO_Handler,
		},
		{
			MethodName: "ListSolvedFields",
			Handler:    _ImageProcessing_ListSolvedFields_Handler,
		},
		{
			MethodName: "ListSolvedFieldsLRO",
			Handler:    _ImageProcessing_ListSolvedFieldsLRO_Handler,
		},
		{
			MethodName: "GetFieldSolutions",
			Handler:    _ImageProcessing_GetFieldSolutions_Handler,
		},
		{
			MethodName: "GetFieldSolutionsLRO",
			Handler:    _ImageProcessing_GetFieldSolutionsLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image.proto",
}
