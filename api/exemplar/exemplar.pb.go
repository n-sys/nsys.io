// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exemplar.proto

package exemplar

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	ntypes "nsys.io/api/ntypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadPdfRequest struct {
	// Client-assigned identifier for the PDF file being uploaded. Must match the
	// regex '^[0-9A-Za-z.-]{1,48}$' and must not collide with other unexpired PDFs.
	// If not supplied, a satisfactory name is automatically generated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Only the page numbers listed here will be rendered and made available for
	// later registration as a form exemplar. If no pages are listed, all pages will
	// be rendered and be made available.  The first page is page 1, not page 0.
	PageNumbers []int32 `protobuf:"varint,2,rep,packed,name=page_numbers,json=pageNumbers,proto3" json:"page_numbers,omitempty"`
	// The actual PDF data.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// The dominant language of the pdf.
	Language             ntypes.Language `protobuf:"varint,4,opt,name=language,proto3,enum=nsys.api.ntypes.Language" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UploadPdfRequest) Reset()         { *m = UploadPdfRequest{} }
func (m *UploadPdfRequest) String() string { return proto.CompactTextString(m) }
func (*UploadPdfRequest) ProtoMessage()    {}
func (*UploadPdfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{0}
}

func (m *UploadPdfRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadPdfRequest.Unmarshal(m, b)
}
func (m *UploadPdfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadPdfRequest.Marshal(b, m, deterministic)
}
func (m *UploadPdfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPdfRequest.Merge(m, src)
}
func (m *UploadPdfRequest) XXX_Size() int {
	return xxx_messageInfo_UploadPdfRequest.Size(m)
}
func (m *UploadPdfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPdfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPdfRequest proto.InternalMessageInfo

func (m *UploadPdfRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadPdfRequest) GetPageNumbers() []int32 {
	if m != nil {
		return m.PageNumbers
	}
	return nil
}

func (m *UploadPdfRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadPdfRequest) GetLanguage() ntypes.Language {
	if m != nil {
		return m.Language
	}
	return ntypes.Language_UNKNOWN
}

type UploadPdfResponse struct {
	// The specified or generated name for the PDF.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Info on all of the processed pages. Guaranteed to be in increasing page order.
	// The returned pages do NOT include the image data.
	ProcessedPages []*ntypes.PdfPage `protobuf:"bytes,2,rep,name=processed_pages,json=processedPages,proto3" json:"processed_pages,omitempty"`
	// The expiration time of the PDF. If pages from the PDF have not been registered
	// as an exemplar prior to this time, they are forgotten. However, once a page
	// has been registered, it becomes a permanent part of the exemplar.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadPdfResponse) Reset()         { *m = UploadPdfResponse{} }
func (m *UploadPdfResponse) String() string { return proto.CompactTextString(m) }
func (*UploadPdfResponse) ProtoMessage()    {}
func (*UploadPdfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{1}
}

func (m *UploadPdfResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadPdfResponse.Unmarshal(m, b)
}
func (m *UploadPdfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadPdfResponse.Marshal(b, m, deterministic)
}
func (m *UploadPdfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPdfResponse.Merge(m, src)
}
func (m *UploadPdfResponse) XXX_Size() int {
	return xxx_messageInfo_UploadPdfResponse.Size(m)
}
func (m *UploadPdfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPdfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPdfResponse proto.InternalMessageInfo

func (m *UploadPdfResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadPdfResponse) GetProcessedPages() []*ntypes.PdfPage {
	if m != nil {
		return m.ProcessedPages
	}
	return nil
}

func (m *UploadPdfResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type GetPdfPageRequest struct {
	// The name of the PDF to get.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The page number to get (first page is 1).
	PageNumber           int32    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPdfPageRequest) Reset()         { *m = GetPdfPageRequest{} }
func (m *GetPdfPageRequest) String() string { return proto.CompactTextString(m) }
func (*GetPdfPageRequest) ProtoMessage()    {}
func (*GetPdfPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{2}
}

func (m *GetPdfPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPdfPageRequest.Unmarshal(m, b)
}
func (m *GetPdfPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPdfPageRequest.Marshal(b, m, deterministic)
}
func (m *GetPdfPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPdfPageRequest.Merge(m, src)
}
func (m *GetPdfPageRequest) XXX_Size() int {
	return xxx_messageInfo_GetPdfPageRequest.Size(m)
}
func (m *GetPdfPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPdfPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPdfPageRequest proto.InternalMessageInfo

func (m *GetPdfPageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPdfPageRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

type GetPdfPageResponse struct {
	// The returned page.
	Page                 *ntypes.PdfPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetPdfPageResponse) Reset()         { *m = GetPdfPageResponse{} }
func (m *GetPdfPageResponse) String() string { return proto.CompactTextString(m) }
func (*GetPdfPageResponse) ProtoMessage()    {}
func (*GetPdfPageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{3}
}

func (m *GetPdfPageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPdfPageResponse.Unmarshal(m, b)
}
func (m *GetPdfPageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPdfPageResponse.Marshal(b, m, deterministic)
}
func (m *GetPdfPageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPdfPageResponse.Merge(m, src)
}
func (m *GetPdfPageResponse) XXX_Size() int {
	return xxx_messageInfo_GetPdfPageResponse.Size(m)
}
func (m *GetPdfPageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPdfPageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPdfPageResponse proto.InternalMessageInfo

func (m *GetPdfPageResponse) GetPage() *ntypes.PdfPage {
	if m != nil {
		return m.Page
	}
	return nil
}

type CreateExemplarRequest struct {
	// The name of the exemplar .. aka the form name or Id. Must be unique
	// within the account and must also match the regex '^[0-9A-Za-z.-]{1,48}$'.
	// If not supplied, a satisfactory name is automatically generated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// For client use.  Optional.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Any metadata of the client's choosing. Limit to a few KB. Optional.
	Metadata *any.Any `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The name of an uploaded PDF or uploaded dimensioned image.
	ImageOrPdfName string `protobuf:"bytes,4,opt,name=image_or_pdf_name,json=imageOrPdfName,proto3" json:"image_or_pdf_name,omitempty"`
	// If registering a page within a PDF, the 1-based page number within the PDF
	// to be used as the exemplar. The page must have been designated as being a
	// page of interest during the original PDF upload. Do not set if creating an
	// exemplar from an image.
	PageNumber int32 `protobuf:"varint,5,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// The dominant printed language.
	Language             ntypes.Language `protobuf:"varint,6,opt,name=language,proto3,enum=nsys.api.ntypes.Language" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateExemplarRequest) Reset()         { *m = CreateExemplarRequest{} }
func (m *CreateExemplarRequest) String() string { return proto.CompactTextString(m) }
func (*CreateExemplarRequest) ProtoMessage()    {}
func (*CreateExemplarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{4}
}

func (m *CreateExemplarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateExemplarRequest.Unmarshal(m, b)
}
func (m *CreateExemplarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateExemplarRequest.Marshal(b, m, deterministic)
}
func (m *CreateExemplarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExemplarRequest.Merge(m, src)
}
func (m *CreateExemplarRequest) XXX_Size() int {
	return xxx_messageInfo_CreateExemplarRequest.Size(m)
}
func (m *CreateExemplarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExemplarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExemplarRequest proto.InternalMessageInfo

func (m *CreateExemplarRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateExemplarRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateExemplarRequest) GetMetadata() *any.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateExemplarRequest) GetImageOrPdfName() string {
	if m != nil {
		return m.ImageOrPdfName
	}
	return ""
}

func (m *CreateExemplarRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *CreateExemplarRequest) GetLanguage() ntypes.Language {
	if m != nil {
		return m.Language
	}
	return ntypes.Language_UNKNOWN
}

type CreateExemplarResponse struct {
	// The specified or generated identifier for the exemplar.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateExemplarResponse) Reset()         { *m = CreateExemplarResponse{} }
func (m *CreateExemplarResponse) String() string { return proto.CompactTextString(m) }
func (*CreateExemplarResponse) ProtoMessage()    {}
func (*CreateExemplarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{5}
}

func (m *CreateExemplarResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateExemplarResponse.Unmarshal(m, b)
}
func (m *CreateExemplarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateExemplarResponse.Marshal(b, m, deterministic)
}
func (m *CreateExemplarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExemplarResponse.Merge(m, src)
}
func (m *CreateExemplarResponse) XXX_Size() int {
	return xxx_messageInfo_CreateExemplarResponse.Size(m)
}
func (m *CreateExemplarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExemplarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExemplarResponse proto.InternalMessageInfo

func (m *CreateExemplarResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UploadDimensionedImageRequest struct {
	// Ideally, this image started as a page in a native PDF and was exported by Acrobat
	// or equiv as an exact image of what is printed. If instead it is based on a scan of
	// a printed form, make sure the fully deskewed and is as clean as possible.
	Name                 string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image                *ntypes.DimensionedImage `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *UploadDimensionedImageRequest) Reset()         { *m = UploadDimensionedImageRequest{} }
func (m *UploadDimensionedImageRequest) String() string { return proto.CompactTextString(m) }
func (*UploadDimensionedImageRequest) ProtoMessage()    {}
func (*UploadDimensionedImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{6}
}

func (m *UploadDimensionedImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadDimensionedImageRequest.Unmarshal(m, b)
}
func (m *UploadDimensionedImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadDimensionedImageRequest.Marshal(b, m, deterministic)
}
func (m *UploadDimensionedImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadDimensionedImageRequest.Merge(m, src)
}
func (m *UploadDimensionedImageRequest) XXX_Size() int {
	return xxx_messageInfo_UploadDimensionedImageRequest.Size(m)
}
func (m *UploadDimensionedImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadDimensionedImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadDimensionedImageRequest proto.InternalMessageInfo

func (m *UploadDimensionedImageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadDimensionedImageRequest) GetImage() *ntypes.DimensionedImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type UploadDimensionedImageResponse struct {
	// The supplied or generated name the uploaded dimensioned image.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The expiration time of the image. If the image has not been registered
	// as an exemplar prior to this time, it is forgotten. However, once an image
	// has been registered, it becomes a permanent part of the exemplar.
	ExpireTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadDimensionedImageResponse) Reset()         { *m = UploadDimensionedImageResponse{} }
func (m *UploadDimensionedImageResponse) String() string { return proto.CompactTextString(m) }
func (*UploadDimensionedImageResponse) ProtoMessage()    {}
func (*UploadDimensionedImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{7}
}

func (m *UploadDimensionedImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadDimensionedImageResponse.Unmarshal(m, b)
}
func (m *UploadDimensionedImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadDimensionedImageResponse.Marshal(b, m, deterministic)
}
func (m *UploadDimensionedImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadDimensionedImageResponse.Merge(m, src)
}
func (m *UploadDimensionedImageResponse) XXX_Size() int {
	return xxx_messageInfo_UploadDimensionedImageResponse.Size(m)
}
func (m *UploadDimensionedImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadDimensionedImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadDimensionedImageResponse proto.InternalMessageInfo

func (m *UploadDimensionedImageResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadDimensionedImageResponse) GetExpireTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

type GetExemplarRequest struct {
	// Return the specified exemplar.
	ExemplarName string `protobuf:"bytes,1,opt,name=exemplar_name,json=exemplarName,proto3" json:"exemplar_name,omitempty"`
	// Set true if the returned exemplar is to include the full image data.
	IncludeImage         bool     `protobuf:"varint,2,opt,name=include_image,json=includeImage,proto3" json:"include_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetExemplarRequest) Reset()         { *m = GetExemplarRequest{} }
func (m *GetExemplarRequest) String() string { return proto.CompactTextString(m) }
func (*GetExemplarRequest) ProtoMessage()    {}
func (*GetExemplarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{8}
}

func (m *GetExemplarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetExemplarRequest.Unmarshal(m, b)
}
func (m *GetExemplarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetExemplarRequest.Marshal(b, m, deterministic)
}
func (m *GetExemplarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExemplarRequest.Merge(m, src)
}
func (m *GetExemplarRequest) XXX_Size() int {
	return xxx_messageInfo_GetExemplarRequest.Size(m)
}
func (m *GetExemplarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExemplarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExemplarRequest proto.InternalMessageInfo

func (m *GetExemplarRequest) GetExemplarName() string {
	if m != nil {
		return m.ExemplarName
	}
	return ""
}

func (m *GetExemplarRequest) GetIncludeImage() bool {
	if m != nil {
		return m.IncludeImage
	}
	return false
}

type GetExemplarResponse struct {
	Exemplar             *ntypes.Exemplar `protobuf:"bytes,1,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetExemplarResponse) Reset()         { *m = GetExemplarResponse{} }
func (m *GetExemplarResponse) String() string { return proto.CompactTextString(m) }
func (*GetExemplarResponse) ProtoMessage()    {}
func (*GetExemplarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{9}
}

func (m *GetExemplarResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetExemplarResponse.Unmarshal(m, b)
}
func (m *GetExemplarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetExemplarResponse.Marshal(b, m, deterministic)
}
func (m *GetExemplarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExemplarResponse.Merge(m, src)
}
func (m *GetExemplarResponse) XXX_Size() int {
	return xxx_messageInfo_GetExemplarResponse.Size(m)
}
func (m *GetExemplarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExemplarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExemplarResponse proto.InternalMessageInfo

func (m *GetExemplarResponse) GetExemplar() *ntypes.Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

type ListExemplarsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListExemplarsRequest) Reset()         { *m = ListExemplarsRequest{} }
func (m *ListExemplarsRequest) String() string { return proto.CompactTextString(m) }
func (*ListExemplarsRequest) ProtoMessage()    {}
func (*ListExemplarsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{10}
}

func (m *ListExemplarsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListExemplarsRequest.Unmarshal(m, b)
}
func (m *ListExemplarsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListExemplarsRequest.Marshal(b, m, deterministic)
}
func (m *ListExemplarsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExemplarsRequest.Merge(m, src)
}
func (m *ListExemplarsRequest) XXX_Size() int {
	return xxx_messageInfo_ListExemplarsRequest.Size(m)
}
func (m *ListExemplarsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExemplarsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListExemplarsRequest proto.InternalMessageInfo

type ListExemplarsResponse struct {
	// The returned exemplars do not include the image data.
	Exemplars            []*ntypes.Exemplar `protobuf:"bytes,1,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListExemplarsResponse) Reset()         { *m = ListExemplarsResponse{} }
func (m *ListExemplarsResponse) String() string { return proto.CompactTextString(m) }
func (*ListExemplarsResponse) ProtoMessage()    {}
func (*ListExemplarsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{11}
}

func (m *ListExemplarsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListExemplarsResponse.Unmarshal(m, b)
}
func (m *ListExemplarsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListExemplarsResponse.Marshal(b, m, deterministic)
}
func (m *ListExemplarsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExemplarsResponse.Merge(m, src)
}
func (m *ListExemplarsResponse) XXX_Size() int {
	return xxx_messageInfo_ListExemplarsResponse.Size(m)
}
func (m *ListExemplarsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExemplarsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListExemplarsResponse proto.InternalMessageInfo

func (m *ListExemplarsResponse) GetExemplars() []*ntypes.Exemplar {
	if m != nil {
		return m.Exemplars
	}
	return nil
}

type DeleteExemplarRequest struct {
	// The name of the exemplar to delete.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteExemplarRequest) Reset()         { *m = DeleteExemplarRequest{} }
func (m *DeleteExemplarRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteExemplarRequest) ProtoMessage()    {}
func (*DeleteExemplarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{12}
}

func (m *DeleteExemplarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteExemplarRequest.Unmarshal(m, b)
}
func (m *DeleteExemplarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteExemplarRequest.Marshal(b, m, deterministic)
}
func (m *DeleteExemplarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExemplarRequest.Merge(m, src)
}
func (m *DeleteExemplarRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteExemplarRequest.Size(m)
}
func (m *DeleteExemplarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExemplarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExemplarRequest proto.InternalMessageInfo

func (m *DeleteExemplarRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateFieldRequest struct {
	// The identifier for the exemplar that the field is being defined in.
	ExemplarName string `protobuf:"bytes,1,opt,name=exemplar_name,json=exemplarName,proto3" json:"exemplar_name,omitempty"`
	// The actual field definition. If the field definition contains no name,
	// a satisfactory name is automatically generated and returned in the
	// response.
	Field                *ntypes.Field `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateFieldRequest) Reset()         { *m = CreateFieldRequest{} }
func (m *CreateFieldRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFieldRequest) ProtoMessage()    {}
func (*CreateFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{13}
}

func (m *CreateFieldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFieldRequest.Unmarshal(m, b)
}
func (m *CreateFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFieldRequest.Marshal(b, m, deterministic)
}
func (m *CreateFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFieldRequest.Merge(m, src)
}
func (m *CreateFieldRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFieldRequest.Size(m)
}
func (m *CreateFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFieldRequest proto.InternalMessageInfo

func (m *CreateFieldRequest) GetExemplarName() string {
	if m != nil {
		return m.ExemplarName
	}
	return ""
}

func (m *CreateFieldRequest) GetField() *ntypes.Field {
	if m != nil {
		return m.Field
	}
	return nil
}

type CreateFieldResponse struct {
	ExemplarName         string   `protobuf:"bytes,1,opt,name=exemplar_name,json=exemplarName,proto3" json:"exemplar_name,omitempty"`
	FieldName            string   `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateFieldResponse) Reset()         { *m = CreateFieldResponse{} }
func (m *CreateFieldResponse) String() string { return proto.CompactTextString(m) }
func (*CreateFieldResponse) ProtoMessage()    {}
func (*CreateFieldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{14}
}

func (m *CreateFieldResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFieldResponse.Unmarshal(m, b)
}
func (m *CreateFieldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFieldResponse.Marshal(b, m, deterministic)
}
func (m *CreateFieldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFieldResponse.Merge(m, src)
}
func (m *CreateFieldResponse) XXX_Size() int {
	return xxx_messageInfo_CreateFieldResponse.Size(m)
}
func (m *CreateFieldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFieldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFieldResponse proto.InternalMessageInfo

func (m *CreateFieldResponse) GetExemplarName() string {
	if m != nil {
		return m.ExemplarName
	}
	return ""
}

func (m *CreateFieldResponse) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

type DeleteFieldRequest struct {
	// The identifier for the exemplar that the field is defined in.
	ExemplarName string `protobuf:"bytes,1,opt,name=exemplar_name,json=exemplarName,proto3" json:"exemplar_name,omitempty"`
	// The identifier for the field within the exemplar.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteFieldRequest) Reset()         { *m = DeleteFieldRequest{} }
func (m *DeleteFieldRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFieldRequest) ProtoMessage()    {}
func (*DeleteFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{15}
}

func (m *DeleteFieldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteFieldRequest.Unmarshal(m, b)
}
func (m *DeleteFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteFieldRequest.Marshal(b, m, deterministic)
}
func (m *DeleteFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFieldRequest.Merge(m, src)
}
func (m *DeleteFieldRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteFieldRequest.Size(m)
}
func (m *DeleteFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFieldRequest proto.InternalMessageInfo

func (m *DeleteFieldRequest) GetExemplarName() string {
	if m != nil {
		return m.ExemplarName
	}
	return ""
}

func (m *DeleteFieldRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListFieldsRequest struct {
	// The identifier for the exemplar that the fields of interest are in.
	ExemplarName         string   `protobuf:"bytes,1,opt,name=exemplar_name,json=exemplarName,proto3" json:"exemplar_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFieldsRequest) Reset()         { *m = ListFieldsRequest{} }
func (m *ListFieldsRequest) String() string { return proto.CompactTextString(m) }
func (*ListFieldsRequest) ProtoMessage()    {}
func (*ListFieldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{16}
}

func (m *ListFieldsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFieldsRequest.Unmarshal(m, b)
}
func (m *ListFieldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFieldsRequest.Marshal(b, m, deterministic)
}
func (m *ListFieldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFieldsRequest.Merge(m, src)
}
func (m *ListFieldsRequest) XXX_Size() int {
	return xxx_messageInfo_ListFieldsRequest.Size(m)
}
func (m *ListFieldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFieldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFieldsRequest proto.InternalMessageInfo

func (m *ListFieldsRequest) GetExemplarName() string {
	if m != nil {
		return m.ExemplarName
	}
	return ""
}

type ListFieldsResponse struct {
	Fields               []*ntypes.Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListFieldsResponse) Reset()         { *m = ListFieldsResponse{} }
func (m *ListFieldsResponse) String() string { return proto.CompactTextString(m) }
func (*ListFieldsResponse) ProtoMessage()    {}
func (*ListFieldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42415567922a705a, []int{17}
}

func (m *ListFieldsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFieldsResponse.Unmarshal(m, b)
}
func (m *ListFieldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFieldsResponse.Marshal(b, m, deterministic)
}
func (m *ListFieldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFieldsResponse.Merge(m, src)
}
func (m *ListFieldsResponse) XXX_Size() int {
	return xxx_messageInfo_ListFieldsResponse.Size(m)
}
func (m *ListFieldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFieldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFieldsResponse proto.InternalMessageInfo

func (m *ListFieldsResponse) GetFields() []*ntypes.Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadPdfRequest)(nil), "nsys.api.exemplar.UploadPdfRequest")
	proto.RegisterType((*UploadPdfResponse)(nil), "nsys.api.exemplar.UploadPdfResponse")
	proto.RegisterType((*GetPdfPageRequest)(nil), "nsys.api.exemplar.GetPdfPageRequest")
	proto.RegisterType((*GetPdfPageResponse)(nil), "nsys.api.exemplar.GetPdfPageResponse")
	proto.RegisterType((*CreateExemplarRequest)(nil), "nsys.api.exemplar.CreateExemplarRequest")
	proto.RegisterType((*CreateExemplarResponse)(nil), "nsys.api.exemplar.CreateExemplarResponse")
	proto.RegisterType((*UploadDimensionedImageRequest)(nil), "nsys.api.exemplar.UploadDimensionedImageRequest")
	proto.RegisterType((*UploadDimensionedImageResponse)(nil), "nsys.api.exemplar.UploadDimensionedImageResponse")
	proto.RegisterType((*GetExemplarRequest)(nil), "nsys.api.exemplar.GetExemplarRequest")
	proto.RegisterType((*GetExemplarResponse)(nil), "nsys.api.exemplar.GetExemplarResponse")
	proto.RegisterType((*ListExemplarsRequest)(nil), "nsys.api.exemplar.ListExemplarsRequest")
	proto.RegisterType((*ListExemplarsResponse)(nil), "nsys.api.exemplar.ListExemplarsResponse")
	proto.RegisterType((*DeleteExemplarRequest)(nil), "nsys.api.exemplar.DeleteExemplarRequest")
	proto.RegisterType((*CreateFieldRequest)(nil), "nsys.api.exemplar.CreateFieldRequest")
	proto.RegisterType((*CreateFieldResponse)(nil), "nsys.api.exemplar.CreateFieldResponse")
	proto.RegisterType((*DeleteFieldRequest)(nil), "nsys.api.exemplar.DeleteFieldRequest")
	proto.RegisterType((*ListFieldsRequest)(nil), "nsys.api.exemplar.ListFieldsRequest")
	proto.RegisterType((*ListFieldsResponse)(nil), "nsys.api.exemplar.ListFieldsResponse")
}

func init() { proto.RegisterFile("exemplar.proto", fileDescriptor_42415567922a705a) }

var fileDescriptor_42415567922a705a = []byte{
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xd9, 0x6e, 0xdb, 0x46,
	0x17, 0x8e, 0x14, 0xcb, 0xb0, 0x0e, 0x65, 0xfd, 0xd1, 0xc4, 0x16, 0x64, 0xfe, 0x70, 0x22, 0xd3,
	0x4d, 0xab, 0xa0, 0x06, 0x95, 0xaa, 0x08, 0x52, 0xa0, 0x57, 0x49, 0x9d, 0x2e, 0x80, 0x6b, 0x0b,
	0x84, 0x5b, 0xb8, 0x0b, 0x2c, 0xd0, 0xe6, 0x88, 0x20, 0xc0, 0x2d, 0x1c, 0x0a, 0x88, 0xaf, 0x0a,
	0xf4, 0x19, 0xfa, 0x0e, 0x7d, 0xc4, 0xde, 0x16, 0xb3, 0x70, 0x13, 0x47, 0x24, 0xd5, 0x3b, 0xe9,
	0x9c, 0x6f, 0xbe, 0xf3, 0x9d, 0x65, 0xe6, 0x48, 0xd0, 0xc7, 0x1f, 0xb1, 0x17, 0xba, 0x66, 0xa4,
	0x87, 0x51, 0x10, 0x07, 0x68, 0xe0, 0x93, 0x07, 0xa2, 0x9b, 0xa1, 0xa3, 0x27, 0x0e, 0xf5, 0xd4,
	0x0e, 0x02, 0xdb, 0xc5, 0x53, 0x37, 0xf0, 0xed, 0x68, 0xe5, 0xfb, 0x8e, 0x6f, 0x4f, 0x83, 0x10,
	0x47, 0x66, 0xec, 0x04, 0x3e, 0xe1, 0xe7, 0xd4, 0xff, 0x0b, 0x10, 0xfb, 0x76, 0xb7, 0x5a, 0x4e,
	0xb1, 0x17, 0xc6, 0x0f, 0xc2, 0xf9, 0x7c, 0xdd, 0x19, 0x3b, 0x1e, 0x26, 0xb1, 0xe9, 0x85, 0x02,
	0x70, 0xb4, 0x0e, 0x30, 0xfd, 0xe4, 0xec, 0x33, 0x26, 0xc8, 0x09, 0xa6, 0x66, 0xe8, 0x4c, 0xfd,
	0xf8, 0x21, 0xc4, 0x64, 0xba, 0x74, 0xb0, 0x6b, 0x09, 0xff, 0x89, 0xc4, 0x6f, 0xe3, 0xc0, 0xc3,
	0x71, 0x94, 0x50, 0xbc, 0x90, 0x40, 0x1c, 0xcf, 0xb4, 0xf1, 0x82, 0x7f, 0x11, 0xb0, 0x89, 0x04,
	0x96, 0x14, 0xa1, 0x80, 0xd4, 0xfe, 0x6a, 0xc1, 0x93, 0x9f, 0x42, 0x37, 0x30, 0xad, 0xb9, 0xb5,
	0x34, 0xf0, 0x87, 0x15, 0x26, 0x31, 0x42, 0xb0, 0xe3, 0x9b, 0x1e, 0x1e, 0xb5, 0xc6, 0xad, 0x49,
	0xd7, 0x60, 0x9f, 0xd1, 0x09, 0xf4, 0x42, 0x16, 0x67, 0xe5, 0xdd, 0xe1, 0x88, 0x8c, 0xda, 0xe3,
	0xc7, 0x93, 0x8e, 0xa1, 0x50, 0xdb, 0x25, 0x37, 0xd1, 0x63, 0x96, 0x19, 0x9b, 0xa3, 0xc7, 0xe3,
	0xd6, 0xa4, 0x67, 0xb0, 0xcf, 0xe8, 0x35, 0xec, 0xb9, 0xa6, 0x6f, 0xaf, 0x4c, 0x1b, 0x8f, 0x76,
	0xc6, 0xad, 0x49, 0x7f, 0x76, 0xa4, 0xa7, 0x7d, 0x11, 0x4a, 0x2e, 0x04, 0xc0, 0x48, 0xa1, 0xda,
	0xdf, 0x2d, 0x18, 0xe4, 0x64, 0x91, 0x30, 0xf0, 0x09, 0x96, 0xea, 0x7a, 0x0b, 0xff, 0x0b, 0xa3,
	0xe0, 0x1e, 0x13, 0x82, 0xad, 0x05, 0x55, 0xc3, 0xa5, 0x29, 0xb3, 0x51, 0x29, 0xce, 0xdc, 0x5a,
	0xce, 0x69, 0x98, 0x7e, 0x7a, 0x80, 0x7e, 0x25, 0xe8, 0x6b, 0x50, 0xf0, 0xc7, 0xd0, 0x89, 0xf0,
	0x82, 0x36, 0x93, 0xc9, 0x57, 0x66, 0xaa, 0xce, 0x1b, 0xa9, 0x27, 0x8d, 0xd4, 0xaf, 0x93, 0x4e,
	0x1b, 0xc0, 0xe1, 0xd4, 0xa0, 0x7d, 0x0f, 0x83, 0xef, 0x70, 0x9c, 0x50, 0x57, 0x14, 0xf0, 0x39,
	0x28, 0xb9, 0x02, 0x8e, 0xda, 0xe3, 0xd6, 0xa4, 0x63, 0x40, 0x56, 0x3f, 0xed, 0x1d, 0xa0, 0x3c,
	0x93, 0xc8, 0xf9, 0x0c, 0x76, 0x28, 0x86, 0x51, 0x55, 0x25, 0xc5, 0x50, 0xda, 0x9f, 0x6d, 0x38,
	0xfc, 0x26, 0xc2, 0x66, 0x8c, 0xdf, 0x8b, 0x76, 0x57, 0x49, 0x1a, 0x83, 0x62, 0x61, 0x72, 0x1f,
	0x39, 0x21, 0x9d, 0x7f, 0x26, 0xa9, 0x6b, 0xe4, 0x4d, 0xe8, 0x15, 0xec, 0x79, 0x38, 0x36, 0xd3,
	0xb6, 0x2a, 0xb3, 0x83, 0x52, 0x5d, 0xde, 0xfa, 0x0f, 0x46, 0x8a, 0x42, 0x2f, 0x61, 0xc0, 0x07,
	0x32, 0x88, 0x16, 0xa1, 0xb5, 0x5c, 0xb0, 0xa0, 0x3b, 0x8c, 0xb9, 0xcf, 0x1c, 0x57, 0xd1, 0xdc,
	0x5a, 0x5e, 0x4a, 0x2a, 0xd2, 0x59, 0xaf, 0x48, 0x61, 0x78, 0x76, 0x9b, 0x0f, 0xcf, 0x19, 0x0c,
	0xd7, 0x6b, 0xb0, 0x79, 0x80, 0x34, 0x17, 0x8e, 0xf9, 0xa4, 0x9d, 0x3b, 0x1e, 0xf6, 0x89, 0x13,
	0xf8, 0xd8, 0xfa, 0xc1, 0xab, 0x69, 0xe6, 0x1b, 0xe8, 0xb0, 0x64, 0x58, 0xcd, 0x94, 0xd9, 0x49,
	0x49, 0x56, 0x89, 0x8c, 0xe3, 0xb5, 0x0f, 0xf0, 0x6c, 0x53, 0xb4, 0x8a, 0x21, 0x5f, 0x9b, 0xd0,
	0xf6, 0x56, 0x13, 0x7a, 0xcb, 0xe6, 0x6a, 0x7d, 0x1e, 0x4e, 0x61, 0x3f, 0x7b, 0x11, 0xb2, 0x78,
	0xbd, 0xc4, 0xc8, 0x3a, 0x74, 0x0a, 0xfb, 0x8e, 0x7f, 0xef, 0xae, 0x2c, 0xbc, 0xc8, 0xd2, 0xdd,
	0x33, 0x7a, 0xc2, 0xc8, 0x84, 0x6b, 0x17, 0xf0, 0xb4, 0xc0, 0x2f, 0xf2, 0x78, 0x0d, 0x7b, 0x09,
	0x97, 0x18, 0xde, 0x72, 0xf3, 0xd2, 0x43, 0x29, 0x54, 0x1b, 0xc2, 0xc1, 0x85, 0x43, 0x52, 0x3a,
	0x22, 0xf4, 0x6a, 0x73, 0x38, 0x5c, 0xb3, 0x8b, 0x38, 0x6f, 0xa0, 0x9b, 0x1c, 0x26, 0xa3, 0x16,
	0xbb, 0xfa, 0x15, 0x81, 0x32, 0xac, 0xf6, 0x39, 0x1c, 0x9e, 0x63, 0x17, 0x37, 0xba, 0x2a, 0x9a,
	0x0d, 0x88, 0xcf, 0xd4, 0xb7, 0xf4, 0xc1, 0xde, 0xaa, 0x88, 0x67, 0xd0, 0x61, 0xaf, 0xbc, 0x68,
	0xdb, 0xb0, 0x24, 0x8e, 0x53, 0x72, 0x90, 0xf6, 0x0b, 0x3c, 0x2d, 0x04, 0x12, 0x59, 0x36, 0x8a,
	0x74, 0x0c, 0xc0, 0x48, 0x38, 0x82, 0x5f, 0xe7, 0x2e, 0xb3, 0x50, 0xb7, 0xf6, 0x23, 0x20, 0x9e,
	0xf0, 0xf6, 0x39, 0x24, 0x25, 0x69, 0xe7, 0x4a, 0xf2, 0x15, 0x0c, 0x68, 0x47, 0x18, 0x19, 0xd9,
	0x86, 0x4d, 0x3b, 0x07, 0x94, 0x3f, 0x29, 0x52, 0xd4, 0x61, 0x97, 0x69, 0x4d, 0xba, 0xb8, 0xa9,
	0x50, 0x02, 0x35, 0xfb, 0xa7, 0x0f, 0xdd, 0x74, 0x1c, 0xd0, 0x1f, 0x30, 0x94, 0x5f, 0x2c, 0xf4,
	0x4a, 0x2f, 0xfd, 0x10, 0xd0, 0x2b, 0x6f, 0xbc, 0xfa, 0xc5, 0x16, 0x27, 0xb8, 0x78, 0xed, 0x11,
	0xf2, 0xe1, 0x48, 0x8e, 0xb9, 0x30, 0xae, 0xfe, 0x83, 0x86, 0xe3, 0xe4, 0x76, 0xe7, 0x7e, 0xab,
	0xe8, 0x57, 0xc9, 0x6f, 0x15, 0xed, 0x11, 0xba, 0x81, 0x6e, 0xba, 0x21, 0xd1, 0xe9, 0x46, 0xfe,
	0x6c, 0xad, 0xab, 0x9f, 0x54, 0x83, 0xd2, 0x4c, 0xae, 0xa1, 0x97, 0x9a, 0xa9, 0xf8, 0x46, 0xe4,
	0xb5, 0x7a, 0x7f, 0x03, 0xc8, 0xd6, 0x1b, 0x92, 0x69, 0x29, 0xed, 0x51, 0xf5, 0x45, 0x0d, 0x2a,
	0x95, 0xfc, 0x33, 0xec, 0x67, 0x76, 0xaa, 0xb9, 0x19, 0x7f, 0xad, 0x68, 0x1b, 0xfa, 0xc5, 0x55,
	0x82, 0x26, 0x12, 0x62, 0xe9, 0xc6, 0x55, 0x5f, 0x36, 0x40, 0xa6, 0x09, 0xdc, 0xc2, 0xa0, 0xe8,
	0xa3, 0x49, 0x34, 0x8f, 0x55, 0x9b, 0x88, 0x05, 0xfb, 0x85, 0xe7, 0x13, 0x7d, 0x26, 0xe1, 0x96,
	0x3d, 0xbc, 0xea, 0xa4, 0x1e, 0x98, 0x66, 0xf1, 0x3b, 0x3c, 0x29, 0xb8, 0x68, 0x12, 0x8d, 0x03,
	0xd5, 0xe6, 0x70, 0x0b, 0x4a, 0x6e, 0xd1, 0xa0, 0x0d, 0xc3, 0xb1, 0x5e, 0x9a, 0x4f, 0xeb, 0x60,
	0xa9, 0xfa, 0x1b, 0xe8, 0xe7, 0x1c, 0x54, 0x7b, 0xc3, 0x10, 0xb5, 0xca, 0xaf, 0xa1, 0x5f, 0x5c,
	0x35, 0xd2, 0xd6, 0x4a, 0xb7, 0x91, 0x3a, 0x2c, 0xad, 0xf9, 0xf7, 0xf4, 0xff, 0x08, 0x9f, 0x99,
	0xe2, 0x91, 0x4d, 0x33, 0x23, 0x27, 0x6e, 0x52, 0xef, 0xdc, 0x2a, 0x92, 0x16, 0xa3, 0xbc, 0x13,
	0xa5, 0xf5, 0x96, 0x6c, 0x34, 0x5e, 0xef, 0x9c, 0x63, 0x53, 0xbd, 0x25, 0x21, 0x6a, 0x95, 0x5f,
	0x82, 0x92, 0xdb, 0x74, 0x52, 0xda, 0xf2, 0x26, 0xac, 0xa8, 0xf4, 0x4d, 0xd2, 0xbf, 0x4a, 0xa5,
	0x12, 0xca, 0x26, 0xaf, 0x62, 0xb6, 0x0a, 0xa5, 0xaf, 0x56, 0x69, 0xc7, 0x4a, 0x5f, 0xc5, 0xf2,
	0x3e, 0xe5, 0xaf, 0x62, 0x66, 0xdf, 0xf4, 0x2a, 0x96, 0xf9, 0xeb, 0x44, 0xbf, 0x1b, 0xfe, 0x7a,
	0x90, 0xff, 0x83, 0x99, 0x50, 0xdd, 0xed, 0xb2, 0xc2, 0x7d, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x70, 0x48, 0xa6, 0x3c, 0x8a, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExemplarsClient is the client API for Exemplars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExemplarsClient interface {
	// Upload a dimensioned image.
	// This image should be pristine, upright, and deskewed.
	UploadDimensionedImage(ctx context.Context, in *UploadDimensionedImageRequest, opts ...grpc.CallOption) (*UploadDimensionedImageResponse, error)
	UploadDimensionedImageLRO(ctx context.Context, in *UploadDimensionedImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Upload a PDF. The specified (or all) of its pages are rendered and oriented
	// before the operation is complete.
	UploadPdf(ctx context.Context, in *UploadPdfRequest, opts ...grpc.CallOption) (*UploadPdfResponse, error)
	UploadPdfLRO(ctx context.Context, in *UploadPdfRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Fetch a previously uploaded PDF page.
	GetPdfPage(ctx context.Context, in *GetPdfPageRequest, opts ...grpc.CallOption) (*GetPdfPageResponse, error)
	GetPdfPageLRO(ctx context.Context, in *GetPdfPageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Register a dimensioned image or PDF page as being an exemplar. Once
	// registered, the image becomes independently associated with the exemplar
	// name and will not expire.
	CreateExemplar(ctx context.Context, in *CreateExemplarRequest, opts ...grpc.CallOption) (*CreateExemplarResponse, error)
	CreateExemplarLRO(ctx context.Context, in *CreateExemplarRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Returns information on existing exemplars.
	ListExemplars(ctx context.Context, in *ListExemplarsRequest, opts ...grpc.CallOption) (*ListExemplarsResponse, error)
	ListExemplarsLRO(ctx context.Context, in *ListExemplarsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Fetch an exemplar.
	GetExemplar(ctx context.Context, in *GetExemplarRequest, opts ...grpc.CallOption) (*GetExemplarResponse, error)
	GetExemplarLRO(ctx context.Context, in *GetExemplarRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Permanently delete an exemplar and all dependent objects (i.e., fields).
	DeleteExemplar(ctx context.Context, in *DeleteExemplarRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteExemplarLRO(ctx context.Context, in *DeleteExemplarRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Define a data collection field on an exemplar.
	CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*CreateFieldResponse, error)
	CreateFieldLRO(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Remove a field from an exemplar.
	DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteFieldLRO(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Returns the fields defined on the specified exemplar.
	ListFields(ctx context.Context, in *ListFieldsRequest, opts ...grpc.CallOption) (*ListFieldsResponse, error)
	ListFieldsLRO(ctx context.Context, in *ListFieldsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type exemplarsClient struct {
	cc *grpc.ClientConn
}

func NewExemplarsClient(cc *grpc.ClientConn) ExemplarsClient {
	return &exemplarsClient{cc}
}

func (c *exemplarsClient) UploadDimensionedImage(ctx context.Context, in *UploadDimensionedImageRequest, opts ...grpc.CallOption) (*UploadDimensionedImageResponse, error) {
	out := new(UploadDimensionedImageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/UploadDimensionedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) UploadDimensionedImageLRO(ctx context.Context, in *UploadDimensionedImageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/UploadDimensionedImageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) UploadPdf(ctx context.Context, in *UploadPdfRequest, opts ...grpc.CallOption) (*UploadPdfResponse, error) {
	out := new(UploadPdfResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/UploadPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) UploadPdfLRO(ctx context.Context, in *UploadPdfRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/UploadPdfLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) GetPdfPage(ctx context.Context, in *GetPdfPageRequest, opts ...grpc.CallOption) (*GetPdfPageResponse, error) {
	out := new(GetPdfPageResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/GetPdfPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) GetPdfPageLRO(ctx context.Context, in *GetPdfPageRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/GetPdfPageLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) CreateExemplar(ctx context.Context, in *CreateExemplarRequest, opts ...grpc.CallOption) (*CreateExemplarResponse, error) {
	out := new(CreateExemplarResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/CreateExemplar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) CreateExemplarLRO(ctx context.Context, in *CreateExemplarRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/CreateExemplarLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) ListExemplars(ctx context.Context, in *ListExemplarsRequest, opts ...grpc.CallOption) (*ListExemplarsResponse, error) {
	out := new(ListExemplarsResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/ListExemplars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) ListExemplarsLRO(ctx context.Context, in *ListExemplarsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/ListExemplarsLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) GetExemplar(ctx context.Context, in *GetExemplarRequest, opts ...grpc.CallOption) (*GetExemplarResponse, error) {
	out := new(GetExemplarResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/GetExemplar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) GetExemplarLRO(ctx context.Context, in *GetExemplarRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/GetExemplarLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) DeleteExemplar(ctx context.Context, in *DeleteExemplarRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/DeleteExemplar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) DeleteExemplarLRO(ctx context.Context, in *DeleteExemplarRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/DeleteExemplarLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*CreateFieldResponse, error) {
	out := new(CreateFieldResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/CreateField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) CreateFieldLRO(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/CreateFieldLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/DeleteField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) DeleteFieldLRO(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/DeleteFieldLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) ListFields(ctx context.Context, in *ListFieldsRequest, opts ...grpc.CallOption) (*ListFieldsResponse, error) {
	out := new(ListFieldsResponse)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/ListFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exemplarsClient) ListFieldsLRO(ctx context.Context, in *ListFieldsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/nsys.api.exemplar.Exemplars/ListFieldsLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExemplarsServer is the server API for Exemplars service.
type ExemplarsServer interface {
	// Upload a dimensioned image.
	// This image should be pristine, upright, and deskewed.
	UploadDimensionedImage(context.Context, *UploadDimensionedImageRequest) (*UploadDimensionedImageResponse, error)
	UploadDimensionedImageLRO(context.Context, *UploadDimensionedImageRequest) (*longrunning.Operation, error)
	// Upload a PDF. The specified (or all) of its pages are rendered and oriented
	// before the operation is complete.
	UploadPdf(context.Context, *UploadPdfRequest) (*UploadPdfResponse, error)
	UploadPdfLRO(context.Context, *UploadPdfRequest) (*longrunning.Operation, error)
	// Fetch a previously uploaded PDF page.
	GetPdfPage(context.Context, *GetPdfPageRequest) (*GetPdfPageResponse, error)
	GetPdfPageLRO(context.Context, *GetPdfPageRequest) (*longrunning.Operation, error)
	// Register a dimensioned image or PDF page as being an exemplar. Once
	// registered, the image becomes independently associated with the exemplar
	// name and will not expire.
	CreateExemplar(context.Context, *CreateExemplarRequest) (*CreateExemplarResponse, error)
	CreateExemplarLRO(context.Context, *CreateExemplarRequest) (*longrunning.Operation, error)
	// Returns information on existing exemplars.
	ListExemplars(context.Context, *ListExemplarsRequest) (*ListExemplarsResponse, error)
	ListExemplarsLRO(context.Context, *ListExemplarsRequest) (*longrunning.Operation, error)
	// Fetch an exemplar.
	GetExemplar(context.Context, *GetExemplarRequest) (*GetExemplarResponse, error)
	GetExemplarLRO(context.Context, *GetExemplarRequest) (*longrunning.Operation, error)
	// Permanently delete an exemplar and all dependent objects (i.e., fields).
	DeleteExemplar(context.Context, *DeleteExemplarRequest) (*empty.Empty, error)
	DeleteExemplarLRO(context.Context, *DeleteExemplarRequest) (*longrunning.Operation, error)
	// Define a data collection field on an exemplar.
	CreateField(context.Context, *CreateFieldRequest) (*CreateFieldResponse, error)
	CreateFieldLRO(context.Context, *CreateFieldRequest) (*longrunning.Operation, error)
	// Remove a field from an exemplar.
	DeleteField(context.Context, *DeleteFieldRequest) (*empty.Empty, error)
	DeleteFieldLRO(context.Context, *DeleteFieldRequest) (*longrunning.Operation, error)
	// Returns the fields defined on the specified exemplar.
	ListFields(context.Context, *ListFieldsRequest) (*ListFieldsResponse, error)
	ListFieldsLRO(context.Context, *ListFieldsRequest) (*longrunning.Operation, error)
}

// UnimplementedExemplarsServer can be embedded to have forward compatible implementations.
type UnimplementedExemplarsServer struct {
}

func (*UnimplementedExemplarsServer) UploadDimensionedImage(ctx context.Context, req *UploadDimensionedImageRequest) (*UploadDimensionedImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDimensionedImage not implemented")
}
func (*UnimplementedExemplarsServer) UploadDimensionedImageLRO(ctx context.Context, req *UploadDimensionedImageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDimensionedImageLRO not implemented")
}
func (*UnimplementedExemplarsServer) UploadPdf(ctx context.Context, req *UploadPdfRequest) (*UploadPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPdf not implemented")
}
func (*UnimplementedExemplarsServer) UploadPdfLRO(ctx context.Context, req *UploadPdfRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPdfLRO not implemented")
}
func (*UnimplementedExemplarsServer) GetPdfPage(ctx context.Context, req *GetPdfPageRequest) (*GetPdfPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPdfPage not implemented")
}
func (*UnimplementedExemplarsServer) GetPdfPageLRO(ctx context.Context, req *GetPdfPageRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPdfPageLRO not implemented")
}
func (*UnimplementedExemplarsServer) CreateExemplar(ctx context.Context, req *CreateExemplarRequest) (*CreateExemplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExemplar not implemented")
}
func (*UnimplementedExemplarsServer) CreateExemplarLRO(ctx context.Context, req *CreateExemplarRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExemplarLRO not implemented")
}
func (*UnimplementedExemplarsServer) ListExemplars(ctx context.Context, req *ListExemplarsRequest) (*ListExemplarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExemplars not implemented")
}
func (*UnimplementedExemplarsServer) ListExemplarsLRO(ctx context.Context, req *ListExemplarsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExemplarsLRO not implemented")
}
func (*UnimplementedExemplarsServer) GetExemplar(ctx context.Context, req *GetExemplarRequest) (*GetExemplarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExemplar not implemented")
}
func (*UnimplementedExemplarsServer) GetExemplarLRO(ctx context.Context, req *GetExemplarRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExemplarLRO not implemented")
}
func (*UnimplementedExemplarsServer) DeleteExemplar(ctx context.Context, req *DeleteExemplarRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExemplar not implemented")
}
func (*UnimplementedExemplarsServer) DeleteExemplarLRO(ctx context.Context, req *DeleteExemplarRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExemplarLRO not implemented")
}
func (*UnimplementedExemplarsServer) CreateField(ctx context.Context, req *CreateFieldRequest) (*CreateFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateField not implemented")
}
func (*UnimplementedExemplarsServer) CreateFieldLRO(ctx context.Context, req *CreateFieldRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFieldLRO not implemented")
}
func (*UnimplementedExemplarsServer) DeleteField(ctx context.Context, req *DeleteFieldRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (*UnimplementedExemplarsServer) DeleteFieldLRO(ctx context.Context, req *DeleteFieldRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFieldLRO not implemented")
}
func (*UnimplementedExemplarsServer) ListFields(ctx context.Context, req *ListFieldsRequest) (*ListFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFields not implemented")
}
func (*UnimplementedExemplarsServer) ListFieldsLRO(ctx context.Context, req *ListFieldsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFieldsLRO not implemented")
}

func RegisterExemplarsServer(s *grpc.Server, srv ExemplarsServer) {
	s.RegisterService(&_Exemplars_serviceDesc, srv)
}

func _Exemplars_UploadDimensionedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDimensionedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).UploadDimensionedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/UploadDimensionedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).UploadDimensionedImage(ctx, req.(*UploadDimensionedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_UploadDimensionedImageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDimensionedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).UploadDimensionedImageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/UploadDimensionedImageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).UploadDimensionedImageLRO(ctx, req.(*UploadDimensionedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_UploadPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).UploadPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/UploadPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).UploadPdf(ctx, req.(*UploadPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_UploadPdfLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).UploadPdfLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/UploadPdfLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).UploadPdfLRO(ctx, req.(*UploadPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_GetPdfPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPdfPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).GetPdfPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/GetPdfPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).GetPdfPage(ctx, req.(*GetPdfPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_GetPdfPageLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPdfPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).GetPdfPageLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/GetPdfPageLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).GetPdfPageLRO(ctx, req.(*GetPdfPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_CreateExemplar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExemplarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).CreateExemplar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/CreateExemplar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).CreateExemplar(ctx, req.(*CreateExemplarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_CreateExemplarLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExemplarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).CreateExemplarLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/CreateExemplarLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).CreateExemplarLRO(ctx, req.(*CreateExemplarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_ListExemplars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExemplarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).ListExemplars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/ListExemplars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).ListExemplars(ctx, req.(*ListExemplarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_ListExemplarsLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExemplarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).ListExemplarsLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/ListExemplarsLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).ListExemplarsLRO(ctx, req.(*ListExemplarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_GetExemplar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExemplarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).GetExemplar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/GetExemplar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).GetExemplar(ctx, req.(*GetExemplarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_GetExemplarLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExemplarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).GetExemplarLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/GetExemplarLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).GetExemplarLRO(ctx, req.(*GetExemplarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_DeleteExemplar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExemplarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).DeleteExemplar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/DeleteExemplar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).DeleteExemplar(ctx, req.(*DeleteExemplarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_DeleteExemplarLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExemplarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).DeleteExemplarLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/DeleteExemplarLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).DeleteExemplarLRO(ctx, req.(*DeleteExemplarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_CreateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).CreateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/CreateField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).CreateField(ctx, req.(*CreateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_CreateFieldLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).CreateFieldLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/CreateFieldLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).CreateFieldLRO(ctx, req.(*CreateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/DeleteField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).DeleteField(ctx, req.(*DeleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_DeleteFieldLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).DeleteFieldLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/DeleteFieldLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).DeleteFieldLRO(ctx, req.(*DeleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_ListFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).ListFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/ListFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).ListFields(ctx, req.(*ListFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exemplars_ListFieldsLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExemplarsServer).ListFieldsLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsys.api.exemplar.Exemplars/ListFieldsLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExemplarsServer).ListFieldsLRO(ctx, req.(*ListFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Exemplars_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nsys.api.exemplar.Exemplars",
	HandlerType: (*ExemplarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDimensionedImage",
			Handler:    _Exemplars_UploadDimensionedImage_Handler,
		},
		{
			MethodName: "UploadDimensionedImageLRO",
			Handler:    _Exemplars_UploadDimensionedImageLRO_Handler,
		},
		{
			MethodName: "UploadPdf",
			Handler:    _Exemplars_UploadPdf_Handler,
		},
		{
			MethodName: "UploadPdfLRO",
			Handler:    _Exemplars_UploadPdfLRO_Handler,
		},
		{
			MethodName: "GetPdfPage",
			Handler:    _Exemplars_GetPdfPage_Handler,
		},
		{
			MethodName: "GetPdfPageLRO",
			Handler:    _Exemplars_GetPdfPageLRO_Handler,
		},
		{
			MethodName: "CreateExemplar",
			Handler:    _Exemplars_CreateExemplar_Handler,
		},
		{
			MethodName: "CreateExemplarLRO",
			Handler:    _Exemplars_CreateExemplarLRO_Handler,
		},
		{
			MethodName: "ListExemplars",
			Handler:    _Exemplars_ListExemplars_Handler,
		},
		{
			MethodName: "ListExemplarsLRO",
			Handler:    _Exemplars_ListExemplarsLRO_Handler,
		},
		{
			MethodName: "GetExemplar",
			Handler:    _Exemplars_GetExemplar_Handler,
		},
		{
			MethodName: "GetExemplarLRO",
			Handler:    _Exemplars_GetExemplarLRO_Handler,
		},
		{
			MethodName: "DeleteExemplar",
			Handler:    _Exemplars_DeleteExemplar_Handler,
		},
		{
			MethodName: "DeleteExemplarLRO",
			Handler:    _Exemplars_DeleteExemplarLRO_Handler,
		},
		{
			MethodName: "CreateField",
			Handler:    _Exemplars_CreateField_Handler,
		},
		{
			MethodName: "CreateFieldLRO",
			Handler:    _Exemplars_CreateFieldLRO_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _Exemplars_DeleteField_Handler,
		},
		{
			MethodName: "DeleteFieldLRO",
			Handler:    _Exemplars_DeleteFieldLRO_Handler,
		},
		{
			MethodName: "ListFields",
			Handler:    _Exemplars_ListFields_Handler,
		},
		{
			MethodName: "ListFieldsLRO",
			Handler:    _Exemplars_ListFieldsLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exemplar.proto",
}
