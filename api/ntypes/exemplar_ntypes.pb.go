// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exemplar_ntypes.proto

package ntypes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PdfPage struct {
	// The 1-based page number within the source PDF
	PageNumber int32 `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// Size of the page in centimeters after it has been oriented such that the bulk
	// of the text appearing on it is "right side up".
	Size *Size `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// Pages in the original PDF may need to be rotated by 90, 180, or 270 degrees
	// by the system so that the bulk of the printed text is "right side up". This
	// value reports what clockwise rotation was applied in order to achieve this.
	DegreesRotated int32 `protobuf:"varint,3,opt,name=degrees_rotated,json=degreesRotated,proto3" json:"degrees_rotated,omitempty"`
	// The PNG image data of the rendered and oriented page. Not always present.
	PngData              []byte   `protobuf:"bytes,4,opt,name=png_data,json=pngData,proto3" json:"png_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PdfPage) Reset()         { *m = PdfPage{} }
func (m *PdfPage) String() string { return proto.CompactTextString(m) }
func (*PdfPage) ProtoMessage()    {}
func (*PdfPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_25748d76c9e4ca28, []int{0}
}

func (m *PdfPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PdfPage.Unmarshal(m, b)
}
func (m *PdfPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PdfPage.Marshal(b, m, deterministic)
}
func (m *PdfPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PdfPage.Merge(m, src)
}
func (m *PdfPage) XXX_Size() int {
	return xxx_messageInfo_PdfPage.Size(m)
}
func (m *PdfPage) XXX_DiscardUnknown() {
	xxx_messageInfo_PdfPage.DiscardUnknown(m)
}

var xxx_messageInfo_PdfPage proto.InternalMessageInfo

func (m *PdfPage) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *PdfPage) GetSize() *Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *PdfPage) GetDegreesRotated() int32 {
	if m != nil {
		return m.DegreesRotated
	}
	return 0
}

func (m *PdfPage) GetPngData() []byte {
	if m != nil {
		return m.PngData
	}
	return nil
}

type Exemplar struct {
	// The name / id of the exemplar.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Client-provided optional description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The time the exemplar was registered aka created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The size of the exemplar in centimeters.
	Size *Size `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	// The metadata supplied by the client when the exemplar was created.
	// Not always present.
	Metadata *any.Any `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Fields   []*Field `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	// The exemplar image in PNG format. Not always present.
	PngData              []byte   `protobuf:"bytes,7,opt,name=png_data,json=pngData,proto3" json:"png_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exemplar) Reset()         { *m = Exemplar{} }
func (m *Exemplar) String() string { return proto.CompactTextString(m) }
func (*Exemplar) ProtoMessage()    {}
func (*Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_25748d76c9e4ca28, []int{1}
}

func (m *Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exemplar.Unmarshal(m, b)
}
func (m *Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exemplar.Marshal(b, m, deterministic)
}
func (m *Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exemplar.Merge(m, src)
}
func (m *Exemplar) XXX_Size() int {
	return xxx_messageInfo_Exemplar.Size(m)
}
func (m *Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_Exemplar proto.InternalMessageInfo

func (m *Exemplar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Exemplar) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Exemplar) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Exemplar) GetSize() *Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *Exemplar) GetMetadata() *any.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Exemplar) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Exemplar) GetPngData() []byte {
	if m != nil {
		return m.PngData
	}
	return nil
}

func init() {
	proto.RegisterType((*PdfPage)(nil), "nsys.api.ntypes.PdfPage")
	proto.RegisterType((*Exemplar)(nil), "nsys.api.ntypes.Exemplar")
}

func init() { proto.RegisterFile("exemplar_ntypes.proto", fileDescriptor_25748d76c9e4ca28) }

var fileDescriptor_25748d76c9e4ca28 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4d, 0x6f, 0xda, 0x30,
	0x18, 0xc7, 0x15, 0x08, 0x6f, 0xce, 0x34, 0x24, 0x0b, 0xa6, 0xc0, 0x61, 0x64, 0x5c, 0x96, 0x5d,
	0x9c, 0x89, 0x1d, 0x77, 0xda, 0xb4, 0xed, 0x38, 0x21, 0xb7, 0xa7, 0x5e, 0x22, 0x43, 0x1e, 0x2c,
	0x4b, 0xc4, 0xb6, 0x6c, 0x23, 0x35, 0x7c, 0x93, 0x7e, 0x80, 0x7e, 0xcf, 0x2a, 0x4e, 0x40, 0x05,
	0x2a, 0xf5, 0x96, 0xfc, 0xfc, 0xcb, 0xf3, 0xf2, 0x8f, 0xd1, 0x14, 0x1e, 0xa1, 0xd4, 0x7b, 0x66,
	0x72, 0xe9, 0x2a, 0x0d, 0x96, 0x68, 0xa3, 0x9c, 0xc2, 0x63, 0x69, 0x2b, 0x4b, 0x98, 0x16, 0xa4,
	0xc1, 0xf3, 0x2f, 0x1e, 0x08, 0x95, 0x31, 0x2d, 0xb2, 0x86, 0x65, 0x1c, 0x54, 0x09, 0xce, 0x54,
	0xcd, 0x37, 0xf3, 0xcf, 0x6f, 0x28, 0x3b, 0x01, 0xfb, 0xa2, 0x3d, 0x5f, 0x70, 0xa5, 0xf8, 0x1e,
	0x32, 0xff, 0xb6, 0x39, 0xec, 0x32, 0x27, 0x4a, 0xb0, 0x8e, 0x95, 0xba, 0x15, 0x66, 0xd7, 0x02,
	0x93, 0x6d, 0xed, 0xe5, 0x53, 0x80, 0x06, 0xeb, 0x62, 0xb7, 0x66, 0x1c, 0xf0, 0x02, 0x45, 0x9a,
	0x71, 0xc8, 0xe5, 0xa1, 0xdc, 0x80, 0x89, 0x83, 0x24, 0x48, 0x7b, 0x14, 0xd5, 0xe8, 0xbf, 0x27,
	0xf8, 0x1b, 0x0a, 0xad, 0x38, 0x42, 0xdc, 0x49, 0x82, 0x34, 0x5a, 0x4d, 0xc9, 0xd5, 0x2e, 0xe4,
	0x4e, 0x1c, 0x81, 0x7a, 0x05, 0x7f, 0x45, 0xe3, 0x02, 0xb8, 0x01, 0xb0, 0xb9, 0x51, 0x8e, 0x39,
	0x28, 0xe2, 0xae, 0xaf, 0xf7, 0xb1, 0xc5, 0xb4, 0xa1, 0x78, 0x86, 0x86, 0x5a, 0xf2, 0xbc, 0x60,
	0x8e, 0xc5, 0x61, 0x12, 0xa4, 0x1f, 0xe8, 0x40, 0x4b, 0xfe, 0x87, 0x39, 0xb6, 0x7c, 0xee, 0xa0,
	0xe1, 0xdf, 0x36, 0x45, 0x8c, 0x51, 0x28, 0x59, 0x09, 0x7e, 0xaa, 0x11, 0xf5, 0xcf, 0x38, 0x41,
	0x51, 0x01, 0x76, 0x6b, 0x84, 0x76, 0x42, 0x49, 0x3f, 0xd6, 0x88, 0xbe, 0x46, 0xf8, 0x27, 0x8a,
	0xb6, 0x06, 0x98, 0x83, 0xbc, 0xce, 0xc4, 0x8f, 0x10, 0xad, 0xe6, 0xa4, 0xc9, 0x83, 0x9c, 0xf2,
	0x20, 0xf7, 0xa7, 0xc0, 0x28, 0x6a, 0xf4, 0x1a, 0x9c, 0xd7, 0x0d, 0xdf, 0x5f, 0xf7, 0x3b, 0x1a,
	0x96, 0xe0, 0x98, 0xdf, 0xa2, 0xe7, 0xf5, 0xc9, 0x4d, 0x93, 0x5f, 0xb2, 0xa2, 0x67, 0x0b, 0x13,
	0xd4, 0xf7, 0xff, 0xd0, 0xc6, 0xfd, 0xa4, 0x9b, 0x46, 0xab, 0x4f, 0x37, 0xe5, 0xff, 0xd5, 0xc7,
	0xb4, 0xb5, 0x2e, 0x72, 0x1a, 0x5c, 0xe4, 0xf4, 0x7b, 0xf2, 0x80, 0x6f, 0x6f, 0xc8, 0xa6, 0xef,
	0x1b, 0xff, 0x78, 0x09, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x3a, 0x8f, 0x90, 0x89, 0x02, 0x00, 0x00,
}
