// Code generated by protoc-gen-go. DO NOT EDIT.
// source: writing_present.proto

package ntypes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HandwritingPresentPuzzle struct {
	// This should be a tightly cut area which encompasses the bulk of
	// where writing for the field should appear but does not capture
	// anything outside of that area.
	BoundingArea         *BoundedArea `protobuf:"bytes,1,opt,name=bounding_area,json=boundingArea,proto3" json:"bounding_area,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HandwritingPresentPuzzle) Reset()         { *m = HandwritingPresentPuzzle{} }
func (m *HandwritingPresentPuzzle) String() string { return proto.CompactTextString(m) }
func (*HandwritingPresentPuzzle) ProtoMessage()    {}
func (*HandwritingPresentPuzzle) Descriptor() ([]byte, []int) {
	return fileDescriptor_6909f85ac3eb82e4, []int{0}
}

func (m *HandwritingPresentPuzzle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandwritingPresentPuzzle.Unmarshal(m, b)
}
func (m *HandwritingPresentPuzzle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandwritingPresentPuzzle.Marshal(b, m, deterministic)
}
func (m *HandwritingPresentPuzzle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandwritingPresentPuzzle.Merge(m, src)
}
func (m *HandwritingPresentPuzzle) XXX_Size() int {
	return xxx_messageInfo_HandwritingPresentPuzzle.Size(m)
}
func (m *HandwritingPresentPuzzle) XXX_DiscardUnknown() {
	xxx_messageInfo_HandwritingPresentPuzzle.DiscardUnknown(m)
}

var xxx_messageInfo_HandwritingPresentPuzzle proto.InternalMessageInfo

func (m *HandwritingPresentPuzzle) GetBoundingArea() *BoundedArea {
	if m != nil {
		return m.BoundingArea
	}
	return nil
}

type HandwritingPresentCut struct {
	// The raw cut image
	RawCut               *DimensionedImage `protobuf:"bytes,1,opt,name=raw_cut,json=rawCut,proto3" json:"raw_cut,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HandwritingPresentCut) Reset()         { *m = HandwritingPresentCut{} }
func (m *HandwritingPresentCut) String() string { return proto.CompactTextString(m) }
func (*HandwritingPresentCut) ProtoMessage()    {}
func (*HandwritingPresentCut) Descriptor() ([]byte, []int) {
	return fileDescriptor_6909f85ac3eb82e4, []int{1}
}

func (m *HandwritingPresentCut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandwritingPresentCut.Unmarshal(m, b)
}
func (m *HandwritingPresentCut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandwritingPresentCut.Marshal(b, m, deterministic)
}
func (m *HandwritingPresentCut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandwritingPresentCut.Merge(m, src)
}
func (m *HandwritingPresentCut) XXX_Size() int {
	return xxx_messageInfo_HandwritingPresentCut.Size(m)
}
func (m *HandwritingPresentCut) XXX_DiscardUnknown() {
	xxx_messageInfo_HandwritingPresentCut.DiscardUnknown(m)
}

var xxx_messageInfo_HandwritingPresentCut proto.InternalMessageInfo

func (m *HandwritingPresentCut) GetRawCut() *DimensionedImage {
	if m != nil {
		return m.RawCut
	}
	return nil
}

type HandwritingPresentHint struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandwritingPresentHint) Reset()         { *m = HandwritingPresentHint{} }
func (m *HandwritingPresentHint) String() string { return proto.CompactTextString(m) }
func (*HandwritingPresentHint) ProtoMessage()    {}
func (*HandwritingPresentHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6909f85ac3eb82e4, []int{2}
}

func (m *HandwritingPresentHint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandwritingPresentHint.Unmarshal(m, b)
}
func (m *HandwritingPresentHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandwritingPresentHint.Marshal(b, m, deterministic)
}
func (m *HandwritingPresentHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandwritingPresentHint.Merge(m, src)
}
func (m *HandwritingPresentHint) XXX_Size() int {
	return xxx_messageInfo_HandwritingPresentHint.Size(m)
}
func (m *HandwritingPresentHint) XXX_DiscardUnknown() {
	xxx_messageInfo_HandwritingPresentHint.DiscardUnknown(m)
}

var xxx_messageInfo_HandwritingPresentHint proto.InternalMessageInfo

type HandwritingPresentSolution struct {
	Present              bool     `protobuf:"varint,1,opt,name=present,proto3" json:"present,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandwritingPresentSolution) Reset()         { *m = HandwritingPresentSolution{} }
func (m *HandwritingPresentSolution) String() string { return proto.CompactTextString(m) }
func (*HandwritingPresentSolution) ProtoMessage()    {}
func (*HandwritingPresentSolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_6909f85ac3eb82e4, []int{3}
}

func (m *HandwritingPresentSolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandwritingPresentSolution.Unmarshal(m, b)
}
func (m *HandwritingPresentSolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandwritingPresentSolution.Marshal(b, m, deterministic)
}
func (m *HandwritingPresentSolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandwritingPresentSolution.Merge(m, src)
}
func (m *HandwritingPresentSolution) XXX_Size() int {
	return xxx_messageInfo_HandwritingPresentSolution.Size(m)
}
func (m *HandwritingPresentSolution) XXX_DiscardUnknown() {
	xxx_messageInfo_HandwritingPresentSolution.DiscardUnknown(m)
}

var xxx_messageInfo_HandwritingPresentSolution proto.InternalMessageInfo

func (m *HandwritingPresentSolution) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

func init() {
	proto.RegisterType((*HandwritingPresentPuzzle)(nil), "nsys.api.ntypes.HandwritingPresentPuzzle")
	proto.RegisterType((*HandwritingPresentCut)(nil), "nsys.api.ntypes.HandwritingPresentCut")
	proto.RegisterType((*HandwritingPresentHint)(nil), "nsys.api.ntypes.HandwritingPresentHint")
	proto.RegisterType((*HandwritingPresentSolution)(nil), "nsys.api.ntypes.HandwritingPresentSolution")
}

func init() { proto.RegisterFile("writing_present.proto", fileDescriptor_6909f85ac3eb82e4) }

var fileDescriptor_6909f85ac3eb82e4 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xcf, 0x4b, 0xf3, 0x40,
	0x10, 0xa5, 0x97, 0xf6, 0x63, 0x3f, 0x45, 0x08, 0x56, 0x42, 0xf0, 0x60, 0x03, 0x82, 0xa7, 0x0d,
	0x28, 0x78, 0xf0, 0xd6, 0xd6, 0x43, 0xbd, 0x95, 0xf4, 0x26, 0x48, 0xd8, 0x9a, 0x21, 0x0c, 0x34,
	0xb3, 0xcb, 0xee, 0x2c, 0x21, 0xfd, 0xeb, 0x25, 0xd9, 0xf4, 0xe2, 0x7a, 0x7c, 0x33, 0xef, 0x17,
	0x4f, 0x2c, 0x3b, 0x8b, 0x8c, 0xd4, 0x54, 0xc6, 0x82, 0x03, 0x62, 0x69, 0xac, 0x66, 0x9d, 0xdc,
	0x90, 0xeb, 0x9d, 0x54, 0x06, 0x25, 0x71, 0x6f, 0xc0, 0x65, 0xab, 0xf1, 0x80, 0xba, 0x50, 0x06,
	0x8b, 0x70, 0x2b, 0x1a, 0xd0, 0x2d, 0xb0, 0xed, 0x83, 0x26, 0x7b, 0xfc, 0x83, 0x82, 0xad, 0x6a,
	0xa0, 0x0a, 0x20, 0xd0, 0xf2, 0x2f, 0x91, 0xee, 0x14, 0xd5, 0x53, 0xee, 0x3e, 0xc4, 0xee, 0xfd,
	0xf9, 0x7c, 0x82, 0x64, 0x2d, 0xae, 0x8f, 0xda, 0x53, 0x3d, 0x14, 0x52, 0x16, 0x54, 0x3a, 0x7b,
	0x98, 0x3d, 0xfd, 0x7f, 0xbe, 0x97, 0xbf, 0xea, 0xc8, 0xcd, 0xc0, 0x82, 0x7a, 0x6d, 0x41, 0x95,
	0x57, 0x17, 0xc9, 0x80, 0xf2, 0x83, 0x58, 0xc6, 0xf6, 0x5b, 0xcf, 0xc9, 0x9b, 0x58, 0x58, 0xd5,
	0x55, 0xdf, 0x9e, 0x27, 0xd7, 0x55, 0xe4, 0xfa, 0x8e, 0x2d, 0x90, 0x43, 0x4d, 0x50, 0x7f, 0x0c,
	0xc5, 0xcb, 0xb9, 0x55, 0xdd, 0xd6, 0x73, 0x9e, 0x8a, 0xbb, 0xd8, 0x74, 0x87, 0xc4, 0xf9, 0xab,
	0xc8, 0xe2, 0xcf, 0x41, 0x9f, 0x3c, 0xa3, 0xa6, 0x24, 0x15, 0x8b, 0x69, 0xd7, 0x31, 0xf3, 0x5f,
	0x79, 0x81, 0x9b, 0xdb, 0xcf, 0x24, 0x9e, 0xeb, 0x38, 0x1f, 0x27, 0x7a, 0xf9, 0x09, 0x00, 0x00,
	0xff, 0xff, 0xd3, 0x95, 0xf8, 0x06, 0x96, 0x01, 0x00, 0x00,
}
