syntax = "proto3";
package nsys.api.ntypes;
option go_package = "nsys.io/api/ntypes";

import "google/protobuf/any.proto";

message RawFile {
	// The actual file data.
	bytes data = 1;
	// The 512/256 SHA sum for the data bytes.
	bytes sha512_256 = 2;
}

message GenericFile {
	// For client or documented application use.
	string description = 1;

	// For client or documented application use.
	google.protobuf.Any metadata = 2;

	// The basename of the file on the originating system, i.e., no
	// directory path, no slashes -- the rightmost part of the name.
	string origin_basename = 3;

	// Length of the file in bytes. 
	// Max length is always less than a gigabyte.
	uint32 length = 4;

	// The actual file data and its checksum.
	RawFile raw_file = 5;
}

message ParsedEmail {
	// The email headers
	map<string, string> headers = 1;

	// The email body (html/text)
	string email_body = 2;

	// The saved attachment generic file IDs
	repeated ntypes.EmailAttachment attachments = 3;

	// The attachments that were rejected due to their file extensions not
	// being in the given whitelist.
	repeated ntypes.EmailAttachment rejected_attachments = 4;

	// The saved inline attachments
	repeated ntypes.EmailAttachment inline_attachments = 5;

	// The inline attachments that were rejected due to their file extensions 
	// not being in the given whitelist.
	repeated ntypes.EmailAttachment rejected_inline_attachments = 6;

	// A specialized hash calculated from the email body and attachments (but 
	// not the headers). It can be used to check for duplicated emails.
	string email_hash = 7;
}

message EmailAttachment {
	// The generic file id of the saved attachment.  If empty, then the file
	// was not saved.
	string generic_file_name = 1;

	// The supplied file name for the attachment, as found in the email.
	string supplied_name = 2;

	// The attachment size in bytes, if rejected it will be zero.
	uint32 size = 3;
}