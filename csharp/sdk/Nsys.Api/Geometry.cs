// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nsys.io/api/ntypes/geometry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nsys.Api.Ntypes {

  /// <summary>Holder for reflection information generated from nsys.io/api/ntypes/geometry.proto</summary>
  public static partial class GeometryReflection {

    #region Descriptor
    /// <summary>File descriptor for nsys.io/api/ntypes/geometry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeometryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFuc3lzLmlvL2FwaS9udHlwZXMvZ2VvbWV0cnkucHJvdG8SD25zeXMuYXBp",
            "Lm50eXBlcyLVAQoLQm91bmRlZEFyZWESKgoEcmVjdBgBIAEoCzIaLm5zeXMu",
            "YXBpLm50eXBlcy5SZWN0YW5nbGVIABIrCgdwb2x5Z29uGAIgASgLMhgubnN5",
            "cy5hcGkubnR5cGVzLlBvbHlnb25IABIpCgZjaXJjbGUYAyABKAsyFy5uc3lz",
            "LmFwaS5udHlwZXMuQ2lyY2xlSAASOQoMcm90YXRlZF9yZWN0GAQgASgLMiEu",
            "bnN5cy5hcGkubnR5cGVzLlJvdGF0ZWRSZWN0YW5nbGVIAEIHCgVzaGFwZSId",
            "CgVQb2ludBIJCgF4GAEgASgBEgkKAXkYAiABKAEiTAoETGluZRIhCgFhGAEg",
            "ASgLMhYubnN5cy5hcGkubnR5cGVzLlBvaW50EiEKAWIYAiABKAsyFi5uc3lz",
            "LmFwaS5udHlwZXMuUG9pbnQiJQoEU2l6ZRINCgV3aWR0aBgBIAEoARIOCgZo",
            "ZWlnaHQYAiABKAEibgoQUm90YXRlZFJlY3RhbmdsZRImCgZjZW50ZXIYASAB",
            "KAsyFi5uc3lzLmFwaS5udHlwZXMuUG9pbnQSIwoEc2l6ZRgCIAEoCzIVLm5z",
            "eXMuYXBpLm50eXBlcy5TaXplEg0KBWFuZ2xlGAMgASgBIkcKCVJlY3Rhbmds",
            "ZRINCgVtaW5feBgBIAEoARINCgVtaW5feRgCIAEoARINCgVtYXhfeBgDIAEo",
            "ARINCgVtYXhfeRgEIAEoASIxCgdQb2x5Z29uEiYKBnBvaW50cxgBIAMoCzIW",
            "Lm5zeXMuYXBpLm50eXBlcy5Qb2ludCJACgZDaXJjbGUSJgoGY2VudGVyGAEg",
            "ASgLMhYubnN5cy5hcGkubnR5cGVzLlBvaW50Eg4KBnJhZGl1cxgCIAEoAUIU",
            "WhJuc3lzLmlvL2FwaS9udHlwZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.BoundedArea), global::Nsys.Api.Ntypes.BoundedArea.Parser, new[]{ "Rect", "Polygon", "Circle", "RotatedRect" }, new[]{ "Shape" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Point), global::Nsys.Api.Ntypes.Point.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Line), global::Nsys.Api.Ntypes.Line.Parser, new[]{ "A", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Size), global::Nsys.Api.Ntypes.Size.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.RotatedRectangle), global::Nsys.Api.Ntypes.RotatedRectangle.Parser, new[]{ "Center", "Size", "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Rectangle), global::Nsys.Api.Ntypes.Rectangle.Parser, new[]{ "MinX", "MinY", "MaxX", "MaxY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Polygon), global::Nsys.Api.Ntypes.Polygon.Parser, new[]{ "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Circle), global::Nsys.Api.Ntypes.Circle.Parser, new[]{ "Center", "Radius" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BoundedArea : pb::IMessage<BoundedArea> {
    private static readonly pb::MessageParser<BoundedArea> _parser = new pb::MessageParser<BoundedArea>(() => new BoundedArea());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoundedArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundedArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundedArea(BoundedArea other) : this() {
      switch (other.ShapeCase) {
        case ShapeOneofCase.Rect:
          Rect = other.Rect.Clone();
          break;
        case ShapeOneofCase.Polygon:
          Polygon = other.Polygon.Clone();
          break;
        case ShapeOneofCase.Circle:
          Circle = other.Circle.Clone();
          break;
        case ShapeOneofCase.RotatedRect:
          RotatedRect = other.RotatedRect.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundedArea Clone() {
      return new BoundedArea(this);
    }

    /// <summary>Field number for the "rect" field.</summary>
    public const int RectFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Rectangle Rect {
      get { return shapeCase_ == ShapeOneofCase.Rect ? (global::Nsys.Api.Ntypes.Rectangle) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Rect;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Polygon Polygon {
      get { return shapeCase_ == ShapeOneofCase.Polygon ? (global::Nsys.Api.Ntypes.Polygon) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Polygon;
      }
    }

    /// <summary>Field number for the "circle" field.</summary>
    public const int CircleFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Circle Circle {
      get { return shapeCase_ == ShapeOneofCase.Circle ? (global::Nsys.Api.Ntypes.Circle) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Circle;
      }
    }

    /// <summary>Field number for the "rotated_rect" field.</summary>
    public const int RotatedRectFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.RotatedRectangle RotatedRect {
      get { return shapeCase_ == ShapeOneofCase.RotatedRect ? (global::Nsys.Api.Ntypes.RotatedRectangle) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.RotatedRect;
      }
    }

    private object shape_;
    /// <summary>Enum of possible cases for the "shape" oneof.</summary>
    public enum ShapeOneofCase {
      None = 0,
      Rect = 1,
      Polygon = 2,
      Circle = 3,
      RotatedRect = 4,
    }
    private ShapeOneofCase shapeCase_ = ShapeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeOneofCase ShapeCase {
      get { return shapeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShape() {
      shapeCase_ = ShapeOneofCase.None;
      shape_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoundedArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoundedArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rect, other.Rect)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      if (!object.Equals(Circle, other.Circle)) return false;
      if (!object.Equals(RotatedRect, other.RotatedRect)) return false;
      if (ShapeCase != other.ShapeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shapeCase_ == ShapeOneofCase.Rect) hash ^= Rect.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.Polygon) hash ^= Polygon.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.Circle) hash ^= Circle.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.RotatedRect) hash ^= RotatedRect.GetHashCode();
      hash ^= (int) shapeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shapeCase_ == ShapeOneofCase.Rect) {
        output.WriteRawTag(10);
        output.WriteMessage(Rect);
      }
      if (shapeCase_ == ShapeOneofCase.Polygon) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (shapeCase_ == ShapeOneofCase.Circle) {
        output.WriteRawTag(26);
        output.WriteMessage(Circle);
      }
      if (shapeCase_ == ShapeOneofCase.RotatedRect) {
        output.WriteRawTag(34);
        output.WriteMessage(RotatedRect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shapeCase_ == ShapeOneofCase.Rect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rect);
      }
      if (shapeCase_ == ShapeOneofCase.Polygon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (shapeCase_ == ShapeOneofCase.Circle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Circle);
      }
      if (shapeCase_ == ShapeOneofCase.RotatedRect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotatedRect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoundedArea other) {
      if (other == null) {
        return;
      }
      switch (other.ShapeCase) {
        case ShapeOneofCase.Rect:
          if (Rect == null) {
            Rect = new global::Nsys.Api.Ntypes.Rectangle();
          }
          Rect.MergeFrom(other.Rect);
          break;
        case ShapeOneofCase.Polygon:
          if (Polygon == null) {
            Polygon = new global::Nsys.Api.Ntypes.Polygon();
          }
          Polygon.MergeFrom(other.Polygon);
          break;
        case ShapeOneofCase.Circle:
          if (Circle == null) {
            Circle = new global::Nsys.Api.Ntypes.Circle();
          }
          Circle.MergeFrom(other.Circle);
          break;
        case ShapeOneofCase.RotatedRect:
          if (RotatedRect == null) {
            RotatedRect = new global::Nsys.Api.Ntypes.RotatedRectangle();
          }
          RotatedRect.MergeFrom(other.RotatedRect);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Nsys.Api.Ntypes.Rectangle subBuilder = new global::Nsys.Api.Ntypes.Rectangle();
            if (shapeCase_ == ShapeOneofCase.Rect) {
              subBuilder.MergeFrom(Rect);
            }
            input.ReadMessage(subBuilder);
            Rect = subBuilder;
            break;
          }
          case 18: {
            global::Nsys.Api.Ntypes.Polygon subBuilder = new global::Nsys.Api.Ntypes.Polygon();
            if (shapeCase_ == ShapeOneofCase.Polygon) {
              subBuilder.MergeFrom(Polygon);
            }
            input.ReadMessage(subBuilder);
            Polygon = subBuilder;
            break;
          }
          case 26: {
            global::Nsys.Api.Ntypes.Circle subBuilder = new global::Nsys.Api.Ntypes.Circle();
            if (shapeCase_ == ShapeOneofCase.Circle) {
              subBuilder.MergeFrom(Circle);
            }
            input.ReadMessage(subBuilder);
            Circle = subBuilder;
            break;
          }
          case 34: {
            global::Nsys.Api.Ntypes.RotatedRectangle subBuilder = new global::Nsys.Api.Ntypes.RotatedRectangle();
            if (shapeCase_ == ShapeOneofCase.RotatedRect) {
              subBuilder.MergeFrom(RotatedRect);
            }
            input.ReadMessage(subBuilder);
            RotatedRect = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Line : pb::IMessage<Line> {
    private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Line> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line(Line other) : this() {
      a_ = other.a_ != null ? other.a_.Clone() : null;
      b_ = other.b_ != null ? other.b_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line Clone() {
      return new Line(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Point a_;
    /// <summary>
    /// Defines a line segment between points A and B.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Point A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private global::Nsys.Api.Ntypes.Point b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Point B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Line);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Line other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(A, other.A)) return false;
      if (!object.Equals(B, other.B)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (a_ != null) hash ^= A.GetHashCode();
      if (b_ != null) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (a_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(A);
      }
      if (b_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (a_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      if (b_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Line other) {
      if (other == null) {
        return;
      }
      if (other.a_ != null) {
        if (a_ == null) {
          A = new global::Nsys.Api.Ntypes.Point();
        }
        A.MergeFrom(other.A);
      }
      if (other.b_ != null) {
        if (b_ == null) {
          B = new global::Nsys.Api.Ntypes.Point();
        }
        B.MergeFrom(other.B);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (a_ == null) {
              A = new global::Nsys.Api.Ntypes.Point();
            }
            input.ReadMessage(A);
            break;
          }
          case 18: {
            if (b_ == null) {
              B = new global::Nsys.Api.Ntypes.Point();
            }
            input.ReadMessage(B);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Size : pb::IMessage<Size> {
    private static readonly pb::MessageParser<Size> _parser = new pb::MessageParser<Size>(() => new Size());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Size> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size(Size other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size Clone() {
      return new Size(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private double height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Size);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Size other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Height, other.Height)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Width);
      if (Height != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Height);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Width);
      }
      if (Height != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0D) {
        size += 1 + 8;
      }
      if (Height != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Size other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0D) {
        Width = other.Width;
      }
      if (other.Height != 0D) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Width = input.ReadDouble();
            break;
          }
          case 17: {
            Height = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RotatedRectangle : pb::IMessage<RotatedRectangle> {
    private static readonly pb::MessageParser<RotatedRectangle> _parser = new pb::MessageParser<RotatedRectangle>(() => new RotatedRectangle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RotatedRectangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotatedRectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotatedRectangle(RotatedRectangle other) : this() {
      center_ = other.center_ != null ? other.center_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotatedRectangle Clone() {
      return new RotatedRectangle(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Point center_;
    /// <summary>
    /// Interpretation of rotated rectangle matches OpenCV.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Point Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::Nsys.Api.Ntypes.Size size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Size Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 3;
    private double angle_;
    /// <summary>
    /// Angle of rotation in degrees.	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RotatedRectangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RotatedRectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angle, other.Angle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (Angle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (size_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      if (Angle != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (Angle != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RotatedRectangle other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          Center = new global::Nsys.Api.Ntypes.Point();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Nsys.Api.Ntypes.Size();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (center_ == null) {
              Center = new global::Nsys.Api.Ntypes.Point();
            }
            input.ReadMessage(Center);
            break;
          }
          case 18: {
            if (size_ == null) {
              Size = new global::Nsys.Api.Ntypes.Size();
            }
            input.ReadMessage(Size);
            break;
          }
          case 25: {
            Angle = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rectangle : pb::IMessage<Rectangle> {
    private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle(Rectangle other) : this() {
      minX_ = other.minX_;
      minY_ = other.minY_;
      maxX_ = other.maxX_;
      maxY_ = other.maxY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle Clone() {
      return new Rectangle(this);
    }

    /// <summary>Field number for the "min_x" field.</summary>
    public const int MinXFieldNumber = 1;
    private double minX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinX {
      get { return minX_; }
      set {
        minX_ = value;
      }
    }

    /// <summary>Field number for the "min_y" field.</summary>
    public const int MinYFieldNumber = 2;
    private double minY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinY {
      get { return minY_; }
      set {
        minY_ = value;
      }
    }

    /// <summary>Field number for the "max_x" field.</summary>
    public const int MaxXFieldNumber = 3;
    private double maxX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "max_y" field.</summary>
    public const int MaxYFieldNumber = 4;
    private double maxY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxY {
      get { return maxY_; }
      set {
        maxY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rectangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinX, other.MinX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinY, other.MinY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxX, other.MaxX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxY, other.MaxY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinX);
      if (MinY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinY);
      if (MaxX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxX);
      if (MaxY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinX != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MinX);
      }
      if (MinY != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MinY);
      }
      if (MaxX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxX);
      }
      if (MaxY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinX != 0D) {
        size += 1 + 8;
      }
      if (MinY != 0D) {
        size += 1 + 8;
      }
      if (MaxX != 0D) {
        size += 1 + 8;
      }
      if (MaxY != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rectangle other) {
      if (other == null) {
        return;
      }
      if (other.MinX != 0D) {
        MinX = other.MinX;
      }
      if (other.MinY != 0D) {
        MinY = other.MinY;
      }
      if (other.MaxX != 0D) {
        MaxX = other.MaxX;
      }
      if (other.MaxY != 0D) {
        MaxY = other.MaxY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            MinX = input.ReadDouble();
            break;
          }
          case 17: {
            MinY = input.ReadDouble();
            break;
          }
          case 25: {
            MaxX = input.ReadDouble();
            break;
          }
          case 33: {
            MaxY = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Polygon : pb::IMessage<Polygon> {
    private static readonly pb::MessageParser<Polygon> _parser = new pb::MessageParser<Polygon>(() => new Polygon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon(Polygon other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polygon Clone() {
      return new Polygon(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nsys.Api.Ntypes.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::Nsys.Api.Ntypes.Point.Parser);
    private readonly pbc::RepeatedField<global::Nsys.Api.Ntypes.Point> points_ = new pbc::RepeatedField<global::Nsys.Api.Ntypes.Point>();
    /// <summary>
    /// Three or more points defining the edges of a simple polygon. 
    /// Automatically closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nsys.Api.Ntypes.Point> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Polygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polygon other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Circle : pb::IMessage<Circle> {
    private static readonly pb::MessageParser<Circle> _parser = new pb::MessageParser<Circle>(() => new Circle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Circle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.GeometryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Circle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Circle(Circle other) : this() {
      center_ = other.center_ != null ? other.center_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Circle Clone() {
      return new Circle(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Point center_;
    /// <summary>
    /// Defines a circular area. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Point Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Circle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Circle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Center, other.Center)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (center_ != null) hash ^= Center.GetHashCode();
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (center_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Center);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Circle other) {
      if (other == null) {
        return;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          Center = new global::Nsys.Api.Ntypes.Point();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (center_ == null) {
              Center = new global::Nsys.Api.Ntypes.Point();
            }
            input.ReadMessage(Center);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
