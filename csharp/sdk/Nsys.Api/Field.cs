// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nsys.io/api/ntypes/field.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nsys.Api.Ntypes {

  /// <summary>Holder for reflection information generated from nsys.io/api/ntypes/field.proto</summary>
  public static partial class FieldReflection {

    #region Descriptor
    /// <summary>File descriptor for nsys.io/api/ntypes/field.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FieldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5uc3lzLmlvL2FwaS9udHlwZXMvZmllbGQucHJvdG8SD25zeXMuYXBpLm50",
            "eXBlcxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxokbnN5cy5pby9hcGkv",
            "bnR5cGVzL3NpZ19wcmVzZW50LnByb3RvGihuc3lzLmlvL2FwaS9udHlwZXMv",
            "d3JpdGluZ19wcmVzZW50LnByb3RvIuwBCgVGaWVsZBIMCgRuYW1lGAEgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAIgASgJEiYKCG1ldGFkYXRhGAMgASgLMhQuZ29v",
            "Z2xlLnByb3RvYnVmLkFueRJEChFzaWduYXR1cmVfcHJlc2VudBgKIAEoCzIn",
            "Lm5zeXMuYXBpLm50eXBlcy5TaWduYXR1cmVQcmVzZW50UHV6emxlSAASSAoT",
            "aGFuZHdyaXRpbmdfcHJlc2VudBgLIAEoCzIpLm5zeXMuYXBpLm50eXBlcy5I",
            "YW5kd3JpdGluZ1ByZXNlbnRQdXp6bGVIAEIICgZwdXp6bGUioQEKCEZpZWxk",
            "Q3V0EkEKEXNpZ25hdHVyZV9wcmVzZW50GAogASgLMiQubnN5cy5hcGkubnR5",
            "cGVzLlNpZ25hdHVyZVByZXNlbnRDdXRIABJFChNoYW5kd3JpdGluZ19wcmVz",
            "ZW50GAsgASgLMiYubnN5cy5hcGkubnR5cGVzLkhhbmR3cml0aW5nUHJlc2Vu",
            "dEN1dEgAQgsKCWZpZWxkX2N1dCKoAQoSU29sdXRpb25QYXJhbWV0ZXJzEkIK",
            "EXNpZ25hdHVyZV9wcmVzZW50GAogASgLMiUubnN5cy5hcGkubnR5cGVzLlNp",
            "Z25hdHVyZVByZXNlbnRIaW50SAASRgoTaGFuZHdyaXRpbmdfcHJlc2VudBgL",
            "IAEoCzInLm5zeXMuYXBpLm50eXBlcy5IYW5kd3JpdGluZ1ByZXNlbnRIaW50",
            "SABCBgoEaGludCLZAQoNRmllbGRTb2x1dGlvbhIUCgx1bnJlc29sdmFibGUY",
            "ASABKAgSEgoKY29uZmlkZW5jZRgCIAEoBRJGChFzaWduYXR1cmVfcHJlc2Vu",
            "dBgKIAEoCzIpLm5zeXMuYXBpLm50eXBlcy5TaWduYXR1cmVQcmVzZW50U29s",
            "dXRpb25IABJKChNoYW5kd3JpdGluZ19wcmVzZW50GAsgASgLMisubnN5cy5h",
            "cGkubnR5cGVzLkhhbmR3cml0aW5nUHJlc2VudFNvbHV0aW9uSABCCgoIc29s",
            "dXRpb25CFFoSbnN5cy5pby9hcGkvbnR5cGVzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Nsys.Api.Ntypes.SigPresentReflection.Descriptor, global::Nsys.Api.Ntypes.WritingPresentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Field), global::Nsys.Api.Ntypes.Field.Parser, new[]{ "Name", "Description", "Metadata", "SignaturePresent", "HandwritingPresent" }, new[]{ "Puzzle" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.FieldCut), global::Nsys.Api.Ntypes.FieldCut.Parser, new[]{ "SignaturePresent", "HandwritingPresent" }, new[]{ "FieldCut" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.SolutionParameters), global::Nsys.Api.Ntypes.SolutionParameters.Parser, new[]{ "SignaturePresent", "HandwritingPresent" }, new[]{ "Hint" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.FieldSolution), global::Nsys.Api.Ntypes.FieldSolution.Parser, new[]{ "Unresolvable", "Confidence", "SignaturePresent", "HandwritingPresent" }, new[]{ "Solution" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Field : pb::IMessage<Field> {
    private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Field> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.FieldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field(Field other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      switch (other.PuzzleCase) {
        case PuzzleOneofCase.SignaturePresent:
          SignaturePresent = other.SignaturePresent.Clone();
          break;
        case PuzzleOneofCase.HandwritingPresent:
          HandwritingPresent = other.HandwritingPresent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field Clone() {
      return new Field(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field's identifier which must be unique within exemplar and match 
    /// the regex '^[0-9A-Za-z.-]{1,48}$'. Automatically generated if not 
    /// supplied in create requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Optional description for client use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any metadata_;
    /// <summary>
    /// Optional meta data for client use. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "signature_present" field.</summary>
    public const int SignaturePresentFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.SignaturePresentPuzzle SignaturePresent {
      get { return puzzleCase_ == PuzzleOneofCase.SignaturePresent ? (global::Nsys.Api.Ntypes.SignaturePresentPuzzle) puzzle_ : null; }
      set {
        puzzle_ = value;
        puzzleCase_ = value == null ? PuzzleOneofCase.None : PuzzleOneofCase.SignaturePresent;
      }
    }

    /// <summary>Field number for the "handwriting_present" field.</summary>
    public const int HandwritingPresentFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.HandwritingPresentPuzzle HandwritingPresent {
      get { return puzzleCase_ == PuzzleOneofCase.HandwritingPresent ? (global::Nsys.Api.Ntypes.HandwritingPresentPuzzle) puzzle_ : null; }
      set {
        puzzle_ = value;
        puzzleCase_ = value == null ? PuzzleOneofCase.None : PuzzleOneofCase.HandwritingPresent;
      }
    }

    private object puzzle_;
    /// <summary>Enum of possible cases for the "puzzle" oneof.</summary>
    public enum PuzzleOneofCase {
      None = 0,
      SignaturePresent = 10,
      HandwritingPresent = 11,
    }
    private PuzzleOneofCase puzzleCase_ = PuzzleOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PuzzleOneofCase PuzzleCase {
      get { return puzzleCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPuzzle() {
      puzzleCase_ = PuzzleOneofCase.None;
      puzzle_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Field);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Field other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(SignaturePresent, other.SignaturePresent)) return false;
      if (!object.Equals(HandwritingPresent, other.HandwritingPresent)) return false;
      if (PuzzleCase != other.PuzzleCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (puzzleCase_ == PuzzleOneofCase.SignaturePresent) hash ^= SignaturePresent.GetHashCode();
      if (puzzleCase_ == PuzzleOneofCase.HandwritingPresent) hash ^= HandwritingPresent.GetHashCode();
      hash ^= (int) puzzleCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (puzzleCase_ == PuzzleOneofCase.SignaturePresent) {
        output.WriteRawTag(82);
        output.WriteMessage(SignaturePresent);
      }
      if (puzzleCase_ == PuzzleOneofCase.HandwritingPresent) {
        output.WriteRawTag(90);
        output.WriteMessage(HandwritingPresent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (puzzleCase_ == PuzzleOneofCase.SignaturePresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignaturePresent);
      }
      if (puzzleCase_ == PuzzleOneofCase.HandwritingPresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandwritingPresent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Field other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      switch (other.PuzzleCase) {
        case PuzzleOneofCase.SignaturePresent:
          if (SignaturePresent == null) {
            SignaturePresent = new global::Nsys.Api.Ntypes.SignaturePresentPuzzle();
          }
          SignaturePresent.MergeFrom(other.SignaturePresent);
          break;
        case PuzzleOneofCase.HandwritingPresent:
          if (HandwritingPresent == null) {
            HandwritingPresent = new global::Nsys.Api.Ntypes.HandwritingPresentPuzzle();
          }
          HandwritingPresent.MergeFrom(other.HandwritingPresent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 82: {
            global::Nsys.Api.Ntypes.SignaturePresentPuzzle subBuilder = new global::Nsys.Api.Ntypes.SignaturePresentPuzzle();
            if (puzzleCase_ == PuzzleOneofCase.SignaturePresent) {
              subBuilder.MergeFrom(SignaturePresent);
            }
            input.ReadMessage(subBuilder);
            SignaturePresent = subBuilder;
            break;
          }
          case 90: {
            global::Nsys.Api.Ntypes.HandwritingPresentPuzzle subBuilder = new global::Nsys.Api.Ntypes.HandwritingPresentPuzzle();
            if (puzzleCase_ == PuzzleOneofCase.HandwritingPresent) {
              subBuilder.MergeFrom(HandwritingPresent);
            }
            input.ReadMessage(subBuilder);
            HandwritingPresent = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Most fields have a single "cut out" from an exemplar-registered 
  /// image but not all and so we this structure is defined so that we 
  /// can generalize handling.
  /// </summary>
  public sealed partial class FieldCut : pb::IMessage<FieldCut> {
    private static readonly pb::MessageParser<FieldCut> _parser = new pb::MessageParser<FieldCut>(() => new FieldCut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldCut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.FieldReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldCut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldCut(FieldCut other) : this() {
      switch (other.FieldCutCase) {
        case FieldCutOneofCase.SignaturePresent:
          SignaturePresent = other.SignaturePresent.Clone();
          break;
        case FieldCutOneofCase.HandwritingPresent:
          HandwritingPresent = other.HandwritingPresent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldCut Clone() {
      return new FieldCut(this);
    }

    /// <summary>Field number for the "signature_present" field.</summary>
    public const int SignaturePresentFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.SignaturePresentCut SignaturePresent {
      get { return fieldCutCase_ == FieldCutOneofCase.SignaturePresent ? (global::Nsys.Api.Ntypes.SignaturePresentCut) fieldCut_ : null; }
      set {
        fieldCut_ = value;
        fieldCutCase_ = value == null ? FieldCutOneofCase.None : FieldCutOneofCase.SignaturePresent;
      }
    }

    /// <summary>Field number for the "handwriting_present" field.</summary>
    public const int HandwritingPresentFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.HandwritingPresentCut HandwritingPresent {
      get { return fieldCutCase_ == FieldCutOneofCase.HandwritingPresent ? (global::Nsys.Api.Ntypes.HandwritingPresentCut) fieldCut_ : null; }
      set {
        fieldCut_ = value;
        fieldCutCase_ = value == null ? FieldCutOneofCase.None : FieldCutOneofCase.HandwritingPresent;
      }
    }

    private object fieldCut_;
    /// <summary>Enum of possible cases for the "field_cut" oneof.</summary>
    public enum FieldCutOneofCase {
      None = 0,
      SignaturePresent = 10,
      HandwritingPresent = 11,
    }
    private FieldCutOneofCase fieldCutCase_ = FieldCutOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldCutOneofCase FieldCutCase {
      get { return fieldCutCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFieldCut() {
      fieldCutCase_ = FieldCutOneofCase.None;
      fieldCut_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldCut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldCut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignaturePresent, other.SignaturePresent)) return false;
      if (!object.Equals(HandwritingPresent, other.HandwritingPresent)) return false;
      if (FieldCutCase != other.FieldCutCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldCutCase_ == FieldCutOneofCase.SignaturePresent) hash ^= SignaturePresent.GetHashCode();
      if (fieldCutCase_ == FieldCutOneofCase.HandwritingPresent) hash ^= HandwritingPresent.GetHashCode();
      hash ^= (int) fieldCutCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldCutCase_ == FieldCutOneofCase.SignaturePresent) {
        output.WriteRawTag(82);
        output.WriteMessage(SignaturePresent);
      }
      if (fieldCutCase_ == FieldCutOneofCase.HandwritingPresent) {
        output.WriteRawTag(90);
        output.WriteMessage(HandwritingPresent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldCutCase_ == FieldCutOneofCase.SignaturePresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignaturePresent);
      }
      if (fieldCutCase_ == FieldCutOneofCase.HandwritingPresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandwritingPresent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldCut other) {
      if (other == null) {
        return;
      }
      switch (other.FieldCutCase) {
        case FieldCutOneofCase.SignaturePresent:
          if (SignaturePresent == null) {
            SignaturePresent = new global::Nsys.Api.Ntypes.SignaturePresentCut();
          }
          SignaturePresent.MergeFrom(other.SignaturePresent);
          break;
        case FieldCutOneofCase.HandwritingPresent:
          if (HandwritingPresent == null) {
            HandwritingPresent = new global::Nsys.Api.Ntypes.HandwritingPresentCut();
          }
          HandwritingPresent.MergeFrom(other.HandwritingPresent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            global::Nsys.Api.Ntypes.SignaturePresentCut subBuilder = new global::Nsys.Api.Ntypes.SignaturePresentCut();
            if (fieldCutCase_ == FieldCutOneofCase.SignaturePresent) {
              subBuilder.MergeFrom(SignaturePresent);
            }
            input.ReadMessage(subBuilder);
            SignaturePresent = subBuilder;
            break;
          }
          case 90: {
            global::Nsys.Api.Ntypes.HandwritingPresentCut subBuilder = new global::Nsys.Api.Ntypes.HandwritingPresentCut();
            if (fieldCutCase_ == FieldCutOneofCase.HandwritingPresent) {
              subBuilder.MergeFrom(HandwritingPresent);
            }
            input.ReadMessage(subBuilder);
            HandwritingPresent = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Coming -- time constraints, level of verification, etc.
  /// ----
  /// </summary>
  public sealed partial class SolutionParameters : pb::IMessage<SolutionParameters> {
    private static readonly pb::MessageParser<SolutionParameters> _parser = new pb::MessageParser<SolutionParameters>(() => new SolutionParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolutionParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.FieldReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolutionParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolutionParameters(SolutionParameters other) : this() {
      switch (other.HintCase) {
        case HintOneofCase.SignaturePresent:
          SignaturePresent = other.SignaturePresent.Clone();
          break;
        case HintOneofCase.HandwritingPresent:
          HandwritingPresent = other.HandwritingPresent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolutionParameters Clone() {
      return new SolutionParameters(this);
    }

    /// <summary>Field number for the "signature_present" field.</summary>
    public const int SignaturePresentFieldNumber = 10;
    /// <summary>
    /// Any dynamic type-specific data needed (e.g., list of names)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.SignaturePresentHint SignaturePresent {
      get { return hintCase_ == HintOneofCase.SignaturePresent ? (global::Nsys.Api.Ntypes.SignaturePresentHint) hint_ : null; }
      set {
        hint_ = value;
        hintCase_ = value == null ? HintOneofCase.None : HintOneofCase.SignaturePresent;
      }
    }

    /// <summary>Field number for the "handwriting_present" field.</summary>
    public const int HandwritingPresentFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.HandwritingPresentHint HandwritingPresent {
      get { return hintCase_ == HintOneofCase.HandwritingPresent ? (global::Nsys.Api.Ntypes.HandwritingPresentHint) hint_ : null; }
      set {
        hint_ = value;
        hintCase_ = value == null ? HintOneofCase.None : HintOneofCase.HandwritingPresent;
      }
    }

    private object hint_;
    /// <summary>Enum of possible cases for the "hint" oneof.</summary>
    public enum HintOneofCase {
      None = 0,
      SignaturePresent = 10,
      HandwritingPresent = 11,
    }
    private HintOneofCase hintCase_ = HintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HintOneofCase HintCase {
      get { return hintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHint() {
      hintCase_ = HintOneofCase.None;
      hint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolutionParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolutionParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignaturePresent, other.SignaturePresent)) return false;
      if (!object.Equals(HandwritingPresent, other.HandwritingPresent)) return false;
      if (HintCase != other.HintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hintCase_ == HintOneofCase.SignaturePresent) hash ^= SignaturePresent.GetHashCode();
      if (hintCase_ == HintOneofCase.HandwritingPresent) hash ^= HandwritingPresent.GetHashCode();
      hash ^= (int) hintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hintCase_ == HintOneofCase.SignaturePresent) {
        output.WriteRawTag(82);
        output.WriteMessage(SignaturePresent);
      }
      if (hintCase_ == HintOneofCase.HandwritingPresent) {
        output.WriteRawTag(90);
        output.WriteMessage(HandwritingPresent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hintCase_ == HintOneofCase.SignaturePresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignaturePresent);
      }
      if (hintCase_ == HintOneofCase.HandwritingPresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandwritingPresent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolutionParameters other) {
      if (other == null) {
        return;
      }
      switch (other.HintCase) {
        case HintOneofCase.SignaturePresent:
          if (SignaturePresent == null) {
            SignaturePresent = new global::Nsys.Api.Ntypes.SignaturePresentHint();
          }
          SignaturePresent.MergeFrom(other.SignaturePresent);
          break;
        case HintOneofCase.HandwritingPresent:
          if (HandwritingPresent == null) {
            HandwritingPresent = new global::Nsys.Api.Ntypes.HandwritingPresentHint();
          }
          HandwritingPresent.MergeFrom(other.HandwritingPresent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 82: {
            global::Nsys.Api.Ntypes.SignaturePresentHint subBuilder = new global::Nsys.Api.Ntypes.SignaturePresentHint();
            if (hintCase_ == HintOneofCase.SignaturePresent) {
              subBuilder.MergeFrom(SignaturePresent);
            }
            input.ReadMessage(subBuilder);
            SignaturePresent = subBuilder;
            break;
          }
          case 90: {
            global::Nsys.Api.Ntypes.HandwritingPresentHint subBuilder = new global::Nsys.Api.Ntypes.HandwritingPresentHint();
            if (hintCase_ == HintOneofCase.HandwritingPresent) {
              subBuilder.MergeFrom(HandwritingPresent);
            }
            input.ReadMessage(subBuilder);
            HandwritingPresent = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FieldSolution : pb::IMessage<FieldSolution> {
    private static readonly pb::MessageParser<FieldSolution> _parser = new pb::MessageParser<FieldSolution>(() => new FieldSolution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldSolution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.FieldReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldSolution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldSolution(FieldSolution other) : this() {
      unresolvable_ = other.unresolvable_;
      confidence_ = other.confidence_;
      switch (other.SolutionCase) {
        case SolutionOneofCase.SignaturePresent:
          SignaturePresent = other.SignaturePresent.Clone();
          break;
        case SolutionOneofCase.HandwritingPresent:
          HandwritingPresent = other.HandwritingPresent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldSolution Clone() {
      return new FieldSolution(this);
    }

    /// <summary>Field number for the "unresolvable" field.</summary>
    public const int UnresolvableFieldNumber = 1;
    private bool unresolvable_;
    /// <summary>
    /// Set true if the field is impossible to solve (e.g., due to a failed 
    /// exemplar match and bad cut)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unresolvable {
      get { return unresolvable_; }
      set {
        unresolvable_ = value;
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private int confidence_;
    /// <summary>
    /// Confidence in the solution in range 1 to 99. 
    /// A value of zero means an unknown level of confidence, not zero confidence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    /// <summary>Field number for the "signature_present" field.</summary>
    public const int SignaturePresentFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.SignaturePresentSolution SignaturePresent {
      get { return solutionCase_ == SolutionOneofCase.SignaturePresent ? (global::Nsys.Api.Ntypes.SignaturePresentSolution) solution_ : null; }
      set {
        solution_ = value;
        solutionCase_ = value == null ? SolutionOneofCase.None : SolutionOneofCase.SignaturePresent;
      }
    }

    /// <summary>Field number for the "handwriting_present" field.</summary>
    public const int HandwritingPresentFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.HandwritingPresentSolution HandwritingPresent {
      get { return solutionCase_ == SolutionOneofCase.HandwritingPresent ? (global::Nsys.Api.Ntypes.HandwritingPresentSolution) solution_ : null; }
      set {
        solution_ = value;
        solutionCase_ = value == null ? SolutionOneofCase.None : SolutionOneofCase.HandwritingPresent;
      }
    }

    private object solution_;
    /// <summary>Enum of possible cases for the "solution" oneof.</summary>
    public enum SolutionOneofCase {
      None = 0,
      SignaturePresent = 10,
      HandwritingPresent = 11,
    }
    private SolutionOneofCase solutionCase_ = SolutionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolutionOneofCase SolutionCase {
      get { return solutionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSolution() {
      solutionCase_ = SolutionOneofCase.None;
      solution_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldSolution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldSolution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unresolvable != other.Unresolvable) return false;
      if (Confidence != other.Confidence) return false;
      if (!object.Equals(SignaturePresent, other.SignaturePresent)) return false;
      if (!object.Equals(HandwritingPresent, other.HandwritingPresent)) return false;
      if (SolutionCase != other.SolutionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unresolvable != false) hash ^= Unresolvable.GetHashCode();
      if (Confidence != 0) hash ^= Confidence.GetHashCode();
      if (solutionCase_ == SolutionOneofCase.SignaturePresent) hash ^= SignaturePresent.GetHashCode();
      if (solutionCase_ == SolutionOneofCase.HandwritingPresent) hash ^= HandwritingPresent.GetHashCode();
      hash ^= (int) solutionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unresolvable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Unresolvable);
      }
      if (Confidence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Confidence);
      }
      if (solutionCase_ == SolutionOneofCase.SignaturePresent) {
        output.WriteRawTag(82);
        output.WriteMessage(SignaturePresent);
      }
      if (solutionCase_ == SolutionOneofCase.HandwritingPresent) {
        output.WriteRawTag(90);
        output.WriteMessage(HandwritingPresent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unresolvable != false) {
        size += 1 + 1;
      }
      if (Confidence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Confidence);
      }
      if (solutionCase_ == SolutionOneofCase.SignaturePresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignaturePresent);
      }
      if (solutionCase_ == SolutionOneofCase.HandwritingPresent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandwritingPresent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldSolution other) {
      if (other == null) {
        return;
      }
      if (other.Unresolvable != false) {
        Unresolvable = other.Unresolvable;
      }
      if (other.Confidence != 0) {
        Confidence = other.Confidence;
      }
      switch (other.SolutionCase) {
        case SolutionOneofCase.SignaturePresent:
          if (SignaturePresent == null) {
            SignaturePresent = new global::Nsys.Api.Ntypes.SignaturePresentSolution();
          }
          SignaturePresent.MergeFrom(other.SignaturePresent);
          break;
        case SolutionOneofCase.HandwritingPresent:
          if (HandwritingPresent == null) {
            HandwritingPresent = new global::Nsys.Api.Ntypes.HandwritingPresentSolution();
          }
          HandwritingPresent.MergeFrom(other.HandwritingPresent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unresolvable = input.ReadBool();
            break;
          }
          case 16: {
            Confidence = input.ReadInt32();
            break;
          }
          case 82: {
            global::Nsys.Api.Ntypes.SignaturePresentSolution subBuilder = new global::Nsys.Api.Ntypes.SignaturePresentSolution();
            if (solutionCase_ == SolutionOneofCase.SignaturePresent) {
              subBuilder.MergeFrom(SignaturePresent);
            }
            input.ReadMessage(subBuilder);
            SignaturePresent = subBuilder;
            break;
          }
          case 90: {
            global::Nsys.Api.Ntypes.HandwritingPresentSolution subBuilder = new global::Nsys.Api.Ntypes.HandwritingPresentSolution();
            if (solutionCase_ == SolutionOneofCase.HandwritingPresent) {
              subBuilder.MergeFrom(HandwritingPresent);
            }
            input.ReadMessage(subBuilder);
            HandwritingPresent = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
