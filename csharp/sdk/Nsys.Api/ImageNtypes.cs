// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nsys.io/api/ntypes/image_ntypes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nsys.Api.Ntypes {

  /// <summary>Holder for reflection information generated from nsys.io/api/ntypes/image_ntypes.proto</summary>
  public static partial class ImageNtypesReflection {

    #region Descriptor
    /// <summary>File descriptor for nsys.io/api/ntypes/image_ntypes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageNtypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVuc3lzLmlvL2FwaS9udHlwZXMvaW1hZ2VfbnR5cGVzLnByb3RvEg9uc3lz",
            "LmFwaS5udHlwZXMaIW5zeXMuaW8vYXBpL250eXBlcy9nZW9tZXRyeS5wcm90",
            "byJHCgVJbWFnZRIMCgRkYXRhGAEgASgMEjAKCGVuY29kaW5nGAIgASgOMh4u",
            "bnN5cy5hcGkubnR5cGVzLkltYWdlRW5jb2RpbmcilgEKDURlc2tld2VkSW1h",
            "Z2USJQoFaW1hZ2UYASABKAsyFi5uc3lzLmFwaS5udHlwZXMuSW1hZ2USFAoM",
            "ZGVza2V3X2FuZ2xlGAIgASgBEhcKD2RlZ3JlZXNfcm90YXRlZBgDIAEoBRIv",
            "ChBiYWNrZ3JvdW5kX2NvbG9yGAQgASgLMhUubnN5cy5hcGkubnR5cGVzLlJH",
            "QkEihgEKEERpbWVuc2lvbmVkSW1hZ2USJQoFaW1hZ2UYASABKAsyFi5uc3lz",
            "LmFwaS5udHlwZXMuSW1hZ2USIwoEc2l6ZRgCIAEoCzIVLm5zeXMuYXBpLm50",
            "eXBlcy5TaXplEiYKBm9mZnNldBgDIAEoCzIWLm5zeXMuYXBpLm50eXBlcy5Q",
            "b2ludCIyCgRSR0JBEgkKAXIYASABKA0SCQoBZxgCIAEoDRIJCgFiGAMgASgN",
            "EgkKAWEYBCABKA0qQQoLSW1hZ2VTb3VyY2USCAoEQVVUTxAAEgsKB1NDQU5O",
            "RVIQARIQCgxTQ0FOTkVSX05TWVMQAhIJCgVQSE9UTxADKjkKDUltYWdlRW5j",
            "b2RpbmcSCwoHSU5WQUxJRBAAEggKBEpQRUcQARIHCgNQTkcQAhIICgRUSUZG",
            "EAMqSQoITGFuZ3VhZ2USCwoHVU5LTk9XThAAEgsKB0VOR0xJU0gQARILCgdT",
            "UEFOSVNIEAISCgoGR0VSTUFOEAMSCgoGRlJFTkNIEARCFFoSbnN5cy5pby9h",
            "cGkvbnR5cGVzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Nsys.Api.Ntypes.GeometryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Nsys.Api.Ntypes.ImageSource), typeof(global::Nsys.Api.Ntypes.ImageEncoding), typeof(global::Nsys.Api.Ntypes.Language), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.Image), global::Nsys.Api.Ntypes.Image.Parser, new[]{ "Data", "Encoding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.DeskewedImage), global::Nsys.Api.Ntypes.DeskewedImage.Parser, new[]{ "Image", "DeskewAngle", "DegreesRotated", "BackgroundColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.DimensionedImage), global::Nsys.Api.Ntypes.DimensionedImage.Parser, new[]{ "Image", "Size", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Ntypes.RGBA), global::Nsys.Api.Ntypes.RGBA.Parser, new[]{ "R", "G", "B", "A" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ImageSource {
    /// <summary>
    /// Automatically determine the image type.
    /// </summary>
    [pbr::OriginalName("AUTO")] Auto = 0,
    /// <summary>
    /// Image originated from a generic scanner of some sort. DPI unknown.
    /// </summary>
    [pbr::OriginalName("SCANNER")] Scanner = 1,
    /// <summary>
    /// Image is 300dpi JPEG2000 originating from our PDS-6000 based system.
    /// </summary>
    [pbr::OriginalName("SCANNER_NSYS")] ScannerNsys = 2,
    /// <summary>
    /// Image is a raw photograph which likely needs document isolation and
    /// perspective correction in addition to deskew and orienting.
    /// If photo originated from scanner app or similar that does the first
    /// two already, use "auto" instead.
    /// </summary>
    [pbr::OriginalName("PHOTO")] Photo = 3,
  }

  public enum ImageEncoding {
    [pbr::OriginalName("INVALID")] Invalid = 0,
    [pbr::OriginalName("JPEG")] Jpeg = 1,
    [pbr::OriginalName("PNG")] Png = 2,
    [pbr::OriginalName("TIFF")] Tiff = 3,
  }

  public enum Language {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("ENGLISH")] English = 1,
    [pbr::OriginalName("SPANISH")] Spanish = 2,
    [pbr::OriginalName("GERMAN")] German = 3,
    [pbr::OriginalName("FRENCH")] French = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.ImageNtypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      data_ = other.data_;
      encoding_ = other.encoding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// The encoded image data bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 2;
    private global::Nsys.Api.Ntypes.ImageEncoding encoding_ = 0;
    /// <summary>
    /// The image encoding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.ImageEncoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Encoding != other.Encoding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (Encoding != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Encoding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 16: {
            Encoding = (global::Nsys.Api.Ntypes.ImageEncoding) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeskewedImage : pb::IMessage<DeskewedImage> {
    private static readonly pb::MessageParser<DeskewedImage> _parser = new pb::MessageParser<DeskewedImage>(() => new DeskewedImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeskewedImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.ImageNtypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskewedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskewedImage(DeskewedImage other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      deskewAngle_ = other.deskewAngle_;
      degreesRotated_ = other.degreesRotated_;
      backgroundColor_ = other.backgroundColor_ != null ? other.backgroundColor_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeskewedImage Clone() {
      return new DeskewedImage(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Image image_;
    /// <summary>
    /// An image that the nsys service has deskewed and oriented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "deskew_angle" field.</summary>
    public const int DeskewAngleFieldNumber = 2;
    private double deskewAngle_;
    /// <summary>
    /// Clockwise degrees the image had to be rotated to bring text lines
    /// into a horizontal or vertical orientation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeskewAngle {
      get { return deskewAngle_; }
      set {
        deskewAngle_ = value;
      }
    }

    /// <summary>Field number for the "degrees_rotated" field.</summary>
    public const int DegreesRotatedFieldNumber = 3;
    private int degreesRotated_;
    /// <summary>
    /// 0, 90, 180, or 270. The rotation that had to performed to bring
    /// the text lines into an upright and horizontal orientation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DegreesRotated {
      get { return degreesRotated_; }
      set {
        degreesRotated_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 4;
    private global::Nsys.Api.Ntypes.RGBA backgroundColor_;
    /// <summary>
    /// The dominant color of the image. Probably.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.RGBA BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeskewedImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeskewedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeskewAngle, other.DeskewAngle)) return false;
      if (DegreesRotated != other.DegreesRotated) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (DeskewAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeskewAngle);
      if (DegreesRotated != 0) hash ^= DegreesRotated.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (DeskewAngle != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DeskewAngle);
      }
      if (DegreesRotated != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DegreesRotated);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (DeskewAngle != 0D) {
        size += 1 + 8;
      }
      if (DegreesRotated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DegreesRotated);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeskewedImage other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Nsys.Api.Ntypes.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.DeskewAngle != 0D) {
        DeskewAngle = other.DeskewAngle;
      }
      if (other.DegreesRotated != 0) {
        DegreesRotated = other.DegreesRotated;
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          BackgroundColor = new global::Nsys.Api.Ntypes.RGBA();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Nsys.Api.Ntypes.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 17: {
            DeskewAngle = input.ReadDouble();
            break;
          }
          case 24: {
            DegreesRotated = input.ReadInt32();
            break;
          }
          case 34: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Nsys.Api.Ntypes.RGBA();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DimensionedImage : pb::IMessage<DimensionedImage> {
    private static readonly pb::MessageParser<DimensionedImage> _parser = new pb::MessageParser<DimensionedImage>(() => new DimensionedImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimensionedImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.ImageNtypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionedImage(DimensionedImage other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimensionedImage Clone() {
      return new DimensionedImage(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Image image_;
    /// <summary>
    /// An image where the physical real-world dimensions are known.
    /// All elements of this message are required and must be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::Nsys.Api.Ntypes.Size size_;
    /// <summary>
    /// Dimensions of the image in centimeters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Size Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private global::Nsys.Api.Ntypes.Point offset_;
    /// <summary>
    /// Top left offset of the image. Very likely to be zero unless it's a cut.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Point Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimensionedImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimensionedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (size_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
      if (offset_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimensionedImage other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Nsys.Api.Ntypes.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Nsys.Api.Ntypes.Size();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Nsys.Api.Ntypes.Point();
        }
        Offset.MergeFrom(other.Offset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Nsys.Api.Ntypes.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 18: {
            if (size_ == null) {
              Size = new global::Nsys.Api.Ntypes.Size();
            }
            input.ReadMessage(Size);
            break;
          }
          case 26: {
            if (offset_ == null) {
              Offset = new global::Nsys.Api.Ntypes.Point();
            }
            input.ReadMessage(Offset);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RGBA : pb::IMessage<RGBA> {
    private static readonly pb::MessageParser<RGBA> _parser = new pb::MessageParser<RGBA>(() => new RGBA());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RGBA> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Ntypes.ImageNtypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBA(RGBA other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBA Clone() {
      return new RGBA(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private uint r_;
    /// <summary>
    /// RGBA color
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private uint a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RGBA);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RGBA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      if (A != other.A) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (A != 0) hash ^= A.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(B);
      }
      if (A != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RGBA other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.A != 0) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            R = input.ReadUInt32();
            break;
          }
          case 16: {
            G = input.ReadUInt32();
            break;
          }
          case 24: {
            B = input.ReadUInt32();
            break;
          }
          case 32: {
            A = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
