// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nsys.io/api/image/image.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nsys.Api.Image {
  /// <summary>
  /// The common sequence of calls if one is trying to extract field 
  /// values from a submitted image:
  ///   (1) UploadImage    -- upload an image
  ///   (2) RegisterImage  -- find a matching exemplar and 
  ///                         register the image against it
  ///   (3) SolveField(s)  -- find solutions to one or more of the 
  ///                         fields defined on the matched exemplar
  ///	
  /// Whether or not one uses the LRO variant of each method is purely
  /// a choice dependent upon client architecture and developer tastes.
  /// There is no difference in implementation on the backend.
  /// </summary>
  public static partial class ImageProcessing
  {
    static readonly string __ServiceName = "nsys.api.image.ImageProcessing";

    static readonly grpc::Marshaller<global::Nsys.Api.Image.UploadImageRequest> __Marshaller_nsys_api_image_UploadImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.UploadImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.UploadImageResponse> __Marshaller_nsys_api_image_UploadImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.UploadImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.RegisterImageRequest> __Marshaller_nsys_api_image_RegisterImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.RegisterImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.RegisterImageResponse> __Marshaller_nsys_api_image_RegisterImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.RegisterImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetExemplarSnapshotRequest> __Marshaller_nsys_api_image_GetExemplarSnapshotRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetExemplarSnapshotRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetExemplarSnapshotResponse> __Marshaller_nsys_api_image_GetExemplarSnapshotResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetExemplarSnapshotResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.SolveFieldRequest> __Marshaller_nsys_api_image_SolveFieldRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.SolveFieldRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.SolveFieldResponse> __Marshaller_nsys_api_image_SolveFieldResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.SolveFieldResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetBaseImageRequest> __Marshaller_nsys_api_image_GetBaseImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetBaseImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetBaseImageResponse> __Marshaller_nsys_api_image_GetBaseImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetBaseImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetDeskewedImageRequest> __Marshaller_nsys_api_image_GetDeskewedImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetDeskewedImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetDeskewedImageResponse> __Marshaller_nsys_api_image_GetDeskewedImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetDeskewedImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetRegisteredImageRequest> __Marshaller_nsys_api_image_GetRegisteredImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetRegisteredImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetRegisteredImageResponse> __Marshaller_nsys_api_image_GetRegisteredImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetRegisteredImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetFieldCutRequest> __Marshaller_nsys_api_image_GetFieldCutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetFieldCutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetFieldCutResponse> __Marshaller_nsys_api_image_GetFieldCutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetFieldCutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.ListSolvedFieldsRequest> __Marshaller_nsys_api_image_ListSolvedFieldsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.ListSolvedFieldsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.ListSolvedFieldsResponse> __Marshaller_nsys_api_image_ListSolvedFieldsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.ListSolvedFieldsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetFieldSolutionsRequest> __Marshaller_nsys_api_image_GetFieldSolutionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetFieldSolutionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nsys.Api.Image.GetFieldSolutionsResponse> __Marshaller_nsys_api_image_GetFieldSolutionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nsys.Api.Image.GetFieldSolutionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Nsys.Api.Image.UploadImageRequest, global::Nsys.Api.Image.UploadImageResponse> __Method_UploadImage = new grpc::Method<global::Nsys.Api.Image.UploadImageRequest, global::Nsys.Api.Image.UploadImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadImage",
        __Marshaller_nsys_api_image_UploadImageRequest,
        __Marshaller_nsys_api_image_UploadImageResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.UploadImageRequest, global::Google.LongRunning.Operation> __Method_UploadImageLRO = new grpc::Method<global::Nsys.Api.Image.UploadImageRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadImageLRO",
        __Marshaller_nsys_api_image_UploadImageRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.RegisterImageRequest, global::Nsys.Api.Image.RegisterImageResponse> __Method_RegisterImage = new grpc::Method<global::Nsys.Api.Image.RegisterImageRequest, global::Nsys.Api.Image.RegisterImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterImage",
        __Marshaller_nsys_api_image_RegisterImageRequest,
        __Marshaller_nsys_api_image_RegisterImageResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.RegisterImageRequest, global::Google.LongRunning.Operation> __Method_RegisterImageLRO = new grpc::Method<global::Nsys.Api.Image.RegisterImageRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterImageLRO",
        __Marshaller_nsys_api_image_RegisterImageRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.GetExemplarSnapshotRequest, global::Nsys.Api.Image.GetExemplarSnapshotResponse> __Method_GetExemplarSnapshot = new grpc::Method<global::Nsys.Api.Image.GetExemplarSnapshotRequest, global::Nsys.Api.Image.GetExemplarSnapshotResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExemplarSnapshot",
        __Marshaller_nsys_api_image_GetExemplarSnapshotRequest,
        __Marshaller_nsys_api_image_GetExemplarSnapshotResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.GetExemplarSnapshotRequest, global::Google.LongRunning.Operation> __Method_GetExemplarSnapshotLRO = new grpc::Method<global::Nsys.Api.Image.GetExemplarSnapshotRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExemplarSnapshotLRO",
        __Marshaller_nsys_api_image_GetExemplarSnapshotRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.SolveFieldRequest, global::Nsys.Api.Image.SolveFieldResponse> __Method_SolveField = new grpc::Method<global::Nsys.Api.Image.SolveFieldRequest, global::Nsys.Api.Image.SolveFieldResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SolveField",
        __Marshaller_nsys_api_image_SolveFieldRequest,
        __Marshaller_nsys_api_image_SolveFieldResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.SolveFieldRequest, global::Google.LongRunning.Operation> __Method_SolveFieldLRO = new grpc::Method<global::Nsys.Api.Image.SolveFieldRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SolveFieldLRO",
        __Marshaller_nsys_api_image_SolveFieldRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.GetBaseImageRequest, global::Nsys.Api.Image.GetBaseImageResponse> __Method_GetBaseImage = new grpc::Method<global::Nsys.Api.Image.GetBaseImageRequest, global::Nsys.Api.Image.GetBaseImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBaseImage",
        __Marshaller_nsys_api_image_GetBaseImageRequest,
        __Marshaller_nsys_api_image_GetBaseImageResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.GetBaseImageRequest, global::Google.LongRunning.Operation> __Method_GetBaseImageLRO = new grpc::Method<global::Nsys.Api.Image.GetBaseImageRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBaseImageLRO",
        __Marshaller_nsys_api_image_GetBaseImageRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.GetDeskewedImageRequest, global::Nsys.Api.Image.GetDeskewedImageResponse> __Method_GetDeskewedImage = new grpc::Method<global::Nsys.Api.Image.GetDeskewedImageRequest, global::Nsys.Api.Image.GetDeskewedImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeskewedImage",
        __Marshaller_nsys_api_image_GetDeskewedImageRequest,
        __Marshaller_nsys_api_image_GetDeskewedImageResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.GetDeskewedImageRequest, global::Google.LongRunning.Operation> __Method_GetDeskewedImageLRO = new grpc::Method<global::Nsys.Api.Image.GetDeskewedImageRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeskewedImageLRO",
        __Marshaller_nsys_api_image_GetDeskewedImageRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.GetRegisteredImageRequest, global::Nsys.Api.Image.GetRegisteredImageResponse> __Method_GetRegisteredImage = new grpc::Method<global::Nsys.Api.Image.GetRegisteredImageRequest, global::Nsys.Api.Image.GetRegisteredImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegisteredImage",
        __Marshaller_nsys_api_image_GetRegisteredImageRequest,
        __Marshaller_nsys_api_image_GetRegisteredImageResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.GetRegisteredImageRequest, global::Google.LongRunning.Operation> __Method_GetRegisteredImageLRO = new grpc::Method<global::Nsys.Api.Image.GetRegisteredImageRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegisteredImageLRO",
        __Marshaller_nsys_api_image_GetRegisteredImageRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.GetFieldCutRequest, global::Nsys.Api.Image.GetFieldCutResponse> __Method_GetFieldCut = new grpc::Method<global::Nsys.Api.Image.GetFieldCutRequest, global::Nsys.Api.Image.GetFieldCutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFieldCut",
        __Marshaller_nsys_api_image_GetFieldCutRequest,
        __Marshaller_nsys_api_image_GetFieldCutResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.GetFieldCutRequest, global::Google.LongRunning.Operation> __Method_GetFieldCutLRO = new grpc::Method<global::Nsys.Api.Image.GetFieldCutRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFieldCutLRO",
        __Marshaller_nsys_api_image_GetFieldCutRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.ListSolvedFieldsRequest, global::Nsys.Api.Image.ListSolvedFieldsResponse> __Method_ListSolvedFields = new grpc::Method<global::Nsys.Api.Image.ListSolvedFieldsRequest, global::Nsys.Api.Image.ListSolvedFieldsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSolvedFields",
        __Marshaller_nsys_api_image_ListSolvedFieldsRequest,
        __Marshaller_nsys_api_image_ListSolvedFieldsResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.ListSolvedFieldsRequest, global::Google.LongRunning.Operation> __Method_ListSolvedFieldsLRO = new grpc::Method<global::Nsys.Api.Image.ListSolvedFieldsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSolvedFieldsLRO",
        __Marshaller_nsys_api_image_ListSolvedFieldsRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Nsys.Api.Image.GetFieldSolutionsRequest, global::Nsys.Api.Image.GetFieldSolutionsResponse> __Method_GetFieldSolutions = new grpc::Method<global::Nsys.Api.Image.GetFieldSolutionsRequest, global::Nsys.Api.Image.GetFieldSolutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFieldSolutions",
        __Marshaller_nsys_api_image_GetFieldSolutionsRequest,
        __Marshaller_nsys_api_image_GetFieldSolutionsResponse);

    static readonly grpc::Method<global::Nsys.Api.Image.GetFieldSolutionsRequest, global::Google.LongRunning.Operation> __Method_GetFieldSolutionsLRO = new grpc::Method<global::Nsys.Api.Image.GetFieldSolutionsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFieldSolutionsLRO",
        __Marshaller_nsys_api_image_GetFieldSolutionsRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ImageProcessing</summary>
    public partial class ImageProcessingClient : grpc::ClientBase<ImageProcessingClient>
    {
      /// <summary>Creates a new client for ImageProcessing</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ImageProcessingClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ImageProcessing that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ImageProcessingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ImageProcessingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ImageProcessingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Upload an image in preparation for DeskewImage and/or RegisterImage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.UploadImageResponse UploadImage(global::Nsys.Api.Image.UploadImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload an image in preparation for DeskewImage and/or RegisterImage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.UploadImageResponse UploadImage(global::Nsys.Api.Image.UploadImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadImage, null, options, request);
      }
      /// <summary>
      /// Upload an image in preparation for DeskewImage and/or RegisterImage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.UploadImageResponse> UploadImageAsync(global::Nsys.Api.Image.UploadImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload an image in preparation for DeskewImage and/or RegisterImage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.UploadImageResponse> UploadImageAsync(global::Nsys.Api.Image.UploadImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadImage, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation UploadImageLRO(global::Nsys.Api.Image.UploadImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImageLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation UploadImageLRO(global::Nsys.Api.Image.UploadImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadImageLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UploadImageLROAsync(global::Nsys.Api.Image.UploadImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadImageLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UploadImageLROAsync(global::Nsys.Api.Image.UploadImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadImageLRO, null, options, request);
      }
      /// <summary>
      /// Find the exemplar best matching a image then register that image
      /// against the exemplar, i.e., manipulate the image such that it lays
      /// cleanly over the exemplar. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.RegisterImageResponse RegisterImage(global::Nsys.Api.Image.RegisterImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find the exemplar best matching a image then register that image
      /// against the exemplar, i.e., manipulate the image such that it lays
      /// cleanly over the exemplar. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.RegisterImageResponse RegisterImage(global::Nsys.Api.Image.RegisterImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterImage, null, options, request);
      }
      /// <summary>
      /// Find the exemplar best matching a image then register that image
      /// against the exemplar, i.e., manipulate the image such that it lays
      /// cleanly over the exemplar. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.RegisterImageResponse> RegisterImageAsync(global::Nsys.Api.Image.RegisterImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find the exemplar best matching a image then register that image
      /// against the exemplar, i.e., manipulate the image such that it lays
      /// cleanly over the exemplar. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.RegisterImageResponse> RegisterImageAsync(global::Nsys.Api.Image.RegisterImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterImage, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation RegisterImageLRO(global::Nsys.Api.Image.RegisterImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterImageLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation RegisterImageLRO(global::Nsys.Api.Image.RegisterImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterImageLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RegisterImageLROAsync(global::Nsys.Api.Image.RegisterImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterImageLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RegisterImageLROAsync(global::Nsys.Api.Image.RegisterImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterImageLRO, null, options, request);
      }
      public virtual global::Nsys.Api.Image.GetExemplarSnapshotResponse GetExemplarSnapshot(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExemplarSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nsys.Api.Image.GetExemplarSnapshotResponse GetExemplarSnapshot(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExemplarSnapshot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetExemplarSnapshotResponse> GetExemplarSnapshotAsync(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExemplarSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetExemplarSnapshotResponse> GetExemplarSnapshotAsync(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExemplarSnapshot, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation GetExemplarSnapshotLRO(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExemplarSnapshotLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation GetExemplarSnapshotLRO(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExemplarSnapshotLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetExemplarSnapshotLROAsync(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExemplarSnapshotLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetExemplarSnapshotLROAsync(global::Nsys.Api.Image.GetExemplarSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExemplarSnapshotLRO, null, options, request);
      }
      /// <summary>
      /// Solve a field on an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.SolveFieldResponse SolveField(global::Nsys.Api.Image.SolveFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SolveField(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Solve a field on an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.SolveFieldResponse SolveField(global::Nsys.Api.Image.SolveFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SolveField, null, options, request);
      }
      /// <summary>
      /// Solve a field on an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.SolveFieldResponse> SolveFieldAsync(global::Nsys.Api.Image.SolveFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SolveFieldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Solve a field on an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.SolveFieldResponse> SolveFieldAsync(global::Nsys.Api.Image.SolveFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SolveField, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation SolveFieldLRO(global::Nsys.Api.Image.SolveFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SolveFieldLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation SolveFieldLRO(global::Nsys.Api.Image.SolveFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SolveFieldLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SolveFieldLROAsync(global::Nsys.Api.Image.SolveFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SolveFieldLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SolveFieldLROAsync(global::Nsys.Api.Image.SolveFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SolveFieldLRO, null, options, request);
      }
      /// <summary>
      /// Returns a copy of the base uploaded image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetBaseImageResponse GetBaseImage(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaseImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a copy of the base uploaded image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetBaseImageResponse GetBaseImage(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBaseImage, null, options, request);
      }
      /// <summary>
      /// Returns a copy of the base uploaded image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetBaseImageResponse> GetBaseImageAsync(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaseImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a copy of the base uploaded image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetBaseImageResponse> GetBaseImageAsync(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBaseImage, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation GetBaseImageLRO(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaseImageLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation GetBaseImageLRO(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBaseImageLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetBaseImageLROAsync(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaseImageLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetBaseImageLROAsync(global::Nsys.Api.Image.GetBaseImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBaseImageLRO, null, options, request);
      }
      /// <summary>
      /// Returns a copy of the deskewed and oriented version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetDeskewedImageResponse GetDeskewedImage(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeskewedImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a copy of the deskewed and oriented version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetDeskewedImageResponse GetDeskewedImage(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeskewedImage, null, options, request);
      }
      /// <summary>
      /// Returns a copy of the deskewed and oriented version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetDeskewedImageResponse> GetDeskewedImageAsync(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeskewedImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a copy of the deskewed and oriented version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetDeskewedImageResponse> GetDeskewedImageAsync(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeskewedImage, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation GetDeskewedImageLRO(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeskewedImageLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation GetDeskewedImageLRO(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeskewedImageLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetDeskewedImageLROAsync(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeskewedImageLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetDeskewedImageLROAsync(global::Nsys.Api.Image.GetDeskewedImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeskewedImageLRO, null, options, request);
      }
      /// <summary>
      /// Returns a copy of the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetRegisteredImageResponse GetRegisteredImage(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a copy of the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetRegisteredImageResponse GetRegisteredImage(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegisteredImage, null, options, request);
      }
      /// <summary>
      /// Returns a copy of the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetRegisteredImageResponse> GetRegisteredImageAsync(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a copy of the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetRegisteredImageResponse> GetRegisteredImageAsync(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegisteredImage, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation GetRegisteredImageLRO(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredImageLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation GetRegisteredImageLRO(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegisteredImageLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetRegisteredImageLROAsync(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegisteredImageLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetRegisteredImageLROAsync(global::Nsys.Api.Image.GetRegisteredImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegisteredImageLRO, null, options, request);
      }
      /// <summary>
      /// Get a field cut from the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetFieldCutResponse GetFieldCut(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldCut(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a field cut from the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetFieldCutResponse GetFieldCut(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFieldCut, null, options, request);
      }
      /// <summary>
      /// Get a field cut from the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetFieldCutResponse> GetFieldCutAsync(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldCutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a field cut from the exemplar-registered version of an image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetFieldCutResponse> GetFieldCutAsync(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFieldCut, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation GetFieldCutLRO(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldCutLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation GetFieldCutLRO(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFieldCutLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetFieldCutLROAsync(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldCutLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetFieldCutLROAsync(global::Nsys.Api.Image.GetFieldCutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFieldCutLRO, null, options, request);
      }
      /// <summary>
      /// Return a list of fields which have solutions available.
      /// Only returns field identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.ListSolvedFieldsResponse ListSolvedFields(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSolvedFields(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a list of fields which have solutions available.
      /// Only returns field identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.ListSolvedFieldsResponse ListSolvedFields(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSolvedFields, null, options, request);
      }
      /// <summary>
      /// Return a list of fields which have solutions available.
      /// Only returns field identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.ListSolvedFieldsResponse> ListSolvedFieldsAsync(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSolvedFieldsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a list of fields which have solutions available.
      /// Only returns field identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.ListSolvedFieldsResponse> ListSolvedFieldsAsync(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSolvedFields, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation ListSolvedFieldsLRO(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSolvedFieldsLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation ListSolvedFieldsLRO(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSolvedFieldsLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ListSolvedFieldsLROAsync(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSolvedFieldsLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ListSolvedFieldsLROAsync(global::Nsys.Api.Image.ListSolvedFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSolvedFieldsLRO, null, options, request);
      }
      /// <summary>
      /// Query for previously-solved field solutions.  
      /// Returns the full solutions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetFieldSolutionsResponse GetFieldSolutions(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldSolutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query for previously-solved field solutions.  
      /// Returns the full solutions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nsys.Api.Image.GetFieldSolutionsResponse GetFieldSolutions(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFieldSolutions, null, options, request);
      }
      /// <summary>
      /// Query for previously-solved field solutions.  
      /// Returns the full solutions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetFieldSolutionsResponse> GetFieldSolutionsAsync(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldSolutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query for previously-solved field solutions.  
      /// Returns the full solutions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nsys.Api.Image.GetFieldSolutionsResponse> GetFieldSolutionsAsync(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFieldSolutions, null, options, request);
      }
      public virtual global::Google.LongRunning.Operation GetFieldSolutionsLRO(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldSolutionsLRO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.LongRunning.Operation GetFieldSolutionsLRO(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFieldSolutionsLRO, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetFieldSolutionsLROAsync(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldSolutionsLROAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetFieldSolutionsLROAsync(global::Nsys.Api.Image.GetFieldSolutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFieldSolutionsLRO, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ImageProcessingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImageProcessingClient(configuration);
      }
    }

  }
}
#endregion
