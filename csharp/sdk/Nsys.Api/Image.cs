// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nsys.io/api/image/image.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nsys.Api.Image {

  /// <summary>Holder for reflection information generated from nsys.io/api/image/image.proto</summary>
  public static partial class ImageReflection {

    #region Descriptor
    /// <summary>File descriptor for nsys.io/api/image/image.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1uc3lzLmlvL2FwaS9pbWFnZS9pbWFnZS5wcm90bxIObnN5cy5hcGkuaW1h",
            "Z2UaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aI2dvb2dsZS9s",
            "b25ncnVubmluZy9vcGVyYXRpb25zLnByb3RvGh5uc3lzLmlvL2FwaS9udHlw",
            "ZXMvZmllbGQucHJvdG8aJW5zeXMuaW8vYXBpL250eXBlcy9pbWFnZV9udHlw",
            "ZXMucHJvdG8aKG5zeXMuaW8vYXBpL250eXBlcy9leGVtcGxhcl9udHlwZXMu",
            "cHJvdG8ifQoSVXBsb2FkSW1hZ2VSZXF1ZXN0EgwKBG5hbWUYASABKAkSJQoF",
            "aW1hZ2UYAiABKAsyFi5uc3lzLmFwaS5udHlwZXMuSW1hZ2USMgoMaW1hZ2Vf",
            "c291cmNlGAMgASgOMhwubnN5cy5hcGkubnR5cGVzLkltYWdlU291cmNlIssB",
            "ChNVcGxvYWRJbWFnZVJlc3BvbnNlEgwKBG5hbWUYASABKAkSLwoLZXhwaXJl",
            "X3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhUKDWRl",
            "c2tld19mYWlsZWQYAyABKAgSFAoMZGVza2V3X2FuZ2xlGAQgASgBEhcKD2Rl",
            "Z3JlZXNfcm90YXRlZBgFIAEoBRIvChBiYWNrZ3JvdW5kX2NvbG9yGAYgASgL",
            "MhUubnN5cy5hcGkubnR5cGVzLlJHQkEiSwoaR2V0RXhlbXBsYXJTbmFwc2hv",
            "dFJlcXVlc3QSEgoKaW1hZ2VfbmFtZRgBIAEoCRIZChFyZXR1cm5faW1hZ2Vf",
            "ZGF0YRgCIAEoCCJTChtHZXRFeGVtcGxhclNuYXBzaG90UmVzcG9uc2USNAoR",
            "ZXhlbXBsYXJfc25hcHNob3QYASABKAsyGS5uc3lzLmFwaS5udHlwZXMuRXhl",
            "bXBsYXIifQoRU29sdmVGaWVsZFJlcXVlc3QSEgoKaW1hZ2VfbmFtZRgBIAEo",
            "CRISCgpmaWVsZF9uYW1lGAIgASgJEkAKE3NvbHV0aW9uX3BhcmFtZXRlcnMY",
            "AyABKAsyIy5uc3lzLmFwaS5udHlwZXMuU29sdXRpb25QYXJhbWV0ZXJzIkwK",
            "ElNvbHZlRmllbGRSZXNwb25zZRI2Cg5maWVsZF9zb2x1dGlvbhgBIAEoCzIe",
            "Lm5zeXMuYXBpLm50eXBlcy5GaWVsZFNvbHV0aW9uIi0KF0xpc3RTb2x2ZWRG",
            "aWVsZHNSZXF1ZXN0EhIKCmltYWdlX25hbWUYASABKAkiLwoYTGlzdFNvbHZl",
            "ZEZpZWxkc1Jlc3BvbnNlEhMKC2ZpZWxkX25hbWVzGAEgAygJIkMKGEdldEZp",
            "ZWxkU29sdXRpb25zUmVxdWVzdBISCgppbWFnZV9uYW1lGAEgASgJEhMKC2Zp",
            "ZWxkX25hbWVzGAIgAygJIsoBChlHZXRGaWVsZFNvbHV0aW9uc1Jlc3BvbnNl",
            "ElYKD2ZpZWxkX3NvbHV0aW9ucxgBIAMoCzI9Lm5zeXMuYXBpLmltYWdlLkdl",
            "dEZpZWxkU29sdXRpb25zUmVzcG9uc2UuRmllbGRTb2x1dGlvbnNFbnRyeRpV",
            "ChNGaWVsZFNvbHV0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRItCgV2YWx1ZRgC",
            "IAEoCzIeLm5zeXMuYXBpLm50eXBlcy5GaWVsZFNvbHV0aW9uOgI4ASIpChNH",
            "ZXRCYXNlSW1hZ2VSZXF1ZXN0EhIKCmltYWdlX25hbWUYASABKAkiQgoUR2V0",
            "QmFzZUltYWdlUmVzcG9uc2USKgoKYmFzZV9pbWFnZRgBIAEoCzIWLm5zeXMu",
            "YXBpLm50eXBlcy5JbWFnZSItChdHZXREZXNrZXdlZEltYWdlUmVxdWVzdBIS",
            "CgppbWFnZV9uYW1lGAEgASgJIlIKGEdldERlc2tld2VkSW1hZ2VSZXNwb25z",
            "ZRI2Cg5kZXNrZXdlZF9pbWFnZRgBIAEoCzIeLm5zeXMuYXBpLm50eXBlcy5E",
            "ZXNrZXdlZEltYWdlInQKFFJlZ2lzdGVySW1hZ2VSZXF1ZXN0EhIKCmltYWdl",
            "X25hbWUYASABKAkSKwoIbGFuZ3VhZ2UYAiABKA4yGS5uc3lzLmFwaS5udHlw",
            "ZXMuTGFuZ3VhZ2USGwoTY2FuZGlkYXRlX2V4ZW1wbGFycxgDIAMoCSJEChVS",
            "ZWdpc3RlckltYWdlUmVzcG9uc2USGQoRc2VsZWN0ZWRfZXhlbXBsYXIYASAB",
            "KAkSEAoIbm9fbWF0Y2gYAiABKAgiLwoZR2V0UmVnaXN0ZXJlZEltYWdlUmVx",
            "dWVzdBISCgppbWFnZV9uYW1lGAEgASgJIk4KGkdldFJlZ2lzdGVyZWRJbWFn",
            "ZVJlc3BvbnNlEjAKBWltYWdlGAEgASgLMiEubnN5cy5hcGkubnR5cGVzLkRp",
            "bWVuc2lvbmVkSW1hZ2UiPAoSR2V0RmllbGRDdXRSZXF1ZXN0EhIKCmltYWdl",
            "X25hbWUYASABKAkSEgoKZmllbGRfbmFtZRgCIAEoCSJDChNHZXRGaWVsZEN1",
            "dFJlc3BvbnNlEiwKCWZpZWxkX2N1dBgBIAEoCzIZLm5zeXMuYXBpLm50eXBl",
            "cy5GaWVsZEN1dDKgDwoPSW1hZ2VQcm9jZXNzaW5nElgKC1VwbG9hZEltYWdl",
            "EiIubnN5cy5hcGkuaW1hZ2UuVXBsb2FkSW1hZ2VSZXF1ZXN0GiMubnN5cy5h",
            "cGkuaW1hZ2UuVXBsb2FkSW1hZ2VSZXNwb25zZSIAElUKDlVwbG9hZEltYWdl",
            "TFJPEiIubnN5cy5hcGkuaW1hZ2UuVXBsb2FkSW1hZ2VSZXF1ZXN0Gh0uZ29v",
            "Z2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiIAEl4KDVJlZ2lzdGVySW1hZ2US",
            "JC5uc3lzLmFwaS5pbWFnZS5SZWdpc3RlckltYWdlUmVxdWVzdBolLm5zeXMu",
            "YXBpLmltYWdlLlJlZ2lzdGVySW1hZ2VSZXNwb25zZSIAElkKEFJlZ2lzdGVy",
            "SW1hZ2VMUk8SJC5uc3lzLmFwaS5pbWFnZS5SZWdpc3RlckltYWdlUmVxdWVz",
            "dBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iABJwChNHZXRFeGVt",
            "cGxhclNuYXBzaG90EioubnN5cy5hcGkuaW1hZ2UuR2V0RXhlbXBsYXJTbmFw",
            "c2hvdFJlcXVlc3QaKy5uc3lzLmFwaS5pbWFnZS5HZXRFeGVtcGxhclNuYXBz",
            "aG90UmVzcG9uc2UiABJlChZHZXRFeGVtcGxhclNuYXBzaG90TFJPEioubnN5",
            "cy5hcGkuaW1hZ2UuR2V0RXhlbXBsYXJTbmFwc2hvdFJlcXVlc3QaHS5nb29n",
            "bGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIgASVQoKU29sdmVGaWVsZBIhLm5z",
            "eXMuYXBpLmltYWdlLlNvbHZlRmllbGRSZXF1ZXN0GiIubnN5cy5hcGkuaW1h",
            "Z2UuU29sdmVGaWVsZFJlc3BvbnNlIgASUwoNU29sdmVGaWVsZExSTxIhLm5z",
            "eXMuYXBpLmltYWdlLlNvbHZlRmllbGRSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdy",
            "dW5uaW5nLk9wZXJhdGlvbiIAElsKDEdldEJhc2VJbWFnZRIjLm5zeXMuYXBp",
            "LmltYWdlLkdldEJhc2VJbWFnZVJlcXVlc3QaJC5uc3lzLmFwaS5pbWFnZS5H",
            "ZXRCYXNlSW1hZ2VSZXNwb25zZSIAElcKD0dldEJhc2VJbWFnZUxSTxIjLm5z",
            "eXMuYXBpLmltYWdlLkdldEJhc2VJbWFnZVJlcXVlc3QaHS5nb29nbGUubG9u",
            "Z3J1bm5pbmcuT3BlcmF0aW9uIgASZwoQR2V0RGVza2V3ZWRJbWFnZRInLm5z",
            "eXMuYXBpLmltYWdlLkdldERlc2tld2VkSW1hZ2VSZXF1ZXN0GigubnN5cy5h",
            "cGkuaW1hZ2UuR2V0RGVza2V3ZWRJbWFnZVJlc3BvbnNlIgASXwoTR2V0RGVz",
            "a2V3ZWRJbWFnZUxSTxInLm5zeXMuYXBpLmltYWdlLkdldERlc2tld2VkSW1h",
            "Z2VSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiIAEm0K",
            "EkdldFJlZ2lzdGVyZWRJbWFnZRIpLm5zeXMuYXBpLmltYWdlLkdldFJlZ2lz",
            "dGVyZWRJbWFnZVJlcXVlc3QaKi5uc3lzLmFwaS5pbWFnZS5HZXRSZWdpc3Rl",
            "cmVkSW1hZ2VSZXNwb25zZSIAEmMKFUdldFJlZ2lzdGVyZWRJbWFnZUxSTxIp",
            "Lm5zeXMuYXBpLmltYWdlLkdldFJlZ2lzdGVyZWRJbWFnZVJlcXVlc3QaHS5n",
            "b29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIgASWAoLR2V0RmllbGRDdXQS",
            "Ii5uc3lzLmFwaS5pbWFnZS5HZXRGaWVsZEN1dFJlcXVlc3QaIy5uc3lzLmFw",
            "aS5pbWFnZS5HZXRGaWVsZEN1dFJlc3BvbnNlIgASVQoOR2V0RmllbGRDdXRM",
            "Uk8SIi5uc3lzLmFwaS5pbWFnZS5HZXRGaWVsZEN1dFJlcXVlc3QaHS5nb29n",
            "bGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIgASZwoQTGlzdFNvbHZlZEZpZWxk",
            "cxInLm5zeXMuYXBpLmltYWdlLkxpc3RTb2x2ZWRGaWVsZHNSZXF1ZXN0Gigu",
            "bnN5cy5hcGkuaW1hZ2UuTGlzdFNvbHZlZEZpZWxkc1Jlc3BvbnNlIgASXwoT",
            "TGlzdFNvbHZlZEZpZWxkc0xSTxInLm5zeXMuYXBpLmltYWdlLkxpc3RTb2x2",
            "ZWRGaWVsZHNSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlv",
            "biIAEmoKEUdldEZpZWxkU29sdXRpb25zEigubnN5cy5hcGkuaW1hZ2UuR2V0",
            "RmllbGRTb2x1dGlvbnNSZXF1ZXN0GikubnN5cy5hcGkuaW1hZ2UuR2V0Rmll",
            "bGRTb2x1dGlvbnNSZXNwb25zZSIAEmEKFEdldEZpZWxkU29sdXRpb25zTFJP",
            "EigubnN5cy5hcGkuaW1hZ2UuR2V0RmllbGRTb2x1dGlvbnNSZXF1ZXN0Gh0u",
            "Z29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiIAQhNaEW5zeXMuaW8vYXBp",
            "L2ltYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.LongRunning.OperationsReflection.Descriptor, global::Nsys.Api.Ntypes.FieldReflection.Descriptor, global::Nsys.Api.Ntypes.ImageNtypesReflection.Descriptor, global::Nsys.Api.Ntypes.ExemplarNtypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.UploadImageRequest), global::Nsys.Api.Image.UploadImageRequest.Parser, new[]{ "Name", "Image", "ImageSource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.UploadImageResponse), global::Nsys.Api.Image.UploadImageResponse.Parser, new[]{ "Name", "ExpireTime", "DeskewFailed", "DeskewAngle", "DegreesRotated", "BackgroundColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetExemplarSnapshotRequest), global::Nsys.Api.Image.GetExemplarSnapshotRequest.Parser, new[]{ "ImageName", "ReturnImageData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetExemplarSnapshotResponse), global::Nsys.Api.Image.GetExemplarSnapshotResponse.Parser, new[]{ "ExemplarSnapshot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.SolveFieldRequest), global::Nsys.Api.Image.SolveFieldRequest.Parser, new[]{ "ImageName", "FieldName", "SolutionParameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.SolveFieldResponse), global::Nsys.Api.Image.SolveFieldResponse.Parser, new[]{ "FieldSolution" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.ListSolvedFieldsRequest), global::Nsys.Api.Image.ListSolvedFieldsRequest.Parser, new[]{ "ImageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.ListSolvedFieldsResponse), global::Nsys.Api.Image.ListSolvedFieldsResponse.Parser, new[]{ "FieldNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetFieldSolutionsRequest), global::Nsys.Api.Image.GetFieldSolutionsRequest.Parser, new[]{ "ImageName", "FieldNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetFieldSolutionsResponse), global::Nsys.Api.Image.GetFieldSolutionsResponse.Parser, new[]{ "FieldSolutions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetBaseImageRequest), global::Nsys.Api.Image.GetBaseImageRequest.Parser, new[]{ "ImageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetBaseImageResponse), global::Nsys.Api.Image.GetBaseImageResponse.Parser, new[]{ "BaseImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetDeskewedImageRequest), global::Nsys.Api.Image.GetDeskewedImageRequest.Parser, new[]{ "ImageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetDeskewedImageResponse), global::Nsys.Api.Image.GetDeskewedImageResponse.Parser, new[]{ "DeskewedImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.RegisterImageRequest), global::Nsys.Api.Image.RegisterImageRequest.Parser, new[]{ "ImageName", "Language", "CandidateExemplars" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.RegisterImageResponse), global::Nsys.Api.Image.RegisterImageResponse.Parser, new[]{ "SelectedExemplar", "NoMatch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetRegisteredImageRequest), global::Nsys.Api.Image.GetRegisteredImageRequest.Parser, new[]{ "ImageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetRegisteredImageResponse), global::Nsys.Api.Image.GetRegisteredImageResponse.Parser, new[]{ "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetFieldCutRequest), global::Nsys.Api.Image.GetFieldCutRequest.Parser, new[]{ "ImageName", "FieldName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nsys.Api.Image.GetFieldCutResponse), global::Nsys.Api.Image.GetFieldCutResponse.Parser, new[]{ "FieldCut" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UploadImageRequest : pb::IMessage<UploadImageRequest> {
    private static readonly pb::MessageParser<UploadImageRequest> _parser = new pb::MessageParser<UploadImageRequest>(() => new UploadImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadImageRequest(UploadImageRequest other) : this() {
      name_ = other.name_;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      imageSource_ = other.imageSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadImageRequest Clone() {
      return new UploadImageRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// An identifier for the uploaded image that is unique within the account.
    /// If none is supplied, one will be generated and returned in the response.
    /// Must match regex '^[0-9A-Za-z.-]{1,48}$'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 2;
    private global::Nsys.Api.Ntypes.Image image_;
    /// <summary>
    /// The image to upload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "image_source" field.</summary>
    public const int ImageSourceFieldNumber = 3;
    private global::Nsys.Api.Ntypes.ImageSource imageSource_ = 0;
    /// <summary>
    /// The source of the image, if known.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.ImageSource ImageSource {
      get { return imageSource_; }
      set {
        imageSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (ImageSource != other.ImageSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (ImageSource != 0) hash ^= ImageSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (image_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Image);
      }
      if (ImageSource != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ImageSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (ImageSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Nsys.Api.Ntypes.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.ImageSource != 0) {
        ImageSource = other.ImageSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (image_ == null) {
              Image = new global::Nsys.Api.Ntypes.Image();
            }
            input.ReadMessage(Image);
            break;
          }
          case 24: {
            ImageSource = (global::Nsys.Api.Ntypes.ImageSource) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UploadImageResponse : pb::IMessage<UploadImageResponse> {
    private static readonly pb::MessageParser<UploadImageResponse> _parser = new pb::MessageParser<UploadImageResponse>(() => new UploadImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadImageResponse(UploadImageResponse other) : this() {
      name_ = other.name_;
      expireTime_ = other.expireTime_ != null ? other.expireTime_.Clone() : null;
      deskewFailed_ = other.deskewFailed_;
      deskewAngle_ = other.deskewAngle_;
      degreesRotated_ = other.degreesRotated_;
      backgroundColor_ = other.backgroundColor_ != null ? other.backgroundColor_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadImageResponse Clone() {
      return new UploadImageResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The image identifier supplied by the client or assigned by the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expireTime_;
    /// <summary>
    /// When the image and any derived products will be dropped by the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "deskew_failed" field.</summary>
    public const int DeskewFailedFieldNumber = 3;
    private bool deskewFailed_;
    /// <summary>
    /// If true, the system was unable to unable to confidently deskew and/or
    /// orient the image. In this case, the image only goes through an encoding
    /// transform and the deskew and rotation angles are not set. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeskewFailed {
      get { return deskewFailed_; }
      set {
        deskewFailed_ = value;
      }
    }

    /// <summary>Field number for the "deskew_angle" field.</summary>
    public const int DeskewAngleFieldNumber = 4;
    private double deskewAngle_;
    /// <summary>
    /// The number of degrees rotation that were required to bring the bulk of
    /// the longest text lines into a horizontal or vertical orientation. 
    /// Absolute values greater than 10 are strong indicator that something with 
    /// the original image is in really bad shape. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DeskewAngle {
      get { return deskewAngle_; }
      set {
        deskewAngle_ = value;
      }
    }

    /// <summary>Field number for the "degrees_rotated" field.</summary>
    public const int DegreesRotatedFieldNumber = 5;
    private int degreesRotated_;
    /// <summary>
    /// 0, 90, 180, or 270 -- the number of degrees the image had to be rotated 
    /// to get most of the printed lines "right side up" once deskewed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DegreesRotated {
      get { return degreesRotated_; }
      set {
        degreesRotated_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 6;
    private global::Nsys.Api.Ntypes.RGBA backgroundColor_;
    /// <summary>
    /// Computed background color (used for edge fill).  
    /// If multi-color, the color covering the most area generally wins.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.RGBA BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(ExpireTime, other.ExpireTime)) return false;
      if (DeskewFailed != other.DeskewFailed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DeskewAngle, other.DeskewAngle)) return false;
      if (DegreesRotated != other.DegreesRotated) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (expireTime_ != null) hash ^= ExpireTime.GetHashCode();
      if (DeskewFailed != false) hash ^= DeskewFailed.GetHashCode();
      if (DeskewAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DeskewAngle);
      if (DegreesRotated != 0) hash ^= DegreesRotated.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (expireTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExpireTime);
      }
      if (DeskewFailed != false) {
        output.WriteRawTag(24);
        output.WriteBool(DeskewFailed);
      }
      if (DeskewAngle != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(DeskewAngle);
      }
      if (DegreesRotated != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DegreesRotated);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BackgroundColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (expireTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpireTime);
      }
      if (DeskewFailed != false) {
        size += 1 + 1;
      }
      if (DeskewAngle != 0D) {
        size += 1 + 8;
      }
      if (DegreesRotated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DegreesRotated);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.expireTime_ != null) {
        if (expireTime_ == null) {
          ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpireTime.MergeFrom(other.ExpireTime);
      }
      if (other.DeskewFailed != false) {
        DeskewFailed = other.DeskewFailed;
      }
      if (other.DeskewAngle != 0D) {
        DeskewAngle = other.DeskewAngle;
      }
      if (other.DegreesRotated != 0) {
        DegreesRotated = other.DegreesRotated;
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          BackgroundColor = new global::Nsys.Api.Ntypes.RGBA();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (expireTime_ == null) {
              ExpireTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpireTime);
            break;
          }
          case 24: {
            DeskewFailed = input.ReadBool();
            break;
          }
          case 33: {
            DeskewAngle = input.ReadDouble();
            break;
          }
          case 40: {
            DegreesRotated = input.ReadInt32();
            break;
          }
          case 50: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::Nsys.Api.Ntypes.RGBA();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExemplarSnapshotRequest : pb::IMessage<GetExemplarSnapshotRequest> {
    private static readonly pb::MessageParser<GetExemplarSnapshotRequest> _parser = new pb::MessageParser<GetExemplarSnapshotRequest>(() => new GetExemplarSnapshotRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExemplarSnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExemplarSnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExemplarSnapshotRequest(GetExemplarSnapshotRequest other) : this() {
      imageName_ = other.imageName_;
      returnImageData_ = other.returnImageData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExemplarSnapshotRequest Clone() {
      return new GetExemplarSnapshotRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "return_image_data" field.</summary>
    public const int ReturnImageDataFieldNumber = 2;
    private bool returnImageData_;
    /// <summary>
    /// Return the actual exemplar image data too? 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnImageData {
      get { return returnImageData_; }
      set {
        returnImageData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExemplarSnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExemplarSnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      if (ReturnImageData != other.ReturnImageData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (ReturnImageData != false) hash ^= ReturnImageData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (ReturnImageData != false) {
        output.WriteRawTag(16);
        output.WriteBool(ReturnImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (ReturnImageData != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExemplarSnapshotRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      if (other.ReturnImageData != false) {
        ReturnImageData = other.ReturnImageData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
          case 16: {
            ReturnImageData = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExemplarSnapshotResponse : pb::IMessage<GetExemplarSnapshotResponse> {
    private static readonly pb::MessageParser<GetExemplarSnapshotResponse> _parser = new pb::MessageParser<GetExemplarSnapshotResponse>(() => new GetExemplarSnapshotResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExemplarSnapshotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExemplarSnapshotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExemplarSnapshotResponse(GetExemplarSnapshotResponse other) : this() {
      exemplarSnapshot_ = other.exemplarSnapshot_ != null ? other.exemplarSnapshot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExemplarSnapshotResponse Clone() {
      return new GetExemplarSnapshotResponse(this);
    }

    /// <summary>Field number for the "exemplar_snapshot" field.</summary>
    public const int ExemplarSnapshotFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Exemplar exemplarSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Exemplar ExemplarSnapshot {
      get { return exemplarSnapshot_; }
      set {
        exemplarSnapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExemplarSnapshotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExemplarSnapshotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExemplarSnapshot, other.ExemplarSnapshot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (exemplarSnapshot_ != null) hash ^= ExemplarSnapshot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (exemplarSnapshot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExemplarSnapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (exemplarSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExemplarSnapshot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExemplarSnapshotResponse other) {
      if (other == null) {
        return;
      }
      if (other.exemplarSnapshot_ != null) {
        if (exemplarSnapshot_ == null) {
          ExemplarSnapshot = new global::Nsys.Api.Ntypes.Exemplar();
        }
        ExemplarSnapshot.MergeFrom(other.ExemplarSnapshot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (exemplarSnapshot_ == null) {
              ExemplarSnapshot = new global::Nsys.Api.Ntypes.Exemplar();
            }
            input.ReadMessage(ExemplarSnapshot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SolveFieldRequest : pb::IMessage<SolveFieldRequest> {
    private static readonly pb::MessageParser<SolveFieldRequest> _parser = new pb::MessageParser<SolveFieldRequest>(() => new SolveFieldRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolveFieldRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveFieldRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveFieldRequest(SolveFieldRequest other) : this() {
      imageName_ = other.imageName_;
      fieldName_ = other.fieldName_;
      solutionParameters_ = other.solutionParameters_ != null ? other.solutionParameters_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveFieldRequest Clone() {
      return new SolveFieldRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    /// <summary>
    /// Identifier for some image which has already been registered to an exemplar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_name" field.</summary>
    public const int FieldNameFieldNumber = 2;
    private string fieldName_ = "";
    /// <summary>
    /// Identifier of the field to solve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "solution_parameters" field.</summary>
    public const int SolutionParametersFieldNumber = 3;
    private global::Nsys.Api.Ntypes.SolutionParameters solutionParameters_;
    /// <summary>
    /// Field-specific hints and parameters for solution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.SolutionParameters SolutionParameters {
      get { return solutionParameters_; }
      set {
        solutionParameters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolveFieldRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolveFieldRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      if (FieldName != other.FieldName) return false;
      if (!object.Equals(SolutionParameters, other.SolutionParameters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (solutionParameters_ != null) hash ^= SolutionParameters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (FieldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (solutionParameters_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolutionParameters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (solutionParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolutionParameters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolveFieldRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      if (other.solutionParameters_ != null) {
        if (solutionParameters_ == null) {
          SolutionParameters = new global::Nsys.Api.Ntypes.SolutionParameters();
        }
        SolutionParameters.MergeFrom(other.SolutionParameters);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
          case 26: {
            if (solutionParameters_ == null) {
              SolutionParameters = new global::Nsys.Api.Ntypes.SolutionParameters();
            }
            input.ReadMessage(SolutionParameters);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SolveFieldResponse : pb::IMessage<SolveFieldResponse> {
    private static readonly pb::MessageParser<SolveFieldResponse> _parser = new pb::MessageParser<SolveFieldResponse>(() => new SolveFieldResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolveFieldResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveFieldResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveFieldResponse(SolveFieldResponse other) : this() {
      fieldSolution_ = other.fieldSolution_ != null ? other.fieldSolution_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolveFieldResponse Clone() {
      return new SolveFieldResponse(this);
    }

    /// <summary>Field number for the "field_solution" field.</summary>
    public const int FieldSolutionFieldNumber = 1;
    private global::Nsys.Api.Ntypes.FieldSolution fieldSolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.FieldSolution FieldSolution {
      get { return fieldSolution_; }
      set {
        fieldSolution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolveFieldResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolveFieldResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FieldSolution, other.FieldSolution)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldSolution_ != null) hash ^= FieldSolution.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldSolution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FieldSolution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldSolution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldSolution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolveFieldResponse other) {
      if (other == null) {
        return;
      }
      if (other.fieldSolution_ != null) {
        if (fieldSolution_ == null) {
          FieldSolution = new global::Nsys.Api.Ntypes.FieldSolution();
        }
        FieldSolution.MergeFrom(other.FieldSolution);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fieldSolution_ == null) {
              FieldSolution = new global::Nsys.Api.Ntypes.FieldSolution();
            }
            input.ReadMessage(FieldSolution);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListSolvedFieldsRequest : pb::IMessage<ListSolvedFieldsRequest> {
    private static readonly pb::MessageParser<ListSolvedFieldsRequest> _parser = new pb::MessageParser<ListSolvedFieldsRequest>(() => new ListSolvedFieldsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSolvedFieldsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSolvedFieldsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSolvedFieldsRequest(ListSolvedFieldsRequest other) : this() {
      imageName_ = other.imageName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSolvedFieldsRequest Clone() {
      return new ListSolvedFieldsRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    /// <summary>
    /// Returns a list the identifiers for all fields which have solutions available 
    /// on the specified image. Meant to provide an efficient polling mechanism but,
    /// still, don't go crazy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSolvedFieldsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSolvedFieldsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSolvedFieldsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListSolvedFieldsResponse : pb::IMessage<ListSolvedFieldsResponse> {
    private static readonly pb::MessageParser<ListSolvedFieldsResponse> _parser = new pb::MessageParser<ListSolvedFieldsResponse>(() => new ListSolvedFieldsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSolvedFieldsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSolvedFieldsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSolvedFieldsResponse(ListSolvedFieldsResponse other) : this() {
      fieldNames_ = other.fieldNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSolvedFieldsResponse Clone() {
      return new ListSolvedFieldsResponse(this);
    }

    /// <summary>Field number for the "field_names" field.</summary>
    public const int FieldNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fieldNames_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fieldNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fields which have solutions (solved puzzles).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FieldNames {
      get { return fieldNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSolvedFieldsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSolvedFieldsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fieldNames_.Equals(other.fieldNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fieldNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fieldNames_.WriteTo(output, _repeated_fieldNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fieldNames_.CalculateSize(_repeated_fieldNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSolvedFieldsResponse other) {
      if (other == null) {
        return;
      }
      fieldNames_.Add(other.fieldNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fieldNames_.AddEntriesFrom(input, _repeated_fieldNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFieldSolutionsRequest : pb::IMessage<GetFieldSolutionsRequest> {
    private static readonly pb::MessageParser<GetFieldSolutionsRequest> _parser = new pb::MessageParser<GetFieldSolutionsRequest>(() => new GetFieldSolutionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFieldSolutionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldSolutionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldSolutionsRequest(GetFieldSolutionsRequest other) : this() {
      imageName_ = other.imageName_;
      fieldNames_ = other.fieldNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldSolutionsRequest Clone() {
      return new GetFieldSolutionsRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    /// <summary>
    /// Identifier for an exemplar-registered image which (potentially anyway)
    /// has solved fields on it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_names" field.</summary>
    public const int FieldNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_fieldNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> fieldNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of fields defined on the image's exemplar that we want the 
    /// solutions for for. Solutions not available at the time of query
    /// are not mentioned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FieldNames {
      get { return fieldNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFieldSolutionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFieldSolutionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      if(!fieldNames_.Equals(other.fieldNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      hash ^= fieldNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      fieldNames_.WriteTo(output, _repeated_fieldNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      size += fieldNames_.CalculateSize(_repeated_fieldNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFieldSolutionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      fieldNames_.Add(other.fieldNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
          case 18: {
            fieldNames_.AddEntriesFrom(input, _repeated_fieldNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFieldSolutionsResponse : pb::IMessage<GetFieldSolutionsResponse> {
    private static readonly pb::MessageParser<GetFieldSolutionsResponse> _parser = new pb::MessageParser<GetFieldSolutionsResponse>(() => new GetFieldSolutionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFieldSolutionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldSolutionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldSolutionsResponse(GetFieldSolutionsResponse other) : this() {
      fieldSolutions_ = other.fieldSolutions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldSolutionsResponse Clone() {
      return new GetFieldSolutionsResponse(this);
    }

    /// <summary>Field number for the "field_solutions" field.</summary>
    public const int FieldSolutionsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Nsys.Api.Ntypes.FieldSolution>.Codec _map_fieldSolutions_codec
        = new pbc::MapField<string, global::Nsys.Api.Ntypes.FieldSolution>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Nsys.Api.Ntypes.FieldSolution.Parser), 10);
    private readonly pbc::MapField<string, global::Nsys.Api.Ntypes.FieldSolution> fieldSolutions_ = new pbc::MapField<string, global::Nsys.Api.Ntypes.FieldSolution>();
    /// <summary>
    /// Keyed on field id. Only fields that have been solved are returned.
    /// No mention is made of unsolved ones and it is not an error to query
    /// for them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Nsys.Api.Ntypes.FieldSolution> FieldSolutions {
      get { return fieldSolutions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFieldSolutionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFieldSolutionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!FieldSolutions.Equals(other.FieldSolutions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= FieldSolutions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fieldSolutions_.WriteTo(output, _map_fieldSolutions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fieldSolutions_.CalculateSize(_map_fieldSolutions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFieldSolutionsResponse other) {
      if (other == null) {
        return;
      }
      fieldSolutions_.Add(other.fieldSolutions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fieldSolutions_.AddEntriesFrom(input, _map_fieldSolutions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBaseImageRequest : pb::IMessage<GetBaseImageRequest> {
    private static readonly pb::MessageParser<GetBaseImageRequest> _parser = new pb::MessageParser<GetBaseImageRequest>(() => new GetBaseImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBaseImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseImageRequest(GetBaseImageRequest other) : this() {
      imageName_ = other.imageName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseImageRequest Clone() {
      return new GetBaseImageRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBaseImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBaseImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBaseImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBaseImageResponse : pb::IMessage<GetBaseImageResponse> {
    private static readonly pb::MessageParser<GetBaseImageResponse> _parser = new pb::MessageParser<GetBaseImageResponse>(() => new GetBaseImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBaseImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseImageResponse(GetBaseImageResponse other) : this() {
      baseImage_ = other.baseImage_ != null ? other.baseImage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBaseImageResponse Clone() {
      return new GetBaseImageResponse(this);
    }

    /// <summary>Field number for the "base_image" field.</summary>
    public const int BaseImageFieldNumber = 1;
    private global::Nsys.Api.Ntypes.Image baseImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Image BaseImage {
      get { return baseImage_; }
      set {
        baseImage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBaseImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBaseImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseImage, other.BaseImage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseImage_ != null) hash ^= BaseImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseImage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBaseImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.baseImage_ != null) {
        if (baseImage_ == null) {
          BaseImage = new global::Nsys.Api.Ntypes.Image();
        }
        BaseImage.MergeFrom(other.BaseImage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (baseImage_ == null) {
              BaseImage = new global::Nsys.Api.Ntypes.Image();
            }
            input.ReadMessage(BaseImage);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeskewedImageRequest : pb::IMessage<GetDeskewedImageRequest> {
    private static readonly pb::MessageParser<GetDeskewedImageRequest> _parser = new pb::MessageParser<GetDeskewedImageRequest>(() => new GetDeskewedImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeskewedImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeskewedImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeskewedImageRequest(GetDeskewedImageRequest other) : this() {
      imageName_ = other.imageName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeskewedImageRequest Clone() {
      return new GetDeskewedImageRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeskewedImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeskewedImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeskewedImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeskewedImageResponse : pb::IMessage<GetDeskewedImageResponse> {
    private static readonly pb::MessageParser<GetDeskewedImageResponse> _parser = new pb::MessageParser<GetDeskewedImageResponse>(() => new GetDeskewedImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeskewedImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeskewedImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeskewedImageResponse(GetDeskewedImageResponse other) : this() {
      deskewedImage_ = other.deskewedImage_ != null ? other.deskewedImage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeskewedImageResponse Clone() {
      return new GetDeskewedImageResponse(this);
    }

    /// <summary>Field number for the "deskewed_image" field.</summary>
    public const int DeskewedImageFieldNumber = 1;
    private global::Nsys.Api.Ntypes.DeskewedImage deskewedImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.DeskewedImage DeskewedImage {
      get { return deskewedImage_; }
      set {
        deskewedImage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeskewedImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeskewedImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeskewedImage, other.DeskewedImage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deskewedImage_ != null) hash ^= DeskewedImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deskewedImage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeskewedImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deskewedImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeskewedImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeskewedImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.deskewedImage_ != null) {
        if (deskewedImage_ == null) {
          DeskewedImage = new global::Nsys.Api.Ntypes.DeskewedImage();
        }
        DeskewedImage.MergeFrom(other.DeskewedImage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deskewedImage_ == null) {
              DeskewedImage = new global::Nsys.Api.Ntypes.DeskewedImage();
            }
            input.ReadMessage(DeskewedImage);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterImageRequest : pb::IMessage<RegisterImageRequest> {
    private static readonly pb::MessageParser<RegisterImageRequest> _parser = new pb::MessageParser<RegisterImageRequest>(() => new RegisterImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterImageRequest(RegisterImageRequest other) : this() {
      imageName_ = other.imageName_;
      language_ = other.language_;
      candidateExemplars_ = other.candidateExemplars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterImageRequest Clone() {
      return new RegisterImageRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    /// <summary>
    /// Identifier for the upload image being registered against an exemplar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private global::Nsys.Api.Ntypes.Language language_ = 0;
    /// <summary>
    /// Dominant language of the printed text in the image, if known.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.Language Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "candidate_exemplars" field.</summary>
    public const int CandidateExemplarsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_candidateExemplars_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> candidateExemplars_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of candidate exemplars to consider for matching.  If the list
    /// empty,  all existing exemplars are considered for possible match. 
    /// If a match is found, the image registration occurs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CandidateExemplars {
      get { return candidateExemplars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      if (Language != other.Language) return false;
      if(!candidateExemplars_.Equals(other.candidateExemplars_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      hash ^= candidateExemplars_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (Language != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Language);
      }
      candidateExemplars_.WriteTo(output, _repeated_candidateExemplars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Language);
      }
      size += candidateExemplars_.CalculateSize(_repeated_candidateExemplars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      candidateExemplars_.Add(other.candidateExemplars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
          case 16: {
            Language = (global::Nsys.Api.Ntypes.Language) input.ReadEnum();
            break;
          }
          case 26: {
            candidateExemplars_.AddEntriesFrom(input, _repeated_candidateExemplars_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterImageResponse : pb::IMessage<RegisterImageResponse> {
    private static readonly pb::MessageParser<RegisterImageResponse> _parser = new pb::MessageParser<RegisterImageResponse>(() => new RegisterImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterImageResponse(RegisterImageResponse other) : this() {
      selectedExemplar_ = other.selectedExemplar_;
      noMatch_ = other.noMatch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterImageResponse Clone() {
      return new RegisterImageResponse(this);
    }

    /// <summary>Field number for the "selected_exemplar" field.</summary>
    public const int SelectedExemplarFieldNumber = 1;
    private string selectedExemplar_ = "";
    /// <summary>
    /// If present, the name of the exemplar the image was registered against.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectedExemplar {
      get { return selectedExemplar_; }
      set {
        selectedExemplar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_match" field.</summary>
    public const int NoMatchFieldNumber = 2;
    private bool noMatch_;
    /// <summary>
    /// Set if no exemplar matched closely enough. No error occurred in the 
    /// processing. Failures in the physical registration phase will be reflected 
    /// in error returns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoMatch {
      get { return noMatch_; }
      set {
        noMatch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectedExemplar != other.SelectedExemplar) return false;
      if (NoMatch != other.NoMatch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelectedExemplar.Length != 0) hash ^= SelectedExemplar.GetHashCode();
      if (NoMatch != false) hash ^= NoMatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectedExemplar.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SelectedExemplar);
      }
      if (NoMatch != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectedExemplar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedExemplar);
      }
      if (NoMatch != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.SelectedExemplar.Length != 0) {
        SelectedExemplar = other.SelectedExemplar;
      }
      if (other.NoMatch != false) {
        NoMatch = other.NoMatch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SelectedExemplar = input.ReadString();
            break;
          }
          case 16: {
            NoMatch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRegisteredImageRequest : pb::IMessage<GetRegisteredImageRequest> {
    private static readonly pb::MessageParser<GetRegisteredImageRequest> _parser = new pb::MessageParser<GetRegisteredImageRequest>(() => new GetRegisteredImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRegisteredImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRegisteredImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRegisteredImageRequest(GetRegisteredImageRequest other) : this() {
      imageName_ = other.imageName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRegisteredImageRequest Clone() {
      return new GetRegisteredImageRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRegisteredImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRegisteredImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRegisteredImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRegisteredImageResponse : pb::IMessage<GetRegisteredImageResponse> {
    private static readonly pb::MessageParser<GetRegisteredImageResponse> _parser = new pb::MessageParser<GetRegisteredImageResponse>(() => new GetRegisteredImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRegisteredImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRegisteredImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRegisteredImageResponse(GetRegisteredImageResponse other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRegisteredImageResponse Clone() {
      return new GetRegisteredImageResponse(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Nsys.Api.Ntypes.DimensionedImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.DimensionedImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRegisteredImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRegisteredImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRegisteredImageResponse other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Nsys.Api.Ntypes.DimensionedImage();
        }
        Image.MergeFrom(other.Image);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Nsys.Api.Ntypes.DimensionedImage();
            }
            input.ReadMessage(Image);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFieldCutRequest : pb::IMessage<GetFieldCutRequest> {
    private static readonly pb::MessageParser<GetFieldCutRequest> _parser = new pb::MessageParser<GetFieldCutRequest>(() => new GetFieldCutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFieldCutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldCutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldCutRequest(GetFieldCutRequest other) : this() {
      imageName_ = other.imageName_;
      fieldName_ = other.fieldName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldCutRequest Clone() {
      return new GetFieldCutRequest(this);
    }

    /// <summary>Field number for the "image_name" field.</summary>
    public const int ImageNameFieldNumber = 1;
    private string imageName_ = "";
    /// <summary>
    /// Identifier for some image which has already been registered to an exemplar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageName {
      get { return imageName_; }
      set {
        imageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field_name" field.</summary>
    public const int FieldNameFieldNumber = 2;
    private string fieldName_ = "";
    /// <summary>
    /// Identifier of the field we are returning a cut for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFieldCutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFieldCutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageName != other.ImageName) return false;
      if (FieldName != other.FieldName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageName.Length != 0) hash ^= ImageName.GetHashCode();
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageName);
      }
      if (FieldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageName);
      }
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFieldCutRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageName.Length != 0) {
        ImageName = other.ImageName;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageName = input.ReadString();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFieldCutResponse : pb::IMessage<GetFieldCutResponse> {
    private static readonly pb::MessageParser<GetFieldCutResponse> _parser = new pb::MessageParser<GetFieldCutResponse>(() => new GetFieldCutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFieldCutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nsys.Api.Image.ImageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldCutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldCutResponse(GetFieldCutResponse other) : this() {
      fieldCut_ = other.fieldCut_ != null ? other.fieldCut_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFieldCutResponse Clone() {
      return new GetFieldCutResponse(this);
    }

    /// <summary>Field number for the "field_cut" field.</summary>
    public const int FieldCutFieldNumber = 1;
    private global::Nsys.Api.Ntypes.FieldCut fieldCut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nsys.Api.Ntypes.FieldCut FieldCut {
      get { return fieldCut_; }
      set {
        fieldCut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFieldCutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFieldCutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FieldCut, other.FieldCut)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fieldCut_ != null) hash ^= FieldCut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fieldCut_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FieldCut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fieldCut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldCut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFieldCutResponse other) {
      if (other == null) {
        return;
      }
      if (other.fieldCut_ != null) {
        if (fieldCut_ == null) {
          FieldCut = new global::Nsys.Api.Ntypes.FieldCut();
        }
        FieldCut.MergeFrom(other.FieldCut);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fieldCut_ == null) {
              FieldCut = new global::Nsys.Api.Ntypes.FieldCut();
            }
            input.ReadMessage(FieldCut);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
